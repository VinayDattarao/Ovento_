{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2293},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport async function generateEventRecommendations(userProfile: {\n  skills: string[];\n  interests: string[];\n  pastEvents: string[];\n}): Promise<{\n  recommendations: Array<{\n    type: string;\n    score: number;\n    reason: string;\n    suggestedTags: string[];\n  }>;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an AI event recommendation engine. Analyze user profiles and suggest relevant event types, team matches, and learning opportunities. Respond with JSON in this format: { 'recommendations': [{ 'type': string, 'score': number, 'reason': string, 'suggestedTags': string[] }] }\",\n        },\n        {\n          role: \"user\",\n          content: `User profile: Skills: ${userProfile.skills.join(', ')}, Interests: ${userProfile.interests.join(', ')}, Past events: ${userProfile.pastEvents.join(', ')}. Generate 5 personalized recommendations.`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI recommendation error:\", error);\n    throw new Error(\"Failed to generate AI recommendations\");\n  }\n}\n\nexport async function generateTeamMatches(userProfile: {\n  skills: string[];\n  interests: string[];\n  workStyle: string;\n}): Promise<{\n  matches: Array<{\n    compatibility: number;\n    reason: string;\n    recommendedRoles: string[];\n  }>;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an AI team matching system. Analyze user profiles and suggest team compatibility. Respond with JSON in this format: { 'matches': [{ 'compatibility': number, 'reason': string, 'recommendedRoles': string[] }] }\",\n        },\n        {\n          role: \"user\",\n          content: `User profile: Skills: ${userProfile.skills.join(', ')}, Interests: ${userProfile.interests.join(', ')}, Work style: ${userProfile.workStyle}. Find compatible team members.`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI team matching error:\", error);\n    throw new Error(\"Failed to generate team matches\");\n  }\n}\n\nexport async function analyzeImage(base64Image: string): Promise<string> {\n  try {\n    const visionResponse = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Analyze this image and describe its key elements, context, and any notable aspects relevant to event management or team collaboration.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      max_tokens: 500,\n    });\n\n    return visionResponse.choices[0].message.content || \"\";\n  } catch (error) {\n    console.error(\"OpenAI image analysis error:\", error);\n    throw new Error(\"Failed to analyze image\");\n  }\n}\n\nexport async function analyzeSentiment(text: string): Promise<{\n  rating: number;\n  confidence: number;\n  insights: string;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a sentiment analysis expert. Analyze the sentiment of the text and provide a rating from 1 to 5 stars, a confidence score between 0 and 1, and insights. Respond with JSON in this format: { 'rating': number, 'confidence': number, 'insights': string }\",\n        },\n        {\n          role: \"user\",\n          content: text,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n\n    return {\n      rating: Math.max(1, Math.min(5, Math.round(result.rating))),\n      confidence: Math.max(0, Math.min(1, result.confidence)),\n      insights: result.insights || \"No insights available\",\n    };\n  } catch (error) {\n    console.error(\"OpenAI sentiment analysis error:\", error);\n    throw new Error(\"Failed to analyze sentiment\");\n  }\n}\n\nexport async function generateEventContent(eventType: string, theme: string): Promise<{\n  title: string;\n  description: string;\n  suggestedSchedule: Array<{\n    time: string;\n    activity: string;\n    duration: string;\n  }>;\n  requirements: string[];\n  tags: string[];\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an AI event planning assistant. Generate comprehensive event content including title, description, schedule, requirements, and tags. Respond with JSON in this format: { 'title': string, 'description': string, 'suggestedSchedule': [{ 'time': string, 'activity': string, 'duration': string }], 'requirements': string[], 'tags': string[] }\",\n        },\n        {\n          role: \"user\",\n          content: `Generate content for a ${eventType} event with theme: ${theme}. Include detailed schedule, requirements, and relevant tags.`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result;\n  } catch (error) {\n    console.error(\"OpenAI content generation error:\", error);\n    throw new Error(\"Failed to generate event content\");\n  }\n}\n","size_bytes":6069},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertEventSchema, insertTeamSchema, insertChatMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\nimport { analyzeImage, analyzeSentiment } from \"./openai\";\nimport { sendEmail } from \"./sendgrid\";\nimport multer from \"multer\";\n\n// Initialize Stripe\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n}) : null;\n\n// Prototype mode flag - when Stripe keys are not available, use mock payments\nconst isPrototypeMode = !process.env.STRIPE_SECRET_KEY;\n\n// Configure multer for file uploads\nconst upload = multer({\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req, file, cb) => {\n    // Allow images and common file types\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n    cb(null, allowedTypes.includes(file.mimetype));\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Event routes\n  app.get('/api/events', async (req, res) => {\n    try {\n      const { type, status, search } = req.query;\n      const events = await storage.getEvents({\n        type: type as string,\n        status: status as string,\n        search: search as string,\n      });\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get('/api/events/:id', async (req, res) => {\n    try {\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post('/api/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const eventData = insertEventSchema.parse({\n        ...req.body,\n        organizerId: userId,\n      });\n      \n      const event = await storage.createEvent(eventData);\n      \n      // Record analytics\n      await storage.recordEventMetric(event.id, 'created', 1);\n      \n      res.json(event);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.put('/api/events/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event || event.organizerId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const updates = insertEventSchema.partial().parse(req.body);\n      const updatedEvent = await storage.updateEvent(req.params.id, updates);\n      \n      res.json(updatedEvent);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  // Event registration routes\n  app.post('/api/events/:id/register', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { teamId } = req.body;\n      \n      const registration = await storage.registerForEvent(req.params.id, userId, teamId);\n      \n      // Record analytics\n      await storage.recordEventMetric(req.params.id, 'registrations', 1);\n      \n      // Send confirmation email\n      const user = await storage.getUser(userId);\n      const event = await storage.getEvent(req.params.id);\n      \n      if (user?.email && event) {\n        await sendEmail({\n          to: user.email,\n          from: process.env.FROM_EMAIL || 'noreply@nexus.dev',\n          subject: `Registration confirmed for ${event.title}`,\n          text: `You have successfully registered for ${event.title}. Event starts on ${event.startDate}.`,\n        });\n      }\n      \n      res.json(registration);\n    } catch (error) {\n      console.error(\"Error registering for event:\", error);\n      res.status(500).json({ message: \"Failed to register for event\" });\n    }\n  });\n\n  app.get('/api/events/:id/registrations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event || event.organizerId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const registrations = await storage.getEventRegistrations(req.params.id);\n      res.json(registrations);\n    } catch (error) {\n      console.error(\"Error fetching registrations:\", error);\n      res.status(500).json({ message: \"Failed to fetch registrations\" });\n    }\n  });\n\n  // Team routes\n  app.post('/api/teams', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const teamData = insertTeamSchema.parse({\n        ...req.body,\n        leaderId: userId,\n      });\n      \n      const team = await storage.createTeam(teamData);\n      res.json(team);\n    } catch (error) {\n      console.error(\"Error creating team:\", error);\n      res.status(500).json({ message: \"Failed to create team\" });\n    }\n  });\n\n  app.post('/api/teams/:id/join', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.joinTeam(req.params.id, userId);\n      res.json({ message: \"Joined team successfully\" });\n    } catch (error) {\n      console.error(\"Error joining team:\", error);\n      res.status(500).json({ message: \"Failed to join team\" });\n    }\n  });\n\n  app.get('/api/events/:id/teams', async (req, res) => {\n    try {\n      const teams = await storage.getEventTeams(req.params.id);\n      res.json(teams);\n    } catch (error) {\n      console.error(\"Error fetching teams:\", error);\n      res.status(500).json({ message: \"Failed to fetch teams\" });\n    }\n  });\n\n  // Chat routes\n  app.get('/api/events/:id/chat', isAuthenticated, async (req, res) => {\n    try {\n      const messages = await storage.getEventChatMessages(req.params.id, 50);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post('/api/events/:id/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const messageData = insertChatMessageSchema.parse({\n        ...req.body,\n        eventId: req.params.id,\n        userId,\n      });\n      \n      const message = await storage.createChatMessage(messageData);\n      \n      // Broadcast to WebSocket clients\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'chat_message',\n            eventId: req.params.id,\n            message,\n          }));\n        }\n      });\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error sending chat message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // AI routes\n  app.get('/api/ai/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { type } = req.query;\n      \n      const recommendations = await storage.getUserRecommendations(userId, type as string);\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error fetching AI recommendations:\", error);\n      res.status(500).json({ message: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  app.post('/api/ai/generate-recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Get user's skills and interests for AI recommendations\n      const userSkills = user.skills || [];\n      const userInterests = user.interests || [];\n      \n      // Find recommended events based on user profile\n      const events = await storage.getEvents({ status: 'published' });\n      \n      for (const event of events.slice(0, 5)) {\n        // Simple matching algorithm - in production, use more sophisticated AI\n        const skillsMatch = event.tags?.some(tag => userSkills.includes(tag)) || false;\n        const interestsMatch = event.tags?.some(tag => userInterests.includes(tag)) || false;\n        \n        if (skillsMatch || interestsMatch) {\n          const score = (skillsMatch ? 0.5 : 0) + (interestsMatch ? 0.5 : 0);\n          await storage.createAIRecommendation(\n            userId,\n            'event',\n            event.id,\n            score,\n            `Matches your ${skillsMatch ? 'skills' : 'interests'}`\n          );\n        }\n      }\n      \n      // Find potential teammates\n      if (userSkills.length > 0) {\n        const teammates = await storage.findTeammates(userId, userSkills);\n        \n        for (const teammate of teammates.slice(0, 3)) {\n          await storage.createAIRecommendation(\n            userId,\n            'team',\n            teammate.id,\n            0.8,\n            'Complementary skills for collaboration'\n          );\n        }\n      }\n      \n      res.json({ message: \"AI recommendations generated successfully\" });\n    } catch (error) {\n      console.error(\"Error generating AI recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/events/:id/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event || event.organizerId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const analytics = await storage.getEventAnalytics(req.params.id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get user's organized events\n      const organizedEvents = await storage.getEventsByOrganizer(userId);\n      \n      // Get user's registered events\n      const userEvents = await storage.getUserEvents(userId);\n      \n      // Get user's notifications\n      const notifications = await storage.getUserNotifications(userId, true);\n      \n      const stats = {\n        organizedEvents: organizedEvents.length,\n        registeredEvents: userEvents.length,\n        unreadNotifications: notifications.length,\n        totalParticipants: 0, // TODO: Calculate from registrations\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Payment routes (Stripe with prototype mode support)\n  if (stripe) {\n    console.log(\"🔵 Stripe configured - using real payment processing\");\n    app.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n      try {\n        const { amount, eventId } = req.body;\n        \n        const paymentIntent = await stripe.paymentIntents.create({\n          amount: Math.round(amount * 100), // Convert to cents\n          currency: \"usd\",\n          metadata: { eventId },\n        });\n        \n        res.json({ clientSecret: paymentIntent.client_secret });\n      } catch (error: any) {\n        console.error(\"Error creating payment intent:\", error);\n        res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n      }\n    });\n\n    app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        let user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (user.stripeSubscriptionId) {\n          const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n          res.json({\n            subscriptionId: subscription.id,\n            clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n          });\n          return;\n        }\n        \n        if (!user.email) {\n          return res.status(400).json({ message: 'No user email on file' });\n        }\n\n        const customer = await stripe.customers.create({\n          email: user.email,\n          name: `${user.firstName} ${user.lastName}`.trim(),\n        });\n\n        user = await storage.updateUserStripeInfo(user.id, customer.id);\n\n        const subscription = await stripe.subscriptions.create({\n          customer: customer.id,\n          items: [{\n            price: process.env.STRIPE_PRICE_ID || 'price_1234567890', // Default price ID\n          }],\n          payment_behavior: 'default_incomplete',\n          expand: ['latest_invoice.payment_intent'],\n        });\n\n        await storage.updateUserStripeInfo(user.id, customer.id, subscription.id);\n    \n        res.json({\n          subscriptionId: subscription.id,\n          clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n        });\n      } catch (error: any) {\n        console.error(\"Error creating subscription:\", error);\n        res.status(400).json({ error: { message: error.message } });\n      }\n    });\n  } else if (isPrototypeMode) {\n    console.log(\"🟡 PROTOTYPE MODE - Using mock payment processing (no real charges)\");\n    \n    // Mock payment intent creation\n    app.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n      try {\n        const { amount, eventId } = req.body;\n        \n        // Generate a mock client secret for prototype mode\n        const mockClientSecret = `pi_mock_${Date.now()}_secret_${Math.random().toString(36).substr(2, 9)}`;\n        \n        console.log(`💰 PROTOTYPE: Mock payment intent created for $${amount} (Event: ${eventId})`);\n        \n        res.json({ \n          clientSecret: mockClientSecret,\n          prototypeModeWarning: \"This is a prototype payment - no real charges will be made\"\n        });\n      } catch (error: any) {\n        console.error(\"Error creating mock payment intent:\", error);\n        res.status(500).json({ message: \"Error creating mock payment intent: \" + error.message });\n      }\n    });\n\n    // Mock subscription creation\n    app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        const user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        // Generate mock subscription data\n        const mockSubscriptionId = `sub_mock_${Date.now()}`;\n        const mockClientSecret = `pi_mock_${Date.now()}_secret_${Math.random().toString(36).substr(2, 9)}`;\n        \n        console.log(`📱 PROTOTYPE: Mock subscription created for user ${userId}`);\n        \n        res.json({\n          subscriptionId: mockSubscriptionId,\n          clientSecret: mockClientSecret,\n          prototypeModeWarning: \"This is a prototype subscription - no real charges will be made\"\n        });\n      } catch (error: any) {\n        console.error(\"Error creating mock subscription:\", error);\n        res.status(400).json({ error: { message: error.message } });\n      }\n    });\n  }\n\n  // File upload routes\n  app.post('/api/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      \n      // In production, upload to cloud storage (AWS S3, etc.)\n      // For now, return a mock URL\n      const fileUrl = `/uploads/${Date.now()}-${req.file.originalname}`;\n      \n      res.json({ \n        url: fileUrl,\n        filename: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  // Search routes\n  app.get('/api/search', async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.json([]);\n      }\n      \n      const events = await storage.searchEvents(q);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error searching events:\", error);\n      res.status(500).json({ message: \"Failed to search events\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time features\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('New WebSocket connection');\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        // Handle different message types\n        switch (message.type) {\n          case 'join_event':\n            // Join event room for real-time updates\n            ws.eventId = message.eventId;\n            break;\n          case 'chat_message':\n            // Broadcast chat message to all clients in the same event\n            wss.clients.forEach((client) => {\n              if (client !== ws && client.readyState === WebSocket.OPEN && client.eventId === message.eventId) {\n                client.send(JSON.stringify(message));\n              }\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":19548},"server/sendgrid.ts":{"content":"import sgMail from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set\");\n} else {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  templateId?: string;\n  dynamicTemplateData?: Record<string, any>;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.error(\"SendGrid API key not configured\");\n      return false;\n    }\n\n    const msg = {\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n      templateId: params.templateId,\n      dynamicTemplateData: params.dynamicTemplateData,\n    };\n\n    await sgMail.send(msg);\n    console.log(`Email sent successfully to ${params.to}`);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport async function sendEventRegistrationEmail(\n  userEmail: string,\n  userName: string,\n  eventTitle: string,\n  eventDate: string\n): Promise<boolean> {\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); padding: 20px; text-align: center;\">\n        <h1 style=\"color: white; margin: 0;\">Event Registration Confirmed</h1>\n      </div>\n      <div style=\"padding: 20px; background-color: #1a1a1a; color: #f5f5f5;\">\n        <h2>Hello ${userName}!</h2>\n        <p>You have successfully registered for <strong>${eventTitle}</strong>.</p>\n        <p><strong>Event Date:</strong> ${eventDate}</p>\n        <p>We're excited to have you join us! You'll receive more details about the event closer to the date.</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${process.env.FRONTEND_URL || 'https://nexus.dev'}\" \n             style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block;\">\n            View Event Details\n          </a>\n        </div>\n        <p>Best regards,<br>The Nexus Team</p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    from: process.env.FROM_EMAIL || 'noreply@nexus.dev',\n    subject: `Registration Confirmed: ${eventTitle}`,\n    html: htmlContent,\n  });\n}\n\nexport async function sendTeamInviteEmail(\n  inviteeEmail: string,\n  inviteeName: string,\n  teamName: string,\n  inviterName: string,\n  eventTitle: string\n): Promise<boolean> {\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); padding: 20px; text-align: center;\">\n        <h1 style=\"color: white; margin: 0;\">Team Invitation</h1>\n      </div>\n      <div style=\"padding: 20px; background-color: #1a1a1a; color: #f5f5f5;\">\n        <h2>Hello ${inviteeName}!</h2>\n        <p><strong>${inviterName}</strong> has invited you to join team <strong>${teamName}</strong> for the event <strong>${eventTitle}</strong>.</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${process.env.FRONTEND_URL || 'https://nexus.dev'}/teams\" \n             style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block; margin-right: 10px;\">\n            Accept Invitation\n          </a>\n          <a href=\"${process.env.FRONTEND_URL || 'https://nexus.dev'}/teams\" \n             style=\"border: 2px solid #4f46e5; color: #4f46e5; padding: 10px 22px; text-decoration: none; border-radius: 8px; display: inline-block;\">\n            View Details\n          </a>\n        </div>\n        <p>Best regards,<br>The Nexus Team</p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: inviteeEmail,\n    from: process.env.FROM_EMAIL || 'noreply@nexus.dev',\n    subject: `Team Invitation: ${teamName}`,\n    html: htmlContent,\n  });\n}\n\nexport async function sendEventReminderEmail(\n  userEmail: string,\n  userName: string,\n  eventTitle: string,\n  eventDate: string,\n  hoursUntilEvent: number\n): Promise<boolean> {\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); padding: 20px; text-align: center;\">\n        <h1 style=\"color: white; margin: 0;\">Event Reminder</h1>\n      </div>\n      <div style=\"padding: 20px; background-color: #1a1a1a; color: #f5f5f5;\">\n        <h2>Hello ${userName}!</h2>\n        <p>This is a friendly reminder that <strong>${eventTitle}</strong> starts in <strong>${hoursUntilEvent} hours</strong>.</p>\n        <p><strong>Event Date:</strong> ${eventDate}</p>\n        <p>Make sure you have everything ready for the event. See you there!</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${process.env.FRONTEND_URL || 'https://nexus.dev'}\" \n             style=\"background: linear-gradient(135deg, #4f46e5, #ec4899); color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px; display: inline-block;\">\n            Join Event\n          </a>\n        </div>\n        <p>Best regards,<br>The Nexus Team</p>\n      </div>\n    </div>\n  `;\n\n  return await sendEmail({\n    to: userEmail,\n    from: process.env.FROM_EMAIL || 'noreply@nexus.dev',\n    subject: `Reminder: ${eventTitle} starts in ${hoursUntilEvent} hours`,\n    html: htmlContent,\n  });\n}\n","size_bytes":5666},"server/storage.ts":{"content":"import {\n  users,\n  events,\n  teams,\n  teamMembers,\n  eventRegistrations,\n  chatMessages,\n  aiRecommendations,\n  notifications,\n  eventAnalytics,\n  type User,\n  type UpsertUser,\n  type Event,\n  type InsertEvent,\n  type Team,\n  type InsertTeam,\n  type EventRegistration,\n  type ChatMessage,\n  type InsertChatMessage,\n  type AIRecommendation,\n  type Notification,\n  type InsertNotification,\n  type EventAnalytic,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql, ilike, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User>;\n  \n  // Event operations\n  createEvent(event: InsertEvent): Promise<Event>;\n  getEvent(id: string): Promise<Event | undefined>;\n  getEvents(filters?: { type?: string; status?: string; search?: string }): Promise<Event[]>;\n  updateEvent(id: string, updates: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n  getUserEvents(userId: string): Promise<Event[]>;\n  getEventsByOrganizer(organizerId: string): Promise<Event[]>;\n  \n  // Registration operations\n  registerForEvent(eventId: string, userId: string, teamId?: string): Promise<EventRegistration>;\n  getEventRegistrations(eventId: string): Promise<EventRegistration[]>;\n  getUserRegistrations(userId: string): Promise<EventRegistration[]>;\n  updateRegistrationPaymentStatus(id: string, status: string, paymentIntentId?: string): Promise<EventRegistration>;\n  \n  // Team operations\n  createTeam(team: InsertTeam): Promise<Team>;\n  getTeam(id: string): Promise<Team | undefined>;\n  getEventTeams(eventId: string): Promise<Team[]>;\n  joinTeam(teamId: string, userId: string): Promise<void>;\n  leaveTeam(teamId: string, userId: string): Promise<void>;\n  getTeamMembers(teamId: string): Promise<User[]>;\n  \n  // Chat operations\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getEventChatMessages(eventId: string, limit?: number): Promise<ChatMessage[]>;\n  getTeamChatMessages(teamId: string, limit?: number): Promise<ChatMessage[]>;\n  \n  // AI recommendations\n  createAIRecommendation(userId: string, type: string, entityId: string, score: number, reason: string): Promise<AIRecommendation>;\n  getUserRecommendations(userId: string, type?: string): Promise<AIRecommendation[]>;\n  \n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string, unreadOnly?: boolean): Promise<Notification[]>;\n  markNotificationRead(id: string): Promise<void>;\n  \n  // Analytics\n  recordEventMetric(eventId: string, metric: string, value: number): Promise<void>;\n  getEventAnalytics(eventId: string, metric?: string): Promise<EventAnalytic[]>;\n  \n  // Search and discovery\n  searchEvents(query: string): Promise<Event[]>;\n  getRecommendedEvents(userId: string): Promise<Event[]>;\n  findTeammates(userId: string, skills: string[]): Promise<User[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Event operations\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event;\n  }\n\n  async getEvents(filters?: { type?: string; status?: string; search?: string }): Promise<Event[]> {\n    const conditions = [];\n    \n    if (filters?.type) {\n      conditions.push(eq(events.type, filters.type as any));\n    }\n    \n    if (filters?.status) {\n      conditions.push(eq(events.status, filters.status as any));\n    }\n    \n    if (filters?.search) {\n      conditions.push(ilike(events.title, `%${filters.search}%`));\n    }\n    \n    let query = db.select().from(events);\n    \n    if (conditions.length > 0) {\n      query = query.where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    }\n    \n    return await query.orderBy(desc(events.startDate));\n  }\n\n  async updateEvent(id: string, updates: Partial<InsertEvent>): Promise<Event> {\n    const [event] = await db\n      .update(events)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  async getUserEvents(userId: string): Promise<Event[]> {\n    return await db\n      .select({\n        id: events.id,\n        title: events.title,\n        description: events.description,\n        type: events.type,\n        status: events.status,\n        organizerId: events.organizerId,\n        startDate: events.startDate,\n        endDate: events.endDate,\n        location: events.location,\n        isVirtual: events.isVirtual,\n        maxParticipants: events.maxParticipants,\n        registrationFee: events.registrationFee,\n        prizePool: events.prizePool,\n        requirements: events.requirements,\n        tags: events.tags,\n        imageUrl: events.imageUrl,\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n      })\n      .from(events)\n      .innerJoin(eventRegistrations, eq(events.id, eventRegistrations.eventId))\n      .where(eq(eventRegistrations.userId, userId))\n      .orderBy(desc(events.startDate));\n  }\n\n  async getEventsByOrganizer(organizerId: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.organizerId, organizerId))\n      .orderBy(desc(events.createdAt));\n  }\n\n  // Registration operations\n  async registerForEvent(eventId: string, userId: string, teamId?: string): Promise<EventRegistration> {\n    const [registration] = await db\n      .insert(eventRegistrations)\n      .values({ eventId, userId, teamId })\n      .returning();\n    return registration;\n  }\n\n  async getEventRegistrations(eventId: string): Promise<EventRegistration[]> {\n    return await db\n      .select()\n      .from(eventRegistrations)\n      .where(eq(eventRegistrations.eventId, eventId));\n  }\n\n  async getUserRegistrations(userId: string): Promise<EventRegistration[]> {\n    return await db\n      .select()\n      .from(eventRegistrations)\n      .where(eq(eventRegistrations.userId, userId))\n      .orderBy(desc(eventRegistrations.registeredAt));\n  }\n\n  async updateRegistrationPaymentStatus(id: string, status: string, paymentIntentId?: string): Promise<EventRegistration> {\n    const [registration] = await db\n      .update(eventRegistrations)\n      .set({ paymentStatus: status, paymentIntentId })\n      .where(eq(eventRegistrations.id, id))\n      .returning();\n    return registration;\n  }\n\n  // Team operations\n  async createTeam(team: InsertTeam): Promise<Team> {\n    const [newTeam] = await db.insert(teams).values(team).returning();\n    \n    // Add the leader as a team member\n    if (team.leaderId) {\n      await db.insert(teamMembers).values({\n        teamId: newTeam.id,\n        userId: team.leaderId,\n        role: 'leader',\n      });\n    }\n    \n    return newTeam;\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team;\n  }\n\n  async getEventTeams(eventId: string): Promise<Team[]> {\n    return await db\n      .select()\n      .from(teams)\n      .where(eq(teams.eventId, eventId))\n      .orderBy(asc(teams.name));\n  }\n\n  async joinTeam(teamId: string, userId: string): Promise<void> {\n    await db.insert(teamMembers).values({\n      teamId,\n      userId,\n      role: 'member',\n    });\n  }\n\n  async leaveTeam(teamId: string, userId: string): Promise<void> {\n    await db\n      .delete(teamMembers)\n      .where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.userId, userId)));\n  }\n\n  async getTeamMembers(teamId: string): Promise<User[]> {\n    return await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        stripeCustomerId: users.stripeCustomerId,\n        stripeSubscriptionId: users.stripeSubscriptionId,\n        skills: users.skills,\n        interests: users.interests,\n        bio: users.bio,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(users)\n      .innerJoin(teamMembers, eq(users.id, teamMembers.userId))\n      .where(eq(teamMembers.teamId, teamId));\n  }\n\n  // Chat operations\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async getEventChatMessages(eventId: string, limit = 50): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.eventId, eventId))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  async getTeamChatMessages(teamId: string, limit = 50): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.teamId, teamId))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  // AI recommendations\n  async createAIRecommendation(userId: string, type: string, entityId: string, score: number, reason: string): Promise<AIRecommendation> {\n    const [recommendation] = await db\n      .insert(aiRecommendations)\n      .values({ userId, type, entityId, score: score.toString(), reason })\n      .returning();\n    return recommendation;\n  }\n\n  async getUserRecommendations(userId: string, type?: string): Promise<AIRecommendation[]> {\n    const conditions = [eq(aiRecommendations.userId, userId)];\n    \n    if (type) {\n      conditions.push(eq(aiRecommendations.type, type));\n    }\n    \n    const query = db\n      .select()\n      .from(aiRecommendations)\n      .where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    \n    return await query.orderBy(desc(aiRecommendations.score));\n  }\n\n  // Notifications\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string, unreadOnly = false): Promise<Notification[]> {\n    const conditions = [eq(notifications.userId, userId)];\n    \n    if (unreadOnly) {\n      conditions.push(eq(notifications.read, false));\n    }\n    \n    const query = db\n      .select()\n      .from(notifications)\n      .where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    \n    return await query.orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ read: true })\n      .where(eq(notifications.id, id));\n  }\n\n  // Analytics\n  async recordEventMetric(eventId: string, metric: string, value: number): Promise<void> {\n    await db.insert(eventAnalytics).values({\n      eventId,\n      metric,\n      value: value.toString(),\n    });\n  }\n\n  async getEventAnalytics(eventId: string, metric?: string): Promise<EventAnalytic[]> {\n    const conditions = [eq(eventAnalytics.eventId, eventId)];\n    \n    if (metric) {\n      conditions.push(eq(eventAnalytics.metric, metric));\n    }\n    \n    const query = db\n      .select()\n      .from(eventAnalytics)\n      .where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    \n    return await query.orderBy(desc(eventAnalytics.date));\n  }\n\n  // Search and discovery\n  async searchEvents(query: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(ilike(events.title, `%${query}%`))\n      .orderBy(desc(events.startDate))\n      .limit(20);\n  }\n\n  async getRecommendedEvents(userId: string): Promise<Event[]> {\n    const recommendations = await db\n      .select()\n      .from(aiRecommendations)\n      .where(and(\n        eq(aiRecommendations.userId, userId),\n        eq(aiRecommendations.type, 'event')\n      ))\n      .orderBy(desc(aiRecommendations.score))\n      .limit(10);\n    \n    if (recommendations.length === 0) {\n      return [];\n    }\n    \n    const eventIds = recommendations.map(r => r.entityId).filter(Boolean) as string[];\n    \n    return await db\n      .select()\n      .from(events)\n      .where(inArray(events.id, eventIds))\n      .orderBy(desc(events.startDate));\n  }\n\n  async findTeammates(userId: string, skills: string[]): Promise<User[]> {\n    if (skills.length === 0) {\n      return [];\n    }\n    \n    return await db\n      .select()\n      .from(users)\n      .where(sql`${users.skills} && ${skills}`)\n      .limit(20);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13752},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  skills: text(\"skills\").array(),\n  interests: text(\"interests\").array(),\n  bio: text(\"bio\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event types enum\nexport const eventTypeEnum = pgEnum('event_type', ['hackathon', 'workshop', 'quiz', 'conference', 'networking']);\nexport const eventStatusEnum = pgEnum('event_status', ['draft', 'published', 'live', 'completed', 'cancelled']);\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  type: eventTypeEnum(\"type\").notNull(),\n  status: eventStatusEnum(\"status\").default('draft'),\n  organizerId: varchar(\"organizer_id\").references(() => users.id),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  location: text(\"location\"),\n  isVirtual: boolean(\"is_virtual\").default(false),\n  maxParticipants: integer(\"max_participants\"),\n  registrationFee: decimal(\"registration_fee\", { precision: 10, scale: 2 }).default('0'),\n  prizePool: decimal(\"prize_pool\", { precision: 10, scale: 2 }).default('0'),\n  requirements: text(\"requirements\").array(),\n  tags: text(\"tags\").array(),\n  imageUrl: varchar(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event registrations\nexport const eventRegistrations = pgTable(\"event_registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  teamId: varchar(\"team_id\").references(() => teams.id),\n  registeredAt: timestamp(\"registered_at\").defaultNow(),\n  paymentStatus: varchar(\"payment_status\").default('pending'), // pending, completed, failed\n  paymentIntentId: varchar(\"payment_intent_id\"),\n});\n\n// Teams table\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  leaderId: varchar(\"leader_id\").references(() => users.id),\n  maxMembers: integer(\"max_members\").default(4),\n  skills: text(\"skills\").array(),\n  isOpen: boolean(\"is_open\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Team members\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").references(() => teams.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  role: varchar(\"role\").default('member'), // leader, member\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Chat messages\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  teamId: varchar(\"team_id\").references(() => teams.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  messageType: varchar(\"message_type\").default('text'), // text, file, image\n  fileUrl: varchar(\"file_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI recommendations\nexport const aiRecommendations = pgTable(\"ai_recommendations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\").notNull(), // event, team, skill\n  entityId: varchar(\"entity_id\"), // ID of recommended event/team/etc\n  score: decimal(\"score\", { precision: 3, scale: 2 }), // 0.00 to 1.00\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(), // event_reminder, team_invite, payment_success, etc\n  read: boolean(\"read\").default(false),\n  data: jsonb(\"data\"), // Additional data for the notification\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Analytics data\nexport const eventAnalytics = pgTable(\"event_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id),\n  metric: varchar(\"metric\").notNull(), // views, registrations, engagement, etc\n  value: decimal(\"value\", { precision: 12, scale: 2 }).notNull(),\n  date: timestamp(\"date\").defaultNow(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  organizedEvents: many(events),\n  registrations: many(eventRegistrations),\n  teams: many(teams),\n  teamMemberships: many(teamMembers),\n  chatMessages: many(chatMessages),\n  recommendations: many(aiRecommendations),\n  notifications: many(notifications),\n}));\n\nexport const eventsRelations = relations(events, ({ one, many }) => ({\n  organizer: one(users, {\n    fields: [events.organizerId],\n    references: [users.id],\n  }),\n  registrations: many(eventRegistrations),\n  teams: many(teams),\n  chatMessages: many(chatMessages),\n  analytics: many(eventAnalytics),\n}));\n\nexport const teamsRelations = relations(teams, ({ one, many }) => ({\n  event: one(events, {\n    fields: [teams.eventId],\n    references: [events.id],\n  }),\n  leader: one(users, {\n    fields: [teams.leaderId],\n    references: [users.id],\n  }),\n  members: many(teamMembers),\n  chatMessages: many(chatMessages),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const eventRegistrationsRelations = relations(eventRegistrations, ({ one }) => ({\n  event: one(events, {\n    fields: [eventRegistrations.eventId],\n    references: [events.id],\n  }),\n  user: one(users, {\n    fields: [eventRegistrations.userId],\n    references: [users.id],\n  }),\n  team: one(teams, {\n    fields: [eventRegistrations.teamId],\n    references: [teams.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Team = typeof teams.$inferSelect;\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type EventRegistration = typeof eventRegistrations.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type AIRecommendation = typeof aiRecommendations.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type EventAnalytic = typeof eventAnalytics.$inferSelect;\n","size_bytes":8710},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Events from \"@/pages/Events\";\nimport Community from \"@/pages/Community\";\nimport Analytics from \"@/pages/Analytics\";\nimport VirtualSpace from \"@/pages/VirtualSpace\";\nimport Payments from \"@/pages/Payments\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Header />\n      <main className=\"min-h-screen\">\n        <Switch>\n          {!isAuthenticated ? (\n            <>\n              <Route path=\"/\" component={Landing} />\n              <Route component={Landing} />\n            </>\n          ) : (\n            <>\n              <Route path=\"/\" component={Home} />\n              <Route path=\"/events\" component={Events} />\n              <Route path=\"/community\" component={Community} />\n              <Route path=\"/analytics\" component={Analytics} />\n              <Route path=\"/virtual-space\" component={VirtualSpace} />\n              <Route path=\"/payments\" component={Payments} />\n              <Route component={NotFound} />\n            </>\n          )}\n        </Switch>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2093},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 10%, 15%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 10%, 15%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(330, 81%, 60%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(240, 10%, 20%);\n  --input: hsl(240, 10%, 15%);\n  --ring: hsl(262, 83%, 58%);\n  --chart-1: hsl(262, 83%, 58%);\n  --chart-2: hsl(330, 81%, 60%);\n  --chart-3: hsl(197, 91%, 67%);\n  --chart-4: hsl(142, 76%, 36%);\n  --chart-5: hsl(45, 93%, 47%);\n  --radius: 12px;\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 10%, 8%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 10%, 15%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 10%, 15%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(330, 81%, 60%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(240, 10%, 20%);\n  --input: hsl(240, 10%, 15%);\n  --ring: hsl(262, 83%, 58%);\n  --chart-1: hsl(262, 83%, 58%);\n  --chart-2: hsl(330, 81%, 60%);\n  --chart-3: hsl(197, 91%, 67%);\n  --chart-4: hsl(142, 76%, 36%);\n  --chart-5: hsl(45, 93%, 47%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer components {\n  .gradient-text {\n    background: linear-gradient(135deg, var(--primary), var(--accent));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .glass-card {\n    background: rgba(26, 26, 26, 0.6);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .feature-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .feature-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);\n  }\n\n  .notification-dot {\n    position: absolute;\n    top: -2px;\n    right: -2px;\n    width: 8px;\n    height: 8px;\n    background: var(--accent);\n    border-radius: 50%;\n    border: 2px solid var(--background);\n  }\n\n  .live-indicator {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .floating-action {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    z-index: 50;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: var(--muted);\n    border-radius: 3px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background: var(--primary);\n    border-radius: 3px;\n  }\n\n  .analytics-card {\n    background: linear-gradient(135deg, rgba(26, 26, 26, 0.8), rgba(15, 15, 15, 0.9));\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .virtual-space {\n    background: radial-gradient(circle at center, rgba(79, 70, 229, 0.2) 0%, rgba(15, 15, 15, 0.9) 70%);\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: .5; }\n}\n","size_bytes":3904},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY environment variable must be set\");\n}\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface TeamMatchingRequest {\n  userId: string;\n  skills: string[];\n  interests: string[];\n  eventType: string;\n  teamSize?: number;\n}\n\nexport interface TeamMatchingResult {\n  recommendedUsers: {\n    userId: string;\n    matchScore: number;\n    reasoning: string;\n    complementarySkills: string[];\n  }[];\n  suggestedTeamComposition: {\n    roles: string[];\n    skillGaps: string[];\n    recommendedSize: number;\n  };\n}\n\nexport interface EventRecommendationRequest {\n  userId: string;\n  skills: string[];\n  interests: string[];\n  pastEvents: string[];\n  careerGoals?: string;\n}\n\nexport interface EventRecommendationResult {\n  recommendedEvents: {\n    eventId: string;\n    matchScore: number;\n    reasoning: string;\n    learningOutcomes: string[];\n    careerBenefits: string[];\n  }[];\n  skillDevelopmentSuggestions: {\n    skill: string;\n    currentLevel: string;\n    targetLevel: string;\n    recommendedPath: string[];\n  }[];\n}\n\nexport async function generateTeamMatches(\n  request: TeamMatchingRequest,\n  availableUsers: Array<{ id: string; skills: string[]; interests: string[]; bio?: string }>\n): Promise<TeamMatchingResult> {\n  try {\n    const prompt = `\nYou are an AI team formation expert. Analyze the following user profile and available team members to suggest optimal team matches.\n\nTarget User:\n- Skills: ${request.skills.join(', ')}\n- Interests: ${request.interests.join(', ')}\n- Event Type: ${request.eventType}\n- Preferred Team Size: ${request.teamSize || 4}\n\nAvailable Users:\n${availableUsers.map(user => `\n- ID: ${user.id}\n- Skills: ${user.skills.join(', ')}\n- Interests: ${user.interests.join(', ')}\n- Bio: ${user.bio || 'No bio provided'}\n`).join('\\n')}\n\nProvide team matching recommendations with match scores (0-100) and detailed reasoning. \nAlso suggest optimal team composition and identify any skill gaps.\n\nRespond with JSON in this exact format:\n{\n  \"recommendedUsers\": [\n    {\n      \"userId\": \"user_id\",\n      \"matchScore\": 85,\n      \"reasoning\": \"Strong complementary skills in backend development\",\n      \"complementarySkills\": [\"Python\", \"DevOps\"]\n    }\n  ],\n  \"suggestedTeamComposition\": {\n    \"roles\": [\"Frontend Lead\", \"Backend Developer\", \"UI/UX Designer\", \"Data Scientist\"],\n    \"skillGaps\": [\"Machine Learning\", \"Cloud Infrastructure\"],\n    \"recommendedSize\": 4\n  }\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result as TeamMatchingResult;\n  } catch (error) {\n    console.error(\"Error generating team matches:\", error);\n    throw new Error(\"Failed to generate team matches\");\n  }\n}\n\nexport async function generateEventRecommendations(\n  request: EventRecommendationRequest,\n  availableEvents: Array<{ id: string; title: string; type: string; description: string; tags: string[] }>\n): Promise<EventRecommendationResult> {\n  try {\n    const prompt = `\nYou are an AI career development and event recommendation expert. Analyze the user profile and suggest the most relevant events.\n\nUser Profile:\n- Skills: ${request.skills.join(', ')}\n- Interests: ${request.interests.join(', ')}\n- Past Events: ${request.pastEvents.join(', ')}\n- Career Goals: ${request.careerGoals || 'Not specified'}\n\nAvailable Events:\n${availableEvents.map(event => `\n- ID: ${event.id}\n- Title: ${event.title}\n- Type: ${event.type}\n- Description: ${event.description}\n- Tags: ${event.tags.join(', ')}\n`).join('\\n')}\n\nProvide personalized event recommendations with match scores (0-100) and explain how each event aligns with their goals.\nAlso suggest skill development paths based on their current skills and career aspirations.\n\nRespond with JSON in this exact format:\n{\n  \"recommendedEvents\": [\n    {\n      \"eventId\": \"event_id\",\n      \"matchScore\": 92,\n      \"reasoning\": \"Perfect alignment with your React skills and career goals\",\n      \"learningOutcomes\": [\"Advanced React patterns\", \"Performance optimization\"],\n      \"careerBenefits\": [\"Senior developer role preparation\", \"Industry networking\"]\n    }\n  ],\n  \"skillDevelopmentSuggestions\": [\n    {\n      \"skill\": \"Machine Learning\",\n      \"currentLevel\": \"Beginner\",\n      \"targetLevel\": \"Intermediate\",\n      \"recommendedPath\": [\"Complete Python ML course\", \"Build 2-3 ML projects\", \"Attend ML workshops\"]\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result as EventRecommendationResult;\n  } catch (error) {\n    console.error(\"Error generating event recommendations:\", error);\n    throw new Error(\"Failed to generate event recommendations\");\n  }\n}\n\nexport async function generateEventContent(eventType: string, topic: string, duration: string): Promise<{\n  title: string;\n  description: string;\n  agenda: Array<{ time: string; activity: string; description: string }>;\n  requirements: string[];\n  learningObjectives: string[];\n}> {\n  try {\n    const prompt = `\nGenerate comprehensive content for a ${eventType} on ${topic} lasting ${duration}.\n\nCreate a detailed event plan including:\n1. Compelling title\n2. Engaging description\n3. Structured agenda with time slots\n4. Prerequisites and requirements\n5. Clear learning objectives\n\nThe content should be professional, engaging, and appropriate for the target audience.\n\nRespond with JSON in this exact format:\n{\n  \"title\": \"Event title\",\n  \"description\": \"Detailed description\",\n  \"agenda\": [\n    {\n      \"time\": \"9:00-9:30 AM\",\n      \"activity\": \"Welcome & Introductions\",\n      \"description\": \"Getting to know participants and setting expectations\"\n    }\n  ],\n  \"requirements\": [\"Basic programming knowledge\", \"Laptop with development environment\"],\n  \"learningObjectives\": [\"Understand core concepts\", \"Build practical projects\"]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result;\n  } catch (error) {\n    console.error(\"Error generating event content:\", error);\n    throw new Error(\"Failed to generate event content\");\n  }\n}\n\nexport async function analyzeEventFeedback(feedback: Array<{ rating: number; comment: string }>): Promise<{\n  overallSentiment: string;\n  keyThemes: string[];\n  improvementSuggestions: string[];\n  strengthsIdentified: string[];\n  averageRating: number;\n}> {\n  try {\n    const prompt = `\nAnalyze the following event feedback to provide insights and recommendations:\n\nFeedback Data:\n${feedback.map((f, i) => `\nReview ${i + 1}:\n- Rating: ${f.rating}/5\n- Comment: \"${f.comment}\"\n`).join('\\n')}\n\nProvide a comprehensive analysis including:\n1. Overall sentiment analysis\n2. Key themes and patterns\n3. Specific improvement suggestions\n4. Identified strengths\n5. Statistical summary\n\nRespond with JSON in this exact format:\n{\n  \"overallSentiment\": \"positive/neutral/negative\",\n  \"keyThemes\": [\"Theme 1\", \"Theme 2\"],\n  \"improvementSuggestions\": [\"Suggestion 1\", \"Suggestion 2\"],\n  \"strengthsIdentified\": [\"Strength 1\", \"Strength 2\"],\n  \"averageRating\": 4.2\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result;\n  } catch (error) {\n    console.error(\"Error analyzing feedback:\", error);\n    throw new Error(\"Failed to analyze event feedback\");\n  }\n}\n","size_bytes":8188},"server/services/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(\n  apiKey: string,\n  params: EmailParams\n): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n","size_bytes":741},"client/src/components/AIRecommendations.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, RefreshCw, Code, Users, Trophy } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AIRecommendation {\n  id: string;\n  type: string;\n  entityId: string;\n  score: string;\n  reason: string;\n  createdAt: string;\n}\n\nexport default function AIRecommendations() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: recommendations, isLoading } = useQuery<AIRecommendation[]>({\n    queryKey: [\"/api/ai/recommendations\"],\n  });\n\n  const generateRecommendations = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/ai/generate-recommendations\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/recommendations\"] });\n      toast({\n        title: \"Success\",\n        description: \"AI recommendations generated successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRecommendationIcon = (type: string) => {\n    switch (type) {\n      case 'event':\n        return <Code className=\"h-4 w-4\" />;\n      case 'team':\n        return <Users className=\"h-4 w-4\" />;\n      default:\n        return <Trophy className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRecommendationColor = (type: string) => {\n    switch (type) {\n      case 'event':\n        return 'bg-primary/20 text-primary';\n      case 'team':\n        return 'bg-accent/20 text-accent';\n      default:\n        return 'bg-chart-4/20 text-chart-4';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-accent animate-pulse\" />\n            AI Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"p-4 rounded-lg bg-muted animate-pulse\">\n                <div className=\"h-4 bg-muted-foreground/20 rounded w-3/4 mb-2\" />\n                <div className=\"h-3 bg-muted-foreground/20 rounded w-1/2\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Brain className=\"h-5 w-5 text-accent\" />\n          AI Insights\n        </CardTitle>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => generateRecommendations.mutate()}\n          disabled={generateRecommendations.isPending}\n        >\n          <RefreshCw className={`h-4 w-4 ${generateRecommendations.isPending ? 'animate-spin' : ''}`} />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {recommendations?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Brain className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\">No AI recommendations yet</p>\n              <Button\n                onClick={() => generateRecommendations.mutate()}\n                disabled={generateRecommendations.isPending}\n                className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n              >\n                {generateRecommendations.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\n                ) : (\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                )}\n                Generate Recommendations\n              </Button>\n            </div>\n          ) : (\n            <>\n              {recommendations?.slice(0, 3).map((recommendation) => (\n                <div\n                  key={recommendation.id}\n                  className=\"p-4 rounded-lg border border-border hover:border-primary/50 transition-colors\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge variant=\"secondary\" className={getRecommendationColor(recommendation.type)}>\n                      {getRecommendationIcon(recommendation.type)}\n                      <span className=\"ml-1 capitalize\">{recommendation.type}</span>\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {Math.round(parseFloat(recommendation.score) * 100)}% match\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm font-medium mb-1\">{recommendation.reason}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {new Date(recommendation.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n              \n              {recommendations && recommendations.length > 3 && (\n                <Button variant=\"outline\" className=\"w-full\">\n                  View All Recommendations\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5486},"client/src/components/Chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Send, \n  Paperclip, \n  Smile, \n  MoreVertical,\n  Phone,\n  Video,\n  Users,\n  Settings,\n  Search,\n  X,\n  Download,\n  Image,\n  FileText\n} from \"lucide-react\";\n\ninterface ChatMessage {\n  id: string;\n  userId: string;\n  message: string;\n  messageType: 'text' | 'file' | 'image';\n  fileUrl?: string;\n  createdAt: string;\n  user?: {\n    id: string;\n    firstName?: string;\n    lastName?: string;\n    profileImageUrl?: string;\n  };\n}\n\ninterface ChatProps {\n  roomId: string;\n  eventId?: string;\n  teamId?: string;\n}\n\nexport default function Chat({ roomId, eventId, teamId }: ChatProps) {\n  const [message, setMessage] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearch, setShowSearch] = useState(false);\n  const [websocket, setWebsocket] = useState<WebSocket | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch existing messages\n  const { data: messages, isLoading } = useQuery<ChatMessage[]>({\n    queryKey: eventId \n      ? [\"/api/events\", eventId, \"chat\"]\n      : [\"/api/teams\", teamId, \"chat\"],\n    enabled: !!(eventId || teamId),\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; messageType?: string; fileUrl?: string }) => {\n      const endpoint = eventId \n        ? `/api/events/${eventId}/chat`\n        : `/api/teams/${teamId}/chat`;\n      \n      await apiRequest(\"POST\", endpoint, messageData);\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: eventId \n          ? [\"/api/events\", eventId, \"chat\"]\n          : [\"/api/teams\", teamId, \"chat\"]\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // File upload mutation\n  const uploadFileMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await apiRequest(\"POST\", \"/api/upload\", formData);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      sendMessageMutation.mutate({\n        message: `Shared file: ${data.filename}`,\n        messageType: data.mimetype.startsWith('image/') ? 'image' : 'file',\n        fileUrl: data.url,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // WebSocket connection\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setWebsocket(ws);\n      \n      // Join the room\n      ws.send(JSON.stringify({\n        type: 'join_event',\n        eventId: eventId || `team_${teamId}`,\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'chat_message') {\n          // Invalidate queries to fetch new messages\n          queryClient.invalidateQueries({ \n            queryKey: eventId \n              ? [\"/api/events\", eventId, \"chat\"]\n              : [\"/api/teams\", teamId, \"chat\"]\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setWebsocket(null);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [eventId, teamId, queryClient]);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    \n    sendMessageMutation.mutate({\n      message: message.trim(),\n      messageType: 'text',\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      uploadFileMutation.mutate(file);\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getFileIcon = (messageType: string) => {\n    switch (messageType) {\n      case 'image':\n        return <Image className=\"h-4 w-4\" />;\n      case 'file':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const filteredMessages = messages?.filter(msg => \n    !searchQuery || \n    msg.message.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    msg.user?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    msg.user?.lastName?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <Card className=\"h-96\">\n        <CardContent className=\"h-full flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-96 flex flex-col\">\n      <CardHeader className=\"flex-shrink-0 pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            {eventId ? 'Event Chat' : 'Team Chat'}\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              <div className=\"w-2 h-2 bg-chart-4 rounded-full mr-1 animate-pulse\" />\n              Live\n            </Badge>\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setShowSearch(!showSearch)}\n              data-testid=\"button-search-chat\"\n            >\n              <Search className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Phone className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Video className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreVertical className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        {showSearch && (\n          <div className=\"flex items-center gap-2 mt-2\">\n            <Input\n              placeholder=\"Search messages...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1\"\n              data-testid=\"input-search-messages\"\n            />\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => {\n                setShowSearch(false);\n                setSearchQuery(\"\");\n              }}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"flex-1 overflow-hidden p-0\">\n        {/* Messages Area */}\n        <div className=\"h-full overflow-y-auto p-4 space-y-4 scrollbar-thin\">\n          {filteredMessages.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              {searchQuery ? (\n                <div>\n                  <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No messages found matching \"{searchQuery}\"</p>\n                </div>\n              ) : (\n                <div>\n                  <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Start a conversation</p>\n                  <p className=\"text-sm\">Send the first message to get things going!</p>\n                </div>\n              )}\n            </div>\n          ) : (\n            filteredMessages.map((msg) => (\n              <div\n                key={msg.id}\n                className={`flex items-start gap-3 ${\n                  msg.userId === user?.id ? 'flex-row-reverse' : ''\n                }`}\n              >\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarImage src={msg.user?.profileImageUrl} />\n                  <AvatarFallback className=\"text-xs\">\n                    {msg.user?.firstName?.[0]}{msg.user?.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className={`flex-1 max-w-xs ${msg.userId === user?.id ? 'text-right' : ''}`}>\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"text-xs font-medium\">\n                      {msg.userId === user?.id \n                        ? 'You' \n                        : `${msg.user?.firstName || ''} ${msg.user?.lastName || ''}`.trim() || 'Anonymous'\n                      }\n                    </span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatTime(msg.createdAt)}\n                    </span>\n                  </div>\n                  \n                  <div className={`rounded-lg p-3 ${\n                    msg.userId === user?.id \n                      ? 'bg-primary text-primary-foreground ml-8' \n                      : 'bg-muted mr-8'\n                  }`}>\n                    {msg.messageType === 'text' ? (\n                      <p className=\"text-sm break-words\">{msg.message}</p>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        {getFileIcon(msg.messageType)}\n                        <span className=\"text-sm\">{msg.message}</span>\n                        {msg.fileUrl && (\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                            <Download className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Message Input */}\n        <div className=\"border-t border-border p-4\">\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileUpload}\n              className=\"hidden\"\n              accept=\"image/*,.pdf,.doc,.docx,.txt\"\n            />\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={uploadFileMutation.isPending}\n              data-testid=\"button-attach-file\"\n            >\n              {uploadFileMutation.isPending ? (\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\" />\n              ) : (\n                <Paperclip className=\"h-4 w-4\" />\n              )}\n            </Button>\n\n            <Input\n              placeholder=\"Type your message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={handleKeyPress}\n              className=\"flex-1\"\n              disabled={sendMessageMutation.isPending}\n              data-testid=\"input-chat-message\"\n            />\n\n            <Button variant=\"ghost\" size=\"sm\">\n              <Smile className=\"h-4 w-4\" />\n            </Button>\n\n            <Button\n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-send-message\"\n            >\n              {sendMessageMutation.isPending ? (\n                <div className=\"animate-spin w-4 h-4 border-2 border-current border-t-transparent rounded-full\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          \n          {websocket?.readyState === WebSocket.OPEN && (\n            <div className=\"flex items-center gap-1 mt-2 text-xs text-chart-4\">\n              <div className=\"w-2 h-2 bg-chart-4 rounded-full animate-pulse\" />\n              Connected\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13725},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useAuth } from '@/hooks/useAuth';\nimport { WebSocketMessage } from '@/types';\nimport { Send, Paperclip, Smile, MoreHorizontal, Wifi, WifiOff } from 'lucide-react';\n\ninterface ChatInterfaceProps {\n  title: string;\n  channelType: string;\n  channelId: string;\n  messages: WebSocketMessage[];\n  onSendMessage: (\n    content: string,\n    channelType: string,\n    recipientId?: string,\n    teamId?: string,\n    eventId?: string,\n    messageType?: string\n  ) => void;\n  isConnected: boolean;\n  className?: string;\n}\n\nexport function ChatInterface({\n  title,\n  channelType,\n  channelId,\n  messages,\n  onSendMessage,\n  isConnected,\n  className = '',\n}: ChatInterfaceProps) {\n  const { user } = useAuth();\n  const [newMessage, setNewMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim() || !isConnected) return;\n\n    onSendMessage(\n      newMessage.trim(),\n      channelType,\n      channelType === 'direct' ? channelId : undefined,\n      channelType === 'team' ? channelId : undefined,\n      channelType === 'event' ? channelId : undefined,\n      'text'\n    );\n\n    setNewMessage('');\n    setIsTyping(false);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewMessage(e.target.value);\n    if (!isTyping) {\n      setIsTyping(true);\n      // Send typing indicator\n      // TODO: Implement typing indicator via WebSocket\n    }\n  };\n\n  const formatMessageTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // Mock messages for demonstration\n  const sampleMessages = [\n    {\n      id: '1',\n      senderId: 'user1',\n      senderName: 'Alex Chen',\n      senderAvatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face',\n      content: 'Hey everyone! Excited to start working on this hackathon project 🚀',\n      timestamp: new Date(Date.now() - 1800000).toISOString(),\n      type: 'text',\n    },\n    {\n      id: '2',\n      senderId: 'user2',\n      senderName: 'Sarah Kim',\n      senderAvatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',\n      content: 'Same here! I have some ideas for the UI design. Should we set up a quick call?',\n      timestamp: new Date(Date.now() - 1500000).toISOString(),\n      type: 'text',\n    },\n    {\n      id: '3',\n      senderId: 'user3',\n      senderName: 'Mike Rodriguez',\n      senderAvatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face',\n      content: 'Perfect timing! I just pushed the initial backend setup to the repo.',\n      timestamp: new Date(Date.now() - 900000).toISOString(),\n      type: 'text',\n    },\n    {\n      id: '4',\n      senderId: user?.id || 'current-user',\n      senderName: `${user?.firstName} ${user?.lastName}`,\n      senderAvatar: user?.profileImageUrl,\n      content: 'Awesome work everyone! Let me know if you need help with the frontend integration.',\n      timestamp: new Date(Date.now() - 300000).toISOString(),\n      type: 'text',\n    },\n  ];\n\n  const displayMessages = messages.length > 0 ? messages : sampleMessages;\n\n  return (\n    <Card className={`glass-card flex flex-col h-96 ${className}`} data-testid=\"chat-interface\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              💬 {title}\n              <div className=\"flex items-center gap-1 text-sm font-normal\">\n                {isConnected ? (\n                  <>\n                    <Wifi className=\"w-3 h-3 text-chart-4\" />\n                    <span className=\"text-chart-4\">Connected</span>\n                  </>\n                ) : (\n                  <>\n                    <WifiOff className=\"w-3 h-3 text-destructive\" />\n                    <span className=\"text-destructive\">Disconnected</span>\n                  </>\n                )}\n              </div>\n            </CardTitle>\n            <CardDescription>Real-time messaging • {displayMessages.length} messages</CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {channelType}\n            </Badge>\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" data-testid=\"button-chat-options\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <Separator />\n\n      {/* Messages Area */}\n      <CardContent className=\"flex-1 p-4 overflow-y-auto scrollbar-thin space-y-4\">\n        {displayMessages.map((message, index) => {\n          const isCurrentUser = message.senderId === user?.id;\n          const showAvatar = index === 0 || displayMessages[index - 1]?.senderId !== message.senderId;\n\n          return (\n            <div\n              key={message.id || index}\n              className={`flex gap-3 ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}\n              data-testid={`message-${index}`}\n            >\n              {showAvatar && !isCurrentUser && (\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarImage src={message.senderAvatar} alt={message.senderName} />\n                  <AvatarFallback className=\"text-xs\">\n                    {message.senderName?.split(' ').map(n => n[0]).join('') || '?'}\n                  </AvatarFallback>\n                </Avatar>\n              )}\n              \n              {!showAvatar && !isCurrentUser && <div className=\"w-8\" />}\n\n              <div className={`flex-1 max-w-[80%] ${isCurrentUser ? 'flex flex-col items-end' : ''}`}>\n                {showAvatar && (\n                  <div className={`flex items-center gap-2 mb-1 ${isCurrentUser ? 'flex-row-reverse' : ''}`}>\n                    <span className=\"text-sm font-medium\">{message.senderName}</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatMessageTime(message.timestamp)}\n                    </span>\n                  </div>\n                )}\n                \n                <div\n                  className={`rounded-lg p-3 max-w-full break-words ${\n                    isCurrentUser\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-secondary text-secondary-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        \n        {/* Typing Indicator */}\n        {isTyping && (\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\" style={{ animationDelay: '0.1s' }}></div>\n              <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n            </div>\n            <span className=\"text-sm text-muted-foreground\">Someone is typing...</span>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </CardContent>\n\n      <Separator />\n\n      {/* Message Input */}\n      <div className=\"p-4\">\n        <form onSubmit={handleSendMessage} className=\"flex items-center gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"flex-shrink-0\"\n            data-testid=\"button-attach-file\"\n          >\n            <Paperclip className=\"h-4 w-4\" />\n          </Button>\n          \n          <div className=\"flex-1 relative\">\n            <Input\n              ref={inputRef}\n              value={newMessage}\n              onChange={handleInputChange}\n              placeholder={\n                isConnected \n                  ? \"Type your message...\" \n                  : \"Connecting to chat...\"\n              }\n              className=\"pr-12\"\n              disabled={!isConnected}\n              data-testid=\"input-chat-message\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8\"\n              data-testid=\"button-emoji\"\n            >\n              <Smile className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <Button\n            type=\"submit\"\n            disabled={!newMessage.trim() || !isConnected}\n            className=\"flex-shrink-0\"\n            data-testid=\"button-send-message\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </form>\n        \n        <div className=\"flex justify-between items-center mt-2 text-xs text-muted-foreground\">\n          <span>\n            Press Enter to send • Shift+Enter for new line\n          </span>\n          <span className=\"flex items-center gap-1\">\n            {isConnected ? (\n              <>\n                <div className=\"w-2 h-2 bg-chart-4 rounded-full\"></div>\n                Online\n              </>\n            ) : (\n              <>\n                <div className=\"w-2 h-2 bg-destructive rounded-full\"></div>\n                Reconnecting...\n              </>\n            )}\n          </span>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":10320},"client/src/components/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AIRecommendations from \"@/components/AIRecommendations\";\nimport EventBuilder from \"@/components/EventBuilder\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Calendar, \n  Users, \n  DollarSign, \n  Star, \n  Plus, \n  Brain,\n  TrendingUp,\n  Clock,\n  MessageSquare,\n  BarChart3\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  organizedEvents: number;\n  registeredEvents: number;\n  unreadNotifications: number;\n  totalParticipants: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: !!user,\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n  });\n\n  const { data: userEvents } = useQuery({\n    queryKey: [\"/api/events\", \"user\"],\n    enabled: !!user,\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-16 bg-muted rounded\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-6 py-8\">\n      {/* Welcome Header */}\n      <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6\">\n        <div>\n          <h1 className=\"text-4xl font-bold mb-2\">\n            Welcome back, <span className=\"gradient-text\">{user?.firstName || 'there'}!</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Here's what's happening with your events and community\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Event\n          </Button>\n          <Button variant=\"outline\">\n            <Brain className=\"h-4 w-4 mr-2\" />\n            AI Assistant\n          </Button>\n        </div>\n      </div>\n\n      {/* AI Insights Banner */}\n      <Card className=\"mb-8 bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                <Brain className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">AI Insights Ready</h3>\n                <p className=\"text-muted-foreground\">\n                  Based on your activity, we found 3 perfect events and 5 potential team members\n                </p>\n              </div>\n            </div>\n            <Button variant=\"ghost\">\n              <TrendingUp className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dashboard Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5 mb-8\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"builder\" className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Event Builder\n          </TabsTrigger>\n          <TabsTrigger value=\"team\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Team Management\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"payments\" className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-4 w-4\" />\n            Payments\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-8\">\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Calendar className=\"h-8 w-8 text-primary\" />\n                  <Badge variant=\"secondary\" className=\"text-chart-4\">+12.5%</Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">{stats?.organizedEvents || 0}</div>\n                <p className=\"text-sm text-muted-foreground\">Active Events</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Users className=\"h-8 w-8 text-accent\" />\n                  <Badge variant=\"secondary\" className=\"text-chart-4\">+8.2%</Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">{stats?.totalParticipants || 0}</div>\n                <p className=\"text-sm text-muted-foreground\">Total Participants</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <DollarSign className=\"h-8 w-8 text-chart-3\" />\n                  <Badge variant=\"secondary\" className=\"text-chart-4\">+15.8%</Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">$12.5K</div>\n                <p className=\"text-sm text-muted-foreground\">Revenue</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Star className=\"h-8 w-8 text-chart-4\" />\n                  <Badge variant=\"secondary\" className=\"text-chart-4\">+0.3</Badge>\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">4.8</div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Rating</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity & AI Insights */}\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Recent Activity */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5 text-primary\" />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-4 p-4 rounded-lg bg-secondary/50\">\n                      <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                        <Users className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">New participant registered for \"AI Hackathon 2024\"</p>\n                        <p className=\"text-sm text-muted-foreground\">2 minutes ago</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4 p-4 rounded-lg bg-secondary/50\">\n                      <div className=\"w-10 h-10 rounded-full bg-accent/20 flex items-center justify-center\">\n                        <MessageSquare className=\"h-5 w-5 text-accent\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">Team \"Code Wizards\" submitted their project</p>\n                        <p className=\"text-sm text-muted-foreground\">15 minutes ago</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 p-4 rounded-lg bg-secondary/50\">\n                      <div className=\"w-10 h-10 rounded-full bg-chart-3/20 flex items-center justify-center\">\n                        <BarChart3 className=\"h-5 w-5 text-chart-3\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">Analytics report generated for \"Web Dev Workshop\"</p>\n                        <p className=\"text-sm text-muted-foreground\">1 hour ago</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* AI Insights */}\n            <AIRecommendations />\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"builder\">\n          <EventBuilder />\n        </TabsContent>\n\n        <TabsContent value=\"team\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Team Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Team management features coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Analytics Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Advanced analytics features coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Payment management features coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":10701},"client/src/components/EventBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertEventSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { \n  Wand2, \n  Palette, \n  Eye, \n  Save, \n  Code, \n  Users, \n  Trophy, \n  Calendar,\n  MapPin,\n  DollarSign,\n  Tag,\n  Upload,\n  Settings,\n  Trash2,\n  Copy,\n  Layout,\n  Type,\n  Image,\n  Video\n} from \"lucide-react\";\n\nconst eventBuilderSchema = insertEventSchema.extend({\n  tags: z.array(z.string()).optional(),\n  requirements: z.array(z.string()).optional(),\n});\n\ntype EventBuilderForm = z.infer<typeof eventBuilderSchema>;\n\ninterface BuilderComponent {\n  id: string;\n  type: 'header' | 'text' | 'image' | 'video' | 'form' | 'schedule' | 'speakers';\n  title: string;\n  content?: any;\n  order: number;\n}\n\nexport default function EventBuilder() {\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [components, setComponents] = useState<BuilderComponent[]>([]);\n  const [previewMode, setPreviewMode] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EventBuilderForm>({\n    resolver: zodResolver(eventBuilderSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"hackathon\",\n      startDate: new Date(),\n      endDate: new Date(),\n      location: \"\",\n      isVirtual: false,\n      maxParticipants: 100,\n      registrationFee: \"0\",\n      prizePool: \"0\",\n      tags: [],\n      requirements: [],\n    },\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: EventBuilderForm) => {\n      await apiRequest(\"POST\", \"/api/events\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      form.reset();\n      setComponents([]);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateAIContentMutation = useMutation({\n    mutationFn: async (eventType: string) => {\n      // This would call the AI content generation API\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return {\n        title: `AI-Generated ${eventType} Event`,\n        description: `An exciting ${eventType} event designed to bring together innovators and creators.`,\n        schedule: [\n          { time: \"09:00\", activity: \"Registration & Welcome\", duration: \"1 hour\" },\n          { time: \"10:00\", activity: \"Opening Keynote\", duration: \"1 hour\" },\n          { time: \"11:00\", activity: \"Main Activity\", duration: \"6 hours\" },\n          { time: \"17:00\", activity: \"Closing Ceremony\", duration: \"1 hour\" },\n        ],\n        requirements: [\"Laptop\", \"Enthusiasm\", \"Team spirit\"],\n        tags: [eventType, \"Innovation\", \"Technology\"],\n      };\n    },\n    onSuccess: (data) => {\n      form.setValue(\"title\", data.title);\n      form.setValue(\"description\", data.description);\n      form.setValue(\"requirements\", data.requirements);\n      form.setValue(\"tags\", data.tags);\n      toast({\n        title: \"AI Content Generated\",\n        description: \"Event content has been generated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate AI content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const eventTemplates = [\n    {\n      id: \"hackathon\",\n      name: \"Hackathon Template\",\n      icon: <Code className=\"h-6 w-6\" />,\n      description: \"Perfect for coding competitions and innovation challenges\",\n      color: \"bg-primary/20 text-primary border-primary/30\"\n    },\n    {\n      id: \"workshop\",\n      name: \"Workshop Template\",\n      icon: <Users className=\"h-6 w-6\" />,\n      description: \"Interactive learning sessions and skill development\",\n      color: \"bg-accent/20 text-accent border-accent/30\"\n    },\n    {\n      id: \"conference\",\n      name: \"Conference Template\",\n      icon: <Calendar className=\"h-6 w-6\" />,\n      description: \"Professional conferences and networking events\",\n      color: \"bg-chart-3/20 text-chart-3 border-chart-3/30\"\n    },\n    {\n      id: \"competition\",\n      name: \"Competition Template\",\n      icon: <Trophy className=\"h-6 w-6\" />,\n      description: \"Competitive events with prizes and recognition\",\n      color: \"bg-chart-5/20 text-chart-5 border-chart-5/30\"\n    }\n  ];\n\n  const availableComponents = [\n    { type: 'header', title: 'Header Section', icon: <Layout className=\"h-5 w-5\" /> },\n    { type: 'text', title: 'Text Block', icon: <Type className=\"h-5 w-5\" /> },\n    { type: 'image', title: 'Image Gallery', icon: <Image className=\"h-5 w-5\" /> },\n    { type: 'video', title: 'Video Player', icon: <Video className=\"h-5 w-5\" /> },\n    { type: 'form', title: 'Registration Form', icon: <Users className=\"h-5 w-5\" /> },\n    { type: 'schedule', title: 'Event Schedule', icon: <Calendar className=\"h-5 w-5\" /> },\n    { type: 'speakers', title: 'Speaker List', icon: <Users className=\"h-5 w-5\" /> },\n  ];\n\n  const addComponent = (type: string) => {\n    const newComponent: BuilderComponent = {\n      id: Date.now().toString(),\n      type: type as any,\n      title: `New ${type}`,\n      order: components.length,\n    };\n    setComponents([...components, newComponent]);\n  };\n\n  const removeComponent = (id: string) => {\n    setComponents(components.filter(comp => comp.id !== id));\n  };\n\n  const moveComponent = (id: string, direction: 'up' | 'down') => {\n    const index = components.findIndex(comp => comp.id === id);\n    if (\n      (direction === 'up' && index > 0) ||\n      (direction === 'down' && index < components.length - 1)\n    ) {\n      const newComponents = [...components];\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n      [newComponents[index], newComponents[targetIndex]] = [newComponents[targetIndex], newComponents[index]];\n      setComponents(newComponents);\n    }\n  };\n\n  const onSubmit = (data: EventBuilderForm) => {\n    createEventMutation.mutate(data);\n  };\n\n  if (previewMode) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Event Preview</h2>\n          <Button onClick={() => setPreviewMode(false)} variant=\"outline\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Edit Mode\n          </Button>\n        </div>\n        \n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-8\">\n              <div className=\"text-center\">\n                <h1 className=\"text-4xl font-bold mb-4\">{form.watch(\"title\") || \"Event Title\"}</h1>\n                <p className=\"text-xl text-muted-foreground\">{form.watch(\"description\") || \"Event description\"}</p>\n              </div>\n              \n              {components.map((component) => (\n                <div key={component.id} className=\"border border-border rounded-lg p-6\">\n                  <h3 className=\"font-semibold mb-2\">{component.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {component.type} component preview would render here\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">AI-Powered Event Builder</h2>\n        <div className=\"flex items-center gap-2\">\n          <Button onClick={() => setPreviewMode(true)} variant=\"outline\">\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Preview\n          </Button>\n          <Button\n            onClick={() => generateAIContentMutation.mutate(form.watch(\"type\"))}\n            disabled={generateAIContentMutation.isPending}\n            className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n          >\n            {generateAIContentMutation.isPending ? (\n              <div className=\"animate-spin w-4 h-4 mr-2 border-2 border-current border-t-transparent rounded-full\" />\n            ) : (\n              <Wand2 className=\"h-4 w-4 mr-2\" />\n            )}\n            AI Generate\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"templates\">Templates</TabsTrigger>\n          <TabsTrigger value=\"details\">Event Details</TabsTrigger>\n          <TabsTrigger value=\"builder\">Page Builder</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"templates\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Choose a Template</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {eventTemplates.map((template) => (\n                  <Card\n                    key={template.id}\n                    className={`cursor-pointer transition-all hover:scale-105 ${\n                      selectedTemplate === template.id\n                        ? 'ring-2 ring-primary bg-primary/5'\n                        : 'hover:bg-muted/50'\n                    }`}\n                    onClick={() => {\n                      setSelectedTemplate(template.id);\n                      form.setValue(\"type\", template.id as any);\n                    }}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4 mb-4\">\n                        <div className={`w-12 h-12 rounded-lg ${template.color} flex items-center justify-center`}>\n                          {template.icon}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{template.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                        </div>\n                      </div>\n                      {selectedTemplate === template.id && (\n                        <Badge className=\"bg-primary text-primary-foreground\">Selected</Badge>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"details\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Event Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Title</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter event title...\" {...field} data-testid=\"input-event-title\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-event-type\">\n                                <SelectValue placeholder=\"Select event type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"hackathon\">Hackathon</SelectItem>\n                              <SelectItem value=\"workshop\">Workshop</SelectItem>\n                              <SelectItem value=\"quiz\">Quiz</SelectItem>\n                              <SelectItem value=\"conference\">Conference</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your event...\" \n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"textarea-event-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"startDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Date</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"datetime-local\" \n                              {...field}\n                              value={field.value ? new Date(field.value).toISOString().slice(0, 16) : ''}\n                              onChange={(e) => field.onChange(new Date(e.target.value))}\n                              data-testid=\"input-start-date\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"endDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Date</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"datetime-local\" \n                              {...field}\n                              value={field.value ? new Date(field.value).toISOString().slice(0, 16) : ''}\n                              onChange={(e) => field.onChange(new Date(e.target.value))}\n                              data-testid=\"input-end-date\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Event location...\" {...field} data-testid=\"input-location\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"isVirtual\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel>Virtual Event</FormLabel>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"switch-virtual-event\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"maxParticipants\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Max Participants</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"100\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              data-testid=\"input-max-participants\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"registrationFee\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Registration Fee ($)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0.00\" \n                              step=\"0.01\"\n                              {...field}\n                              data-testid=\"input-registration-fee\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"prizePool\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prize Pool ($)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0.00\" \n                              step=\"0.01\"\n                              {...field}\n                              data-testid=\"input-prize-pool\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end gap-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n                      Reset\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createEventMutation.isPending}\n                      className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                      data-testid=\"button-create-event\"\n                    >\n                      {createEventMutation.isPending ? (\n                        <div className=\"animate-spin w-4 h-4 mr-2 border-2 border-current border-t-transparent rounded-full\" />\n                      ) : (\n                        <Save className=\"h-4 w-4 mr-2\" />\n                      )}\n                      Create Event\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"builder\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-4 gap-6\">\n            {/* Component Library */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Components</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {availableComponents.map((component) => (\n                    <Button\n                      key={component.type}\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => addComponent(component.type)}\n                      data-testid={`button-add-${component.type}`}\n                    >\n                      {component.icon}\n                      <span className=\"ml-2\">{component.title}</span>\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Builder Canvas */}\n            <Card className=\"lg:col-span-3\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Page Builder</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"min-h-96 border-2 border-dashed border-border rounded-xl p-6\">\n                  {components.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground\">\n                      <Layout className=\"h-16 w-16 mx-auto mb-4\" />\n                      <p>Drag components here to build your event page</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {components.map((component, index) => (\n                        <div\n                          key={component.id}\n                          className=\"p-4 bg-card rounded-lg border border-border group hover:border-primary/50 transition-colors\"\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h5 className=\"font-semibold\">{component.title}</h5>\n                            <div className=\"flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                              <Button size=\"sm\" variant=\"ghost\" onClick={() => moveComponent(component.id, 'up')} disabled={index === 0}>\n                                ↑\n                              </Button>\n                              <Button size=\"sm\" variant=\"ghost\" onClick={() => moveComponent(component.id, 'down')} disabled={index === components.length - 1}>\n                                ↓\n                              </Button>\n                              <Button size=\"sm\" variant=\"ghost\">\n                                <Copy className=\"h-4 w-4\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"ghost\" onClick={() => removeComponent(component.id)}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <div className=\"h-16 bg-muted/30 rounded flex items-center justify-center\">\n                            <span className=\"text-sm text-muted-foreground\">\n                              {component.type.charAt(0).toUpperCase() + component.type.slice(1)} Component\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"theme\">Event Theme</Label>\n                  <Select defaultValue=\"default\">\n                    <SelectTrigger className=\"mt-2\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"default\">Default</SelectItem>\n                      <SelectItem value=\"tech\">Tech Blue</SelectItem>\n                      <SelectItem value=\"creative\">Creative Purple</SelectItem>\n                      <SelectItem value=\"business\">Business Green</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"seo-title\">SEO Title</Label>\n                  <Input \n                    id=\"seo-title\" \n                    placeholder=\"Event title for search engines...\" \n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"seo-description\">SEO Description</Label>\n                  <Textarea \n                    id=\"seo-description\" \n                    placeholder=\"Event description for search engines...\" \n                    className=\"mt-2\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":26666},"client/src/components/EventCard.tsx":{"content":"import { Event } from '@/types';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, MapPin, Users, Trophy, Clock, Bookmark, Share2 } from 'lucide-react';\nimport { Link } from 'wouter';\n\ninterface EventCardProps {\n  event: Event;\n  onRegister?: () => void;\n  isRegistering?: boolean;\n}\n\nexport function EventCard({ event, onRegister, isRegistering }: EventCardProps) {\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'hackathon': return 'bg-chart-4';\n      case 'workshop': return 'bg-chart-5';\n      case 'conference': return 'bg-chart-3';\n      case 'quiz': return 'bg-destructive';\n      default: return 'bg-primary';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'status-live';\n      case 'upcoming': return 'status-upcoming';\n      case 'completed': return 'status-past';\n      default: return 'bg-secondary';\n    }\n  };\n\n  const formatEventDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getEventIcon = (type: string) => {\n    switch (type) {\n      case 'hackathon': return '💻';\n      case 'workshop': return '🛠️';\n      case 'conference': return '🎤';\n      case 'quiz': return '🏆';\n      default: return '📅';\n    }\n  };\n\n  return (\n    <Card \n      className={`glass-card rounded-2xl overflow-hidden feature-card border-l-4 event-${event.type}`}\n      data-testid={`event-card-${event.id}`}\n    >\n      {/* Event Image/Header */}\n      <div className=\"relative h-48 bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center\">\n        <div className=\"text-6xl mb-4\">{getEventIcon(event.type)}</div>\n        \n        {/* Status Badge */}\n        <div className=\"absolute top-4 left-4\">\n          <Badge className={`${getStatusColor(event.status)} text-white font-medium`}>\n            {event.status === 'live' && (\n              <div className=\"w-2 h-2 bg-white rounded-full mr-2 live-indicator\"></div>\n            )}\n            {event.status.toUpperCase()}\n          </Badge>\n        </div>\n\n        {/* Event Type Badge */}\n        <div className=\"absolute top-4 right-4\">\n          <Badge variant=\"secondary\" className=\"capitalize\">\n            {event.type}\n          </Badge>\n        </div>\n\n        {/* Live Indicator for Live Events */}\n        {event.status === 'live' && (\n          <div className=\"absolute bottom-4 right-4 flex items-center gap-2 bg-red-500/90 text-white px-3 py-1 rounded-full text-sm\">\n            <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n            LIVE NOW\n          </div>\n        )}\n      </div>\n      \n      <CardContent className=\"p-6 space-y-4\">\n        {/* Title and Description */}\n        <div>\n          <h3 className=\"text-xl font-semibold mb-2 line-clamp-2\">{event.title}</h3>\n          {event.description && (\n            <p className=\"text-muted-foreground text-sm line-clamp-3\">{event.description}</p>\n          )}\n        </div>\n        \n        {/* Event Details */}\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>{formatEventDate(event.startDate)}</span>\n            {event.startDate !== event.endDate && (\n              <span>- {formatEventDate(event.endDate)}</span>\n            )}\n          </div>\n          \n          {event.location && (\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <MapPin className=\"w-4 h-4\" />\n              <span className=\"truncate\">{event.location}</span>\n              {event.isVirtual && (\n                <Badge variant=\"outline\" className=\"text-xs\">Virtual</Badge>\n              )}\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4 text-muted-foreground\">\n              {event.maxParticipants && (\n                <div className=\"flex items-center gap-1\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>{event.maxParticipants} max</span>\n                </div>\n              )}\n              \n              {event.prizePool && parseFloat(event.prizePool) > 0 && (\n                <div className=\"flex items-center gap-1\">\n                  <Trophy className=\"w-4 h-4 text-chart-5\" />\n                  <span className=\"text-chart-5 font-medium\">${event.prizePool}</span>\n                </div>\n              )}\n            </div>\n            \n            {event.registrationFee && parseFloat(event.registrationFee) > 0 ? (\n              <div className=\"text-right\">\n                <div className=\"text-lg font-bold text-primary\">${event.registrationFee}</div>\n                <div className=\"text-xs text-muted-foreground\">Registration</div>\n              </div>\n            ) : (\n              <Badge variant=\"outline\" className=\"text-chart-4 border-chart-4\">\n                FREE\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        {/* Tags */}\n        {event.tags && event.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2\">\n            {event.tags.slice(0, 3).map((tag) => (\n              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {event.tags.length > 3 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                +{event.tags.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex gap-2 pt-2\">\n          {event.status === 'live' ? (\n            <Button \n              className=\"flex-1 bg-gradient-to-r from-red-500 to-red-600 text-white hover:opacity-90\"\n              data-testid={`button-join-live-${event.id}`}\n            >\n              <div className=\"w-2 h-2 bg-white rounded-full mr-2 live-indicator\"></div>\n              Join Live\n            </Button>\n          ) : event.status === 'upcoming' ? (\n            <Button \n              onClick={onRegister}\n              disabled={isRegistering}\n              className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid={`button-register-${event.id}`}\n            >\n              {isRegistering ? (\n                <>\n                  <div className=\"spinner w-4 h-4 mr-2\"></div>\n                  Registering...\n                </>\n              ) : (\n                <>\n                  {event.registrationFee && parseFloat(event.registrationFee) > 0 ? (\n                    <Link href={`/payment/${event.id}`}>\n                      <span>Register - ${event.registrationFee}</span>\n                    </Link>\n                  ) : (\n                    'Register Free'\n                  )}\n                </>\n              )}\n            </Button>\n          ) : (\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              disabled\n              data-testid={`button-completed-${event.id}`}\n            >\n              Event Completed\n            </Button>\n          )}\n          \n          <Button \n            variant=\"outline\" \n            size=\"icon\"\n            data-testid={`button-bookmark-${event.id}`}\n          >\n            <Bookmark className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button \n            variant=\"outline\" \n            size=\"icon\"\n            data-testid={`button-share-${event.id}`}\n          >\n            <Share2 className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Additional Info for Special Events */}\n        {event.allowTeams && (\n          <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n            <Users className=\"w-3 h-3\" />\n            Team event (max {event.maxTeamSize} per team)\n          </div>\n        )}\n\n        {/* Requirements Preview */}\n        {event.requirements && event.requirements.length > 0 && (\n          <div className=\"text-xs text-muted-foreground\">\n            <span className=\"font-medium\">Requirements: </span>\n            <span>{event.requirements.slice(0, 2).join(', ')}</span>\n            {event.requirements.length > 2 && '...'}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8572},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  const footerLinks = {\n    platform: [\n      { name: \"Dashboard\", href: \"/\" },\n      { name: \"Event Builder\", href: \"/events\" },\n      { name: \"Analytics\", href: \"/analytics\" },\n      { name: \"Virtual Space\", href: \"/virtual-space\" },\n      { name: \"API Documentation\", href: \"#\" },\n    ],\n    support: [\n      { name: \"Help Center\", href: \"#\" },\n      { name: \"Community Forum\", href: \"/community\" },\n      { name: \"Contact Support\", href: \"#\" },\n      { name: \"System Status\", href: \"#\" },\n      { name: \"Feature Requests\", href: \"#\" },\n    ],\n  };\n\n  return (\n    <footer className=\"py-16 bg-secondary/30 border-t border-border\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-white\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z\" />\n                </svg>\n              </div>\n              <h4 className=\"text-2xl font-bold gradient-text\">Nexus</h4>\n            </div>\n            <p className=\"text-muted-foreground mb-6\">\n              Revolutionizing event management with AI-powered insights, immersive experiences, and seamless collaboration.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center text-muted-foreground hover:text-foreground hover:bg-primary transition-colors\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center text-muted-foreground hover:text-foreground hover:bg-primary transition-colors\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center text-muted-foreground hover:text-foreground hover:bg-primary transition-colors\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n\n          {/* Platform Links */}\n          <div>\n            <h5 className=\"text-lg font-semibold mb-6\">Platform</h5>\n            <ul className=\"space-y-3\">\n              {footerLinks.platform.map((link) => (\n                <li key={link.name}>\n                  <Link href={link.href}>\n                    <a className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                      {link.name}\n                    </a>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Support Links */}\n          <div>\n            <h5 className=\"text-lg font-semibold mb-6\">Support</h5>\n            <ul className=\"space-y-3\">\n              {footerLinks.support.map((link) => (\n                <li key={link.name}>\n                  <Link href={link.href}>\n                    <a className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                      {link.name}\n                    </a>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Newsletter */}\n          <div>\n            <h5 className=\"text-lg font-semibold mb-6\">Stay Updated</h5>\n            <p className=\"text-muted-foreground mb-4\">Get the latest updates on new features and events.</p>\n            <div className=\"flex space-x-2\">\n              <input \n                type=\"email\" \n                placeholder=\"Enter your email\" \n                className=\"flex-1 bg-input border border-border rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary\"\n              />\n              <button className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors\">\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"text-muted-foreground text-sm mb-4 md:mb-0\">\n            © 2024 Nexus. All rights reserved. Built with ❤️ for the developer community.\n          </div>\n          <div className=\"flex space-x-6 text-sm\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Privacy Policy</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Terms of Service</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Cookie Policy</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":7364},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, MessageSquare, Menu, X } from \"lucide-react\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\" },\n    { name: \"Events\", href: \"/events\" },\n    { name: \"Community\", href: \"/community\" },\n    { name: \"Analytics\", href: \"/analytics\" },\n    { name: \"Virtual Space\", href: \"/virtual-space\" },\n  ];\n\n  return (\n    <header className=\"fixed w-full top-0 left-0 z-50 glass-card\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <Link href={isAuthenticated ? \"/\" : \"/\"}>\n            <a className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-white\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z\" />\n                </svg>\n              </div>\n              <h1 className=\"text-2xl font-bold gradient-text\">Nexus</h1>\n            </a>\n          </Link>\n          \n          {isAuthenticated && (\n            <nav className=\"hidden lg:flex items-center space-x-8\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <a className={`text-sm font-medium transition-colors ${\n                    location === item.href \n                      ? \"text-primary\" \n                      : \"text-muted-foreground hover:text-foreground\"\n                  }`}>\n                    {item.name}\n                  </a>\n                </Link>\n              ))}\n            </nav>\n          )}\n\n          <div className=\"flex items-center space-x-4\">\n            {!isAuthenticated ? (\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  onClick={() => window.location.href = \"/api/login\"}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  data-testid=\"login-button\"\n                >\n                  Sign In\n                </Button>\n              </div>\n            ) : (\n              <>\n                {/* Notifications */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                      <Bell className=\"h-5 w-5\" />\n                      <span className=\"notification-dot\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-80\">\n                    <div className=\"p-4 border-b border-border\">\n                      <h3 className=\"font-semibold\">Notifications</h3>\n                    </div>\n                    <div className=\"p-2\">\n                      <DropdownMenuItem>\n                        <div className=\"flex items-start space-x-3\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                            <Bell className=\"h-4 w-4 text-primary-foreground\" />\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium\">AI Hackathon starting soon</p>\n                            <p className=\"text-xs text-muted-foreground\">Event begins in 30 minutes</p>\n                          </div>\n                        </div>\n                      </DropdownMenuItem>\n                    </div>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* Messages */}\n                <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  <span className=\"notification-dot\" />\n                </Button>\n\n                {/* User Profile */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user?.profileImageUrl || \"\"} />\n                        <AvatarFallback>\n                          {user?.firstName?.[0]}{user?.lastName?.[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"hidden md:block text-left\">\n                        <p className=\"text-sm font-medium\">\n                          {user?.firstName} {user?.lastName}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">Organizer</p>\n                      </div>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem>Profile</DropdownMenuItem>\n                    <DropdownMenuItem>Settings</DropdownMenuItem>\n                    <DropdownMenuItem>\n                      <a href=\"/api/logout\" className=\"w-full\">Sign Out</a>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* Mobile Menu Button */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"lg:hidden\"\n                  onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                >\n                  {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isAuthenticated && mobileMenuOpen && (\n          <div className=\"lg:hidden mt-4 pt-4 border-t border-border\">\n            <nav className=\"flex flex-col space-y-2\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <a \n                    className={`block px-3 py-2 text-sm font-medium transition-colors ${\n                      location === item.href \n                        ? \"text-primary bg-primary/10\" \n                        : \"text-muted-foreground hover:text-foreground hover:bg-muted\"\n                    }`}\n                    onClick={() => setMobileMenuOpen(false)}\n                  >\n                    {item.name}\n                  </a>\n                </Link>\n              ))}\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":7105},"client/src/components/PaymentForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { \n  CreditCard, \n  Lock, \n  Shield, \n  DollarSign,\n  Calendar,\n  User,\n  MapPin,\n  Check,\n  X,\n  AlertCircle\n} from \"lucide-react\";\n\nconst paymentSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  cardNumber: z.string().min(16, \"Card number must be 16 digits\").max(19, \"Invalid card number\"),\n  expiryMonth: z.string().min(2, \"Required\").max(2, \"Invalid month\"),\n  expiryYear: z.string().min(2, \"Required\").max(2, \"Invalid year\"),\n  cvc: z.string().min(3, \"CVC must be 3-4 digits\").max(4, \"Invalid CVC\"),\n  cardholderName: z.string().min(2, \"Cardholder name required\"),\n  billingAddress: z.string().min(5, \"Billing address required\"),\n  city: z.string().min(2, \"City required\"),\n  zipCode: z.string().min(5, \"ZIP code required\"),\n  saveCard: z.boolean().optional(),\n  amount: z.number().min(0.01, \"Amount must be greater than 0\"),\n  eventId: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\ninterface PaymentFormProps {\n  initialAmount?: number;\n  eventId?: string;\n  eventTitle?: string;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function PaymentForm({ \n  initialAmount = 99, \n  eventId,\n  eventTitle = \"Event Registration\",\n  onSuccess,\n  onCancel \n}: PaymentFormProps) {\n  const [step, setStep] = useState<'payment' | 'processing' | 'success' | 'error'>('payment');\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      email: \"\",\n      cardNumber: \"\",\n      expiryMonth: \"\",\n      expiryYear: \"\",\n      cvc: \"\",\n      cardholderName: \"\",\n      billingAddress: \"\",\n      city: \"\",\n      zipCode: \"\",\n      saveCard: false,\n      amount: initialAmount,\n      eventId: eventId,\n    },\n  });\n\n  // Create payment intent\n  const createPaymentIntentMutation = useMutation({\n    mutationFn: async (amount: number) => {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", { \n        amount,\n        eventId \n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Payment Setup Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setStep('error');\n    },\n  });\n\n  // Process payment\n  const processPaymentMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      setStep('processing');\n      \n      // First create payment intent if not already created\n      if (!clientSecret) {\n        const intentResponse = await apiRequest(\"POST\", \"/api/create-payment-intent\", { \n          amount: data.amount,\n          eventId: data.eventId \n        });\n        const { clientSecret: newClientSecret } = await intentResponse.json();\n        setClientSecret(newClientSecret);\n      }\n\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // In a real implementation, this would use Stripe's confirmPayment\n      return { success: true };\n    },\n    onSuccess: () => {\n      setStep('success');\n      if (onSuccess) {\n        setTimeout(onSuccess, 2000);\n      }\n    },\n    onError: (error: Error) => {\n      setStep('error');\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentFormData) => {\n    processPaymentMutation.mutate(data);\n  };\n\n  const formatCardNumber = (value: string) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    const matches = v.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return v;\n    }\n  };\n\n  const getCardType = (number: string) => {\n    const cleanNumber = number.replace(/\\s/g, '');\n    if (cleanNumber.startsWith('4')) return 'visa';\n    if (cleanNumber.startsWith('5') || cleanNumber.startsWith('2')) return 'mastercard';\n    if (cleanNumber.startsWith('3')) return 'amex';\n    return 'unknown';\n  };\n\n  const cardType = getCardType(form.watch('cardNumber') || '');\n\n  if (step === 'processing') {\n    return (\n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">Processing Payment</h3>\n          <p className=\"text-muted-foreground\">Please wait while we process your payment securely...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (step === 'success') {\n    return (\n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-chart-4/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Check className=\"w-8 h-8 text-chart-4\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2 text-chart-4\">Payment Successful!</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Thank you for your payment. You will receive a confirmation email shortly.\n          </p>\n          <div className=\"text-sm text-muted-foreground\">\n            <p>Amount: ${initialAmount}</p>\n            <p>Event: {eventTitle}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (step === 'error') {\n    return (\n      <Card className=\"max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <X className=\"w-8 h-8 text-red-500\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2 text-red-500\">Payment Failed</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            There was an error processing your payment. Please try again.\n          </p>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => setStep('payment')} className=\"flex-1\">\n              Try Again\n            </Button>\n            {onCancel && (\n              <Button variant=\"ghost\" onClick={onCancel} className=\"flex-1\">\n                Cancel\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Payment Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"john@example.com\" \n                          {...field}\n                          data-testid=\"input-payment-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"cardNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Card Number</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            placeholder=\"1234 5678 9012 3456\"\n                            {...field}\n                            onChange={(e) => field.onChange(formatCardNumber(e.target.value))}\n                            maxLength={19}\n                            data-testid=\"input-card-number\"\n                          />\n                          <div className=\"absolute right-3 top-3 flex space-x-1\">\n                            {cardType === 'visa' && (\n                              <Badge variant=\"outline\" className=\"text-blue-600\">VISA</Badge>\n                            )}\n                            {cardType === 'mastercard' && (\n                              <Badge variant=\"outline\" className=\"text-red-600\">MC</Badge>\n                            )}\n                            {cardType === 'amex' && (\n                              <Badge variant=\"outline\" className=\"text-green-600\">AMEX</Badge>\n                            )}\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"expiryMonth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Month</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-expiry-month\">\n                              <SelectValue placeholder=\"MM\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.from({ length: 12 }, (_, i) => (\n                              <SelectItem key={i + 1} value={String(i + 1).padStart(2, '0')}>\n                                {String(i + 1).padStart(2, '0')}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"expiryYear\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Year</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-expiry-year\">\n                              <SelectValue placeholder=\"YY\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.from({ length: 10 }, (_, i) => {\n                              const year = (new Date().getFullYear() + i).toString().slice(-2);\n                              return (\n                                <SelectItem key={year} value={year}>\n                                  {year}\n                                </SelectItem>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"cvc\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>CVC</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"123\" \n                            maxLength={4}\n                            {...field}\n                            data-testid=\"input-cvc\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"cardholderName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cardholder Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"John Doe\" \n                          {...field}\n                          data-testid=\"input-cardholder-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"billingAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Billing Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"123 Main Street\" \n                          {...field}\n                          data-testid=\"input-billing-address\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>City</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"New York\" \n                            {...field}\n                            data-testid=\"input-city\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"zipCode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ZIP Code</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"10001\" \n                            {...field}\n                            data-testid=\"input-zip-code\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"saveCard\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"checkbox-save-card\"\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm font-normal\">\n                          Save card for future payments\n                        </FormLabel>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-4\">\n                  {onCancel && (\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={onCancel}\n                      className=\"flex-1\"\n                      data-testid=\"button-cancel-payment\"\n                    >\n                      Cancel\n                    </Button>\n                  )}\n                  <Button \n                    type=\"submit\" \n                    disabled={processPaymentMutation.isPending}\n                    className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n                    data-testid=\"button-submit-payment\"\n                  >\n                    <Lock className=\"h-4 w-4 mr-2\" />\n                    Pay ${initialAmount}\n                  </Button>\n                </div>\n\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Shield className=\"h-4 w-4\" />\n                    Secured by 256-bit SSL encryption\n                  </div>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Order Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Order Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"font-medium\">{eventTitle}</span>\n                <span className=\"text-2xl font-bold text-primary\">${initialAmount}</span>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Includes: Workshop access, materials, and certificate\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal</span>\n                <span>${initialAmount}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Processing Fee</span>\n                <span>$0.00</span>\n              </div>\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total</span>\n                  <span>${initialAmount}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4 pt-4 border-t\">\n              <h4 className=\"font-medium\">What's Included:</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <Check className=\"h-4 w-4 text-chart-4 flex-shrink-0\" />\n                  Full event access\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Check className=\"h-4 w-4 text-chart-4 flex-shrink-0\" />\n                  Workshop materials\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Check className=\"h-4 w-4 text-chart-4 flex-shrink-0\" />\n                  Certificate of completion\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Check className=\"h-4 w-4 text-chart-4 flex-shrink-0\" />\n                  Networking opportunities\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Check className=\"h-4 w-4 text-chart-4 flex-shrink-0\" />\n                  Lifetime access to recordings\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"p-4 bg-chart-4/10 border border-chart-4/20 rounded-lg\">\n              <div className=\"flex items-start gap-2\">\n                <AlertCircle className=\"h-4 w-4 text-chart-4 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-chart-4 mb-1\">Refund Policy</p>\n                  <p className=\"text-muted-foreground\">\n                    Full refund available up to 24 hours before the event starts.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21435},"client/src/components/ThreeBackground.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport default function ThreeBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current || !window.THREE) return;\n\n    const canvas = canvasRef.current;\n    const scene = new window.THREE.Scene();\n    const camera = new window.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new window.THREE.WebGLRenderer({ canvas, alpha: true });\n    \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n\n    // Create particles\n    const particlesGeometry = new window.THREE.BufferGeometry();\n    const particlesCount = 1000;\n    const posArray = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n      posArray[i] = (Math.random() - 0.5) * 100;\n    }\n\n    particlesGeometry.setAttribute('position', new window.THREE.BufferAttribute(posArray, 3));\n\n    const particlesMaterial = new window.THREE.PointsMaterial({\n      size: 0.005,\n      color: 0x4f46e5,\n      transparent: true,\n      opacity: 0.8\n    });\n\n    const particlesMesh = new window.THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    camera.position.z = 30;\n\n    function animate() {\n      requestAnimationFrame(animate);\n      particlesMesh.rotation.x += 0.001;\n      particlesMesh.rotation.y += 0.002;\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <canvas \n      ref={canvasRef}\n      className=\"absolute top-0 left-0 z-0 w-full h-full\"\n      style={{ zIndex: 0 }}\n    />\n  );\n}\n","size_bytes":2047},"client/src/components/VirtualEnvironment.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Users, Settings, Maximize, RotateCcw, Volume2, VolumeX } from 'lucide-react';\n\ninterface VirtualEnvironmentProps {\n  environmentId: string;\n  isVideoOn: boolean;\n  isAudioOn: boolean;\n  isScreenSharing: boolean;\n}\n\ninterface Participant {\n  id: string;\n  name: string;\n  avatar: string;\n  isVideoOn: boolean;\n  isAudioOn: boolean;\n  position: { x: number; y: number; z: number };\n}\n\nexport function VirtualEnvironment({\n  environmentId,\n  isVideoOn,\n  isAudioOn,\n  isScreenSharing\n}: VirtualEnvironmentProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [participants] = useState<Participant[]>([\n    {\n      id: '1',\n      name: 'Alex Chen',\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face',\n      isVideoOn: true,\n      isAudioOn: true,\n      position: { x: -2, y: 0, z: 0 },\n    },\n    {\n      id: '2',\n      name: 'Sarah Kim',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',\n      isVideoOn: true,\n      isAudioOn: false,\n      position: { x: 2, y: 0, z: 0 },\n    },\n    {\n      id: '3',\n      name: 'Mike Rodriguez',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face',\n      isVideoOn: false,\n      isAudioOn: true,\n      position: { x: 0, y: 0, z: -2 },\n    },\n  ]);\n\n  const environments = {\n    auditorium: {\n      name: 'Virtual Auditorium',\n      description: 'Large presentation space with stage',\n      backgroundColor: '#1a1a2e',\n      ambientColor: '#16213e',\n    },\n    classroom: {\n      name: 'Interactive Classroom',\n      description: 'Collaborative learning environment',\n      backgroundColor: '#0f3460',\n      ambientColor: '#16537e',\n    },\n    networking: {\n      name: 'Networking Lounge',\n      description: 'Casual space for conversations',\n      backgroundColor: '#533483',\n      ambientColor: '#7209b7',\n    },\n    exhibition: {\n      name: 'Exhibition Hall',\n      description: 'Virtual booths and demos',\n      backgroundColor: '#2d1b69',\n      ambientColor: '#402e7a',\n    },\n  };\n\n  const currentEnvironment = environments[environmentId as keyof typeof environments] || environments.auditorium;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !window.THREE) return;\n\n    const scene = new (window as any).THREE.Scene();\n    const camera = new (window as any).THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    const renderer = new (window as any).THREE.WebGLRenderer({ canvas, alpha: true });\n\n    renderer.setSize(canvas.clientWidth, canvas.clientHeight);\n    renderer.setClearColor(currentEnvironment.backgroundColor, 1);\n\n    // Set up lighting\n    const ambientLight = new (window as any).THREE.AmbientLight(currentEnvironment.ambientColor, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new (window as any).THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    // Create environment based on type\n    if (environmentId === 'auditorium') {\n      // Create stage\n      const stageGeometry = new (window as any).THREE.BoxGeometry(10, 0.5, 4);\n      const stageMaterial = new (window as any).THREE.MeshStandardMaterial({ color: 0x8b5cf6 });\n      const stage = new (window as any).THREE.Mesh(stageGeometry, stageMaterial);\n      stage.position.set(0, -2, -8);\n      scene.add(stage);\n\n      // Create seats\n      for (let row = 0; row < 5; row++) {\n        for (let seat = 0; seat < 10; seat++) {\n          const seatGeometry = new (window as any).THREE.BoxGeometry(0.8, 0.8, 0.8);\n          const seatMaterial = new (window as any).THREE.MeshStandardMaterial({ color: 0x4a5568 });\n          const seatMesh = new (window as any).THREE.Mesh(seatGeometry, seatMaterial);\n          seatMesh.position.set((seat - 5) * 1.2, -1.6, row * 2);\n          scene.add(seatMesh);\n        }\n      }\n    } else if (environmentId === 'classroom') {\n      // Create desks\n      for (let i = 0; i < 6; i++) {\n        const deskGeometry = new (window as any).THREE.BoxGeometry(2, 0.1, 1);\n        const deskMaterial = new (window as any).THREE.MeshStandardMaterial({ color: 0x8b7355 });\n        const desk = new (window as any).THREE.Mesh(deskGeometry, deskMaterial);\n        desk.position.set((i % 3 - 1) * 3, -1, Math.floor(i / 3) * 2 - 2);\n        scene.add(desk);\n      }\n\n      // Create whiteboard\n      const boardGeometry = new (window as any).THREE.PlaneGeometry(4, 2);\n      const boardMaterial = new (window as any).THREE.MeshStandardMaterial({ color: 0xffffff });\n      const board = new (window as any).THREE.Mesh(boardGeometry, boardMaterial);\n      board.position.set(0, 1, -5);\n      scene.add(board);\n    }\n\n    // Add participant avatars\n    participants.forEach((participant) => {\n      const avatarGeometry = new (window as any).THREE.SphereGeometry(0.5, 16, 16);\n      const avatarMaterial = new (window as any).THREE.MeshStandardMaterial({ color: 0x7c3aed });\n      const avatar = new (window as any).THREE.Mesh(avatarGeometry, avatarMaterial);\n      avatar.position.set(participant.position.x, participant.position.y, participant.position.z);\n      scene.add(avatar);\n\n      // Add name label\n      const canvas2d = document.createElement('canvas');\n      canvas2d.width = 256;\n      canvas2d.height = 64;\n      const context = canvas2d.getContext('2d')!;\n      context.fillStyle = '#ffffff';\n      context.font = '24px Arial';\n      context.textAlign = 'center';\n      context.fillText(participant.name, 128, 35);\n\n      const texture = new (window as any).THREE.CanvasTexture(canvas2d);\n      const labelMaterial = new (window as any).THREE.SpriteMaterial({ map: texture });\n      const label = new (window as any).THREE.Sprite(labelMaterial);\n      label.position.set(participant.position.x, participant.position.y + 1.5, participant.position.z);\n      label.scale.set(2, 0.5, 1);\n      scene.add(label);\n    });\n\n    // Position camera\n    camera.position.set(0, 2, 5);\n    camera.lookAt(0, 0, 0);\n\n    let mouseX = 0;\n    let mouseY = 0;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n\n    canvas.addEventListener('mousemove', handleMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      \n      // Camera movement based on mouse\n      camera.position.x += (mouseX * 2 - camera.position.x) * 0.02;\n      camera.position.y += (mouseY * 2 - camera.position.y) * 0.02;\n      camera.lookAt(0, 0, 0);\n      \n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(canvas.clientWidth, canvas.clientHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n    };\n  }, [environmentId, participants, currentEnvironment]);\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      canvasRef.current?.requestFullscreen();\n      setIsFullscreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullscreen(false);\n    }\n  };\n\n  const resetCamera = () => {\n    // Reset camera position logic would go here\n    console.log('Resetting camera position');\n  };\n\n  return (\n    <Card className=\"glass-card\" data-testid=\"virtual-environment\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <span className=\"text-2xl\">🌐</span>\n              {currentEnvironment.name}\n            </CardTitle>\n            <CardDescription>{currentEnvironment.description}</CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-chart-4 border-chart-4\">\n              <Users className=\"w-3 h-3 mr-1\" />\n              {participants.length + 1} participants\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {/* 3D Environment Canvas */}\n        <div className=\"relative mb-6\">\n          <canvas\n            ref={canvasRef}\n            className=\"w-full h-96 bg-gradient-to-b from-primary/20 to-secondary/20 rounded-xl\"\n            style={{ background: currentEnvironment.backgroundColor }}\n          />\n          \n          {/* Overlay Controls */}\n          <div className=\"absolute top-4 left-4 right-4 flex justify-between items-start\">\n            {/* Environment Info */}\n            <div className=\"glass-card p-3 rounded-lg\">\n              <div className=\"text-sm font-medium mb-1\">{currentEnvironment.name}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                Move mouse to look around • Click to interact\n              </div>\n            </div>\n\n            {/* Quality Indicator */}\n            <div className=\"glass-card p-3 rounded-lg\">\n              <div className=\"text-sm font-medium mb-1\">Connection Quality</div>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-1 h-4 bg-chart-4 rounded\"></div>\n                <div className=\"w-1 h-5 bg-chart-4 rounded\"></div>\n                <div className=\"w-1 h-6 bg-chart-4 rounded\"></div>\n                <div className=\"w-1 h-4 bg-chart-4 rounded\"></div>\n                <div className=\"w-1 h-3 bg-secondary rounded\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Controls */}\n          <div className=\"absolute bottom-4 left-4 right-4\">\n            <div className=\"glass-card p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  {/* Media Controls */}\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className={isAudioOn ? 'bg-chart-4 text-white' : 'bg-destructive text-white'}\n                    data-testid=\"button-toggle-audio\"\n                  >\n                    {isAudioOn ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n                  </Button>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className={isVideoOn ? 'bg-chart-4 text-white' : 'bg-destructive text-white'}\n                    data-testid=\"button-toggle-video\"\n                  >\n                    📹\n                  </Button>\n\n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-share-screen\">\n                    📺\n                  </Button>\n                </div>\n\n                <div className=\"text-sm text-muted-foreground\">\n                  Speaking: <span className=\"text-foreground font-medium\">No one</span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"icon\" onClick={resetCamera} data-testid=\"button-reset-camera\">\n                    <RotateCcw className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-settings\">\n                    <Settings className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button variant=\"outline\" size=\"icon\" onClick={toggleFullscreen} data-testid=\"button-fullscreen\">\n                    <Maximize className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button variant=\"destructive\" data-testid=\"button-leave-space\">\n                    Leave Space\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Participants List */}\n        <div>\n          <h4 className=\"font-semibold mb-4 flex items-center gap-2\">\n            <Users className=\"w-4 h-4\" />\n            Participants ({participants.length + 1})\n          </h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Current User */}\n            <div className=\"glass-card p-3 rounded-lg\" data-testid=\"participant-current-user\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-medium\">\n                    You\n                  </div>\n                  <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full flex items-center justify-center ${\n                    isAudioOn ? 'bg-chart-4' : 'bg-destructive'\n                  }`}>\n                    {isAudioOn ? <Volume2 className=\"w-2 h-2 text-white\" /> : <VolumeX className=\"w-2 h-2 text-white\" />}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-sm truncate\">You</div>\n                  <div className=\"text-xs text-muted-foreground\">Host</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Other Participants */}\n            {participants.map((participant) => (\n              <div key={participant.id} className=\"glass-card p-3 rounded-lg\" data-testid={`participant-${participant.id}`}>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <img \n                      src={participant.avatar} \n                      alt={participant.name}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                    <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full flex items-center justify-center ${\n                      participant.isAudioOn ? 'bg-chart-4' : 'bg-destructive'\n                    }`}>\n                      {participant.isAudioOn ? <Volume2 className=\"w-2 h-2 text-white\" /> : <VolumeX className=\"w-2 h-2 text-white\" />}\n                    </div>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm truncate\">{participant.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">Participant</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Environment Stats */}\n        <div className=\"grid grid-cols-3 gap-4 mt-6 text-center\">\n          <div>\n            <div className=\"text-2xl font-bold text-primary\">{participants.length + 1}</div>\n            <div className=\"text-sm text-muted-foreground\">Active Users</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-chart-4\">42ms</div>\n            <div className=\"text-sm text-muted-foreground\">Latency</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-accent\">1080p</div>\n            <div className=\"text-sm text-muted-foreground\">Video Quality</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15776},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id?: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  skills?: string[];\n  interests?: string[];\n  bio?: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n  });\n\n  // If we get a 401, stop trying to refetch\n  const isAuthenticated = !!user && !error;\n  \n  return {\n    user: (user as User) || {},\n    isLoading,\n    isAuthenticated,\n    error,\n  };\n}\n","size_bytes":669},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { WebSocketMessage } from '@/types';\n\nexport function useWebSocket(userId?: string) {\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<WebSocketMessage[]>([]);\n  const [typingUsers, setTypingUsers] = useState<Set<string>>(new Set());\n\n  const connect = useCallback(() => {\n    if (!userId) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws?userId=${userId}`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n    };\n\n    ws.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      // Attempt to reconnect after 3 seconds\n      setTimeout(() => {\n        if (userId) connect();\n      }, 3000);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        \n        switch (message.type) {\n          case 'chat_message':\n            setMessages(prev => [...prev, message]);\n            break;\n          case 'typing_indicator':\n            if (message.isTyping && message.userId) {\n              setTypingUsers(prev => new Set([...prev, message.userId!]));\n              // Remove typing indicator after 3 seconds\n              setTimeout(() => {\n                setTypingUsers(prev => {\n                  const newSet = new Set(prev);\n                  newSet.delete(message.userId!);\n                  return newSet;\n                });\n              }, 3000);\n            } else if (message.userId) {\n              setTypingUsers(prev => {\n                const newSet = new Set(prev);\n                newSet.delete(message.userId!);\n                return newSet;\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n  }, [userId]);\n\n  const disconnect = useCallback(() => {\n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n      setIsConnected(false);\n    }\n  }, []);\n\n  const sendMessage = useCallback((message: WebSocketMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  }, []);\n\n  const sendChatMessage = useCallback((\n    content: string,\n    channelType: string,\n    recipientId?: string,\n    teamId?: string,\n    eventId?: string,\n    messageType: string = 'text'\n  ) => {\n    sendMessage({\n      type: 'chat_message',\n      content,\n      senderId: userId,\n      recipientId,\n      teamId,\n      eventId,\n      channelType,\n      messageType,\n      timestamp: new Date().toISOString(),\n    });\n  }, [sendMessage, userId]);\n\n  const sendTypingIndicator = useCallback((\n    isTyping: boolean,\n    channelId: string\n  ) => {\n    sendMessage({\n      type: 'typing_indicator',\n      userId,\n      channelId,\n      isTyping,\n    });\n  }, [sendMessage, userId]);\n\n  const joinChannel = useCallback((channelId: string) => {\n    sendMessage({\n      type: 'join_channel',\n      channelId,\n    });\n  }, [sendMessage]);\n\n  useEffect(() => {\n    if (userId) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [userId, connect, disconnect]);\n\n  return {\n    isConnected,\n    messages,\n    typingUsers,\n    sendMessage,\n    sendChatMessage,\n    sendTypingIndicator,\n    joinChannel,\n    connect,\n    disconnect,\n  };\n}\n","size_bytes":3738},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  BarChart3, \n  TrendingUp, \n  Users, \n  DollarSign, \n  Calendar,\n  Globe,\n  Star,\n  Heart,\n  Leaf,\n  Brain,\n  Download,\n  Filter\n} from \"lucide-react\";\n\ninterface EventAnalytic {\n  id: string;\n  eventId: string;\n  metric: string;\n  value: string;\n  date: string;\n}\n\nexport default function Analytics() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"30d\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Mock data for demonstration\n  const mockAnalytics = {\n    totalAttendees: 47892,\n    engagementRate: 94.7,\n    revenue: 284000,\n    satisfaction: 4.8,\n  };\n\n  const mockEventPerformance = [\n    { name: \"AI Innovation Hackathon\", type: \"Hackathon\", participants: 1247, engagement: 96.5, revenue: 15670, rating: 4.9 },\n    { name: \"React Masterclass\", type: \"Workshop\", participants: 892, engagement: 91.3, revenue: 8920, rating: 4.7 },\n    { name: \"Tech Trivia Night\", type: \"Quiz\", participants: 2156, engagement: 88.7, revenue: 3240, rating: 4.6 },\n  ];\n\n  const mockGeographicData = [\n    { region: \"North America\", percentage: 45, color: \"bg-primary\" },\n    { region: \"Europe\", percentage: 32, color: \"bg-accent\" },\n    { region: \"Asia Pacific\", percentage: 18, color: \"bg-chart-4\" },\n    { region: \"Other\", percentage: 5, color: \"bg-chart-5\" },\n  ];\n\n  const mockRevenueBreakdown = [\n    { source: \"Event Registration\", amount: 186000, percentage: 65.5 },\n    { source: \"Sponsorships\", amount: 72000, percentage: 25.4 },\n    { source: \"Premium Features\", amount: 21000, percentage: 7.4 },\n    { source: \"Merchandise\", amount: 5000, percentage: 1.7 },\n  ];\n\n  const mockEngagementMetrics = [\n    { metric: \"Session Duration\", value: \"2h 34m\", change: \"+22min\", trend: \"up\" },\n    { metric: \"Chat Messages\", value: \"47.2K\", change: \"+18.5%\", trend: \"up\" },\n    { metric: \"File Shares\", value: \"3.8K\", change: \"+9.2%\", trend: \"up\" },\n    { metric: \"Network Connections\", value: \"12.4K\", change: \"+15.7%\", trend: \"up\" },\n  ];\n\n  const mockAIInsights = [\n    {\n      type: \"Optimization Tip\",\n      message: \"Events starting at 2 PM show 23% higher attendance rates\",\n      color: \"bg-primary/10 border-primary/30 text-primary\"\n    },\n    {\n      type: \"Trend Alert\",\n      message: \"AI/ML workshops are trending 45% above average\",\n      color: \"bg-accent/10 border-accent/30 text-accent\"\n    },\n    {\n      type: \"Engagement Boost\",\n      message: \"Adding interactive polls increases engagement by 67%\",\n      color: \"bg-chart-4/10 border-chart-4/30 text-chart-4\"\n    }\n  ];\n\n  const mockSustainabilityMetrics = {\n    co2Saved: \"12.4T\",\n    treesEquivalent: 2847,\n    travelMilesSaved: \"4.2M\",\n    sustainabilityRank: \"top 5%\"\n  };\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) {\n      return (num / 1000000).toFixed(1) + 'M';\n    }\n    if (num >= 1000) {\n      return (num / 1000).toFixed(1) + 'K';\n    }\n    return num.toString();\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            Powerful <span className=\"gradient-text\">Analytics</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Real-time insights, predictive analytics, and comprehensive reporting for data-driven decisions\n          </p>\n        </div>\n\n        {/* Analytics Dashboard */}\n        <Card className=\"mb-12\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl\">Event Performance Dashboard</CardTitle>\n              <div className=\"flex items-center gap-4\">\n                <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                    <SelectItem value=\"90d\">Last 90 days</SelectItem>\n                    <SelectItem value=\"1y\">Last year</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-primary mb-2\">\n                  {formatNumber(mockAnalytics.totalAttendees)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Total Attendees</div>\n                <div className=\"text-xs text-chart-4 flex items-center justify-center gap-1 mt-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +12.5% from last month\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">\n                  {mockAnalytics.engagementRate}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Engagement Rate</div>\n                <div className=\"text-xs text-chart-4 flex items-center justify-center gap-1 mt-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +3.2% improvement\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-chart-5 mb-2\">\n                  {formatCurrency(mockAnalytics.revenue)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Revenue Generated</div>\n                <div className=\"text-xs text-chart-4 flex items-center justify-center gap-1 mt-1\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  +18.9% growth\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-chart-4 mb-2\">\n                  {mockAnalytics.satisfaction}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Average Satisfaction</div>\n                <div className=\"text-xs text-chart-5 flex items-center justify-center gap-1 mt-1\">\n                  <Star className=\"h-3 w-3\" />\n                  Excellent rating\n                </div>\n              </div>\n            </div>\n\n            {/* Charts Placeholder */}\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"border border-border p-6 rounded-lg\">\n                <h4 className=\"text-lg font-semibold mb-4\">Attendance Trends</h4>\n                <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <BarChart3 className=\"h-16 w-16 text-primary mb-2 mx-auto\" />\n                    <p className=\"text-sm text-muted-foreground\">Interactive attendance trend chart would render here</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"border border-border p-6 rounded-lg\">\n                <h4 className=\"text-lg font-semibold mb-4\">Engagement Metrics</h4>\n                <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <TrendingUp className=\"h-16 w-16 text-accent mb-2 mx-auto\" />\n                    <p className=\"text-sm text-muted-foreground\">Real-time engagement analytics chart would render here</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Detailed Analytics */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5 mb-8\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"events\">Event Performance</TabsTrigger>\n            <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\n            <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\n            <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {/* Event Type Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5 text-primary\" />\n                    Event Type Performance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-chart-4 rounded-full\"></div>\n                        <span>Hackathons</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">2,847</div>\n                        <div className=\"text-xs text-chart-4\">+15.2%</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-chart-5 rounded-full\"></div>\n                        <span>Workshops</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">1,923</div>\n                        <div className=\"text-xs text-chart-4\">+8.7%</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                        <span>Conferences</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">756</div>\n                        <div className=\"text-xs text-chart-5\">+2.1%</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                        <span>Competitions</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">432</div>\n                        <div className=\"text-xs text-red-400\">-1.3%</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Geographic Distribution */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Globe className=\"h-5 w-5 text-accent\" />\n                    Geographic Distribution\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockGeographicData.map((region) => (\n                      <div key={region.region} className=\"flex items-center justify-between\">\n                        <span>{region.region}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-20 bg-muted rounded-full h-2\">\n                            <div \n                              className={`${region.color} h-2 rounded-full`} \n                              style={{ width: `${region.percentage}%` }}\n                            ></div>\n                          </div>\n                          <span className=\"text-sm\">{region.percentage}%</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Sustainability Metrics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Leaf className=\"h-5 w-5 text-chart-4\" />\n                    Sustainability Impact\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>CO₂ Saved</span>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-chart-4\">{mockSustainabilityMetrics.co2Saved}</div>\n                        <div className=\"text-xs text-muted-foreground\">vs in-person</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Trees Equivalent</span>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-chart-4\">{mockSustainabilityMetrics.treesEquivalent.toLocaleString()}</div>\n                        <div className=\"text-xs text-muted-foreground\">planted</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Travel Miles Saved</span>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-chart-4\">{mockSustainabilityMetrics.travelMilesSaved}</div>\n                        <div className=\"text-xs text-muted-foreground\">miles</div>\n                      </div>\n                    </div>\n                    <div className=\"p-3 bg-chart-4/10 border border-chart-4/30 rounded-lg\">\n                      <p className=\"text-xs text-chart-4 font-medium\">\n                        🌱 You're in the {mockSustainabilityMetrics.sustainabilityRank} for sustainability!\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"events\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Event Performance Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left py-3 px-4 font-semibold\">Event Name</th>\n                        <th className=\"text-left py-3 px-4 font-semibold\">Type</th>\n                        <th className=\"text-left py-3 px-4 font-semibold\">Participants</th>\n                        <th className=\"text-left py-3 px-4 font-semibold\">Engagement</th>\n                        <th className=\"text-left py-3 px-4 font-semibold\">Revenue</th>\n                        <th className=\"text-left py-3 px-4 font-semibold\">Rating</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {mockEventPerformance.map((event, index) => (\n                        <tr key={index} className=\"border-b border-border/50\">\n                          <td className=\"py-3 px-4 font-medium\">{event.name}</td>\n                          <td className=\"py-3 px-4\">\n                            <Badge variant=\"outline\">{event.type}</Badge>\n                          </td>\n                          <td className=\"py-3 px-4\">{event.participants.toLocaleString()}</td>\n                          <td className=\"py-3 px-4\">{event.engagement}%</td>\n                          <td className=\"py-3 px-4\">{formatCurrency(event.revenue)}</td>\n                          <td className=\"py-3 px-4\">{event.rating} ⭐</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"revenue\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5 text-chart-5\" />\n                  Revenue Breakdown\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockRevenueBreakdown.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span>{item.source}</span>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">{formatCurrency(item.amount)}</div>\n                        <div className=\"text-xs text-muted-foreground\">{item.percentage}%</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"engagement\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className=\"h-5 w-5 text-accent\" />\n                  User Engagement\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockEngagementMetrics.map((metric, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span>{metric.metric}</span>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">{metric.value}</div>\n                        <div className={`text-xs ${metric.trend === 'up' ? 'text-chart-4' : 'text-red-400'}`}>\n                          {metric.change}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"insights\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5 text-primary\" />\n                  AI Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockAIInsights.map((insight, index) => (\n                    <div key={index} className={`p-4 border rounded-lg ${insight.color}`}>\n                      <div className=\"text-sm font-medium mb-1\">{insight.type}</div>\n                      <p className=\"text-xs\">{insight.message}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20347},"client/src/pages/AnalyticsPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AnalyticsChart } from '@/components/ui/analytics-chart';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Analytics, Event } from '@/types';\nimport { TrendingUp, TrendingDown, Users, Calendar, DollarSign, Star, Download, BarChart3 } from 'lucide-react';\n\nexport default function AnalyticsPage() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedPeriod, setSelectedPeriod] = useState('30d');\n  const [selectedEvent, setSelectedEvent] = useState<string>('all');\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: events = [] } = useQuery<Event[]>({\n    queryKey: ['/api/events'],\n    enabled: !!user,\n  });\n\n  const { data: analytics = [] } = useQuery<Analytics[]>({\n    queryKey: ['/api/analytics/events', selectedEvent],\n    enabled: !!user && selectedEvent !== 'all',\n  });\n\n  // Mock analytics data for demonstration\n  const keyMetrics = {\n    totalParticipants: {\n      value: 12847,\n      change: 15.3,\n      trend: 'up' as const,\n    },\n    activeEvents: {\n      value: 89,\n      change: 8.7,\n      trend: 'up' as const,\n    },\n    engagementRate: {\n      value: 94.2,\n      change: 22.1,\n      trend: 'up' as const,\n    },\n    revenue: {\n      value: 248000,\n      change: 31.5,\n      trend: 'up' as const,\n    },\n  };\n\n  const eventPerformanceData = [\n    { name: 'Jan', participants: 400, engagement: 85, revenue: 15000 },\n    { name: 'Feb', participants: 600, engagement: 88, revenue: 18000 },\n    { name: 'Mar', participants: 800, engagement: 92, revenue: 22000 },\n    { name: 'Apr', participants: 950, engagement: 90, revenue: 25000 },\n    { name: 'May', participants: 1200, engagement: 94, revenue: 28000 },\n    { name: 'Jun', participants: 1100, engagement: 96, revenue: 30000 },\n  ];\n\n  const eventTypePerformance = [\n    { type: 'Hackathons', participants: 2847, change: 15.2 },\n    { type: 'Workshops', participants: 1923, change: 8.7 },\n    { type: 'Conferences', participants: 756, change: 2.1 },\n    { type: 'Competitions', participants: 432, change: -1.3 },\n  ];\n\n  const geographicData = [\n    { region: 'North America', percentage: 45, color: 'bg-primary' },\n    { region: 'Europe', percentage: 32, color: 'bg-secondary' },\n    { region: 'Asia Pacific', percentage: 18, color: 'bg-chart-4' },\n    { region: 'Other', percentage: 5, color: 'bg-chart-5' },\n  ];\n\n  const revenueBreakdown = [\n    { source: 'Event Registration', amount: 186000, percentage: 65.5 },\n    { source: 'Sponsorships', amount: 72000, percentage: 25.4 },\n    { source: 'Premium Features', amount: 21000, percentage: 7.4 },\n    { source: 'Merchandise', amount: 5000, percentage: 1.7 },\n  ];\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6\">\n            <div>\n              <h1 className=\"text-5xl font-bold mb-4\">\n                Powerful <span className=\"gradient-text\">Analytics</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-3xl\">\n                Real-time insights, predictive analytics, and comprehensive reporting for data-driven decisions\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-period\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90d\">Last 90 days</SelectItem>\n                  <SelectItem value=\"1y\">Last year</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-export-report\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            <Card className=\"analytics-card\" data-testid=\"metric-participants\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Participants</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{keyMetrics.totalParticipants.value.toLocaleString()}</div>\n                <div className={`flex items-center text-xs ${keyMetrics.totalParticipants.trend === 'up' ? 'text-chart-4' : 'text-destructive'}`}>\n                  {keyMetrics.totalParticipants.trend === 'up' ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                  +{keyMetrics.totalParticipants.change}% from last month\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"analytics-card\" data-testid=\"metric-events\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Events</CardTitle>\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{keyMetrics.activeEvents.value}</div>\n                <div className={`flex items-center text-xs ${keyMetrics.activeEvents.trend === 'up' ? 'text-chart-4' : 'text-destructive'}`}>\n                  {keyMetrics.activeEvents.trend === 'up' ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                  +{keyMetrics.activeEvents.change}% improvement\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"analytics-card\" data-testid=\"metric-engagement\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Engagement Rate</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{keyMetrics.engagementRate.value}%</div>\n                <div className={`flex items-center text-xs ${keyMetrics.engagementRate.trend === 'up' ? 'text-chart-4' : 'text-destructive'}`}>\n                  {keyMetrics.engagementRate.trend === 'up' ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                  +{keyMetrics.engagementRate.change}% growth\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"analytics-card\" data-testid=\"metric-revenue\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Revenue (MTD)</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">${(keyMetrics.revenue.value / 1000).toFixed(0)}K</div>\n                <div className={`flex items-center text-xs ${keyMetrics.revenue.trend === 'up' ? 'text-chart-4' : 'text-destructive'}`}>\n                  <Star className=\"w-3 h-3 mr-1 text-chart-5\" />\n                  Excellent performance\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-4 glass-card\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"events\" data-testid=\"tab-events\">Events</TabsTrigger>\n              <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n              <TabsTrigger value=\"revenue\" data-testid=\"tab-revenue\">Revenue</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-8\">\n              {/* Performance Charts */}\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>Event Performance Trends</CardTitle>\n                      <Select defaultValue=\"participants\">\n                        <SelectTrigger className=\"w-32\" data-testid=\"select-metric\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"participants\">Participants</SelectItem>\n                          <SelectItem value=\"engagement\">Engagement</SelectItem>\n                          <SelectItem value=\"revenue\">Revenue</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <AnalyticsChart data={eventPerformanceData} type=\"line\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle>User Engagement Heatmap</CardTitle>\n                    <CardDescription>Activity patterns throughout the week</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-7 gap-1 mb-4\">\n                      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                        <div key={day} className=\"text-xs text-center text-muted-foreground p-2\">\n                          {day}\n                        </div>\n                      ))}\n                      {Array.from({ length: 14 }, (_, i) => (\n                        <div\n                          key={i}\n                          className={`h-8 rounded ${\n                            Math.random() > 0.3 ? 'bg-primary' : 'bg-primary/40'\n                          }`}\n                          style={{ opacity: 0.3 + Math.random() * 0.7 }}\n                        />\n                      ))}\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <span>Less active</span>\n                      <span>More active</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Detailed Analytics */}\n              <div className=\"grid lg:grid-cols-3 gap-8\">\n                {/* Event Type Performance */}\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-5 h-5 text-primary\" />\n                      Event Type Performance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {eventTypePerformance.map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between\" data-testid={`event-type-${index}`}>\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-3 h-3 rounded-full ${\n                              index === 0 ? 'bg-chart-4' : \n                              index === 1 ? 'bg-chart-5' : \n                              index === 2 ? 'bg-chart-3' : 'bg-destructive'\n                            }`}></div>\n                            <span className=\"text-sm\">{item.type}</span>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-semibold text-sm\">{item.participants.toLocaleString()}</div>\n                            <div className={`text-xs ${item.change > 0 ? 'text-chart-4' : 'text-destructive'}`}>\n                              {item.change > 0 ? '+' : ''}{item.change}%\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Geographic Distribution */}\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"w-5 h-5 text-secondary\" />\n                      Geographic Distribution\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {geographicData.map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between\" data-testid={`geo-${index}`}>\n                          <span className=\"text-sm\">{item.region}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-20 bg-muted rounded-full h-2\">\n                              <div \n                                className={`${item.color} h-2 rounded-full`}\n                                style={{ width: `${item.percentage}%` }}\n                              ></div>\n                            </div>\n                            <span className=\"text-sm font-medium w-8\">{item.percentage}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* AI Insights */}\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Brain className=\"w-5 h-5 text-accent\" />\n                      AI Insights\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      <div className=\"p-4 rounded-lg bg-primary/10 border border-primary/20\">\n                        <div className=\"text-sm font-medium text-primary mb-2\">📈 Engagement Boost</div>\n                        <p className=\"text-sm text-muted-foreground\">Adding interactive polls could increase engagement by 34% in your next webinar.</p>\n                      </div>\n                      \n                      <div className=\"p-4 rounded-lg bg-accent/10 border border-accent/20\">\n                        <div className=\"text-sm font-medium text-accent mb-2\">🎯 Team Matching</div>\n                        <p className=\"text-sm text-muted-foreground\">AI has identified 12 potential team formations for upcoming hackathon.</p>\n                      </div>\n\n                      <div className=\"p-4 rounded-lg bg-chart-4/10 border border-chart-4/20\">\n                        <div className=\"text-sm font-medium text-chart-4 mb-2\">💡 Recommendation</div>\n                        <p className=\"text-sm text-muted-foreground\">Consider scheduling events at 2 PM EST for 25% higher attendance.</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"events\" className=\"space-y-8\">\n              <Card className=\"analytics-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Event Performance Details</CardTitle>\n                    <Select value={selectedEvent} onValueChange={setSelectedEvent}>\n                      <SelectTrigger className=\"w-48\" data-testid=\"select-event\">\n                        <SelectValue placeholder=\"Select Event\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Events</SelectItem>\n                        {events.map((event) => (\n                          <SelectItem key={event.id} value={event.id}>\n                            {event.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {selectedEvent === 'all' ? (\n                    <div className=\"text-center py-16\">\n                      <BarChart3 className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                      <h3 className=\"text-xl font-semibold mb-2\">Select an Event</h3>\n                      <p className=\"text-muted-foreground\">\n                        Choose a specific event to view detailed analytics and insights\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-6\">\n                      <div className=\"grid grid-cols-4 gap-4\">\n                        <Card className=\"p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-primary\">247</div>\n                          <div className=\"text-sm text-muted-foreground\">Registrations</div>\n                        </Card>\n                        <Card className=\"p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-chart-4\">89%</div>\n                          <div className=\"text-sm text-muted-foreground\">Attendance</div>\n                        </Card>\n                        <Card className=\"p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-accent\">4.8</div>\n                          <div className=\"text-sm text-muted-foreground\">Rating</div>\n                        </Card>\n                        <Card className=\"p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-chart-5\">$2.4K</div>\n                          <div className=\"text-sm text-muted-foreground\">Revenue</div>\n                        </Card>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"users\" className=\"space-y-8\">\n              <Card className=\"analytics-card\">\n                <CardHeader>\n                  <CardTitle>User Engagement</CardTitle>\n                  <CardDescription>Detailed user activity and behavior patterns</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-primary\">2h 34m</div>\n                        <div className=\"text-sm text-muted-foreground\">Avg. Session</div>\n                        <div className=\"text-xs text-chart-4\">+22min</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-accent\">47.2K</div>\n                        <div className=\"text-sm text-muted-foreground\">Chat Messages</div>\n                        <div className=\"text-xs text-chart-4\">+18.5%</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-chart-3\">3.8K</div>\n                        <div className=\"text-sm text-muted-foreground\">File Shares</div>\n                        <div className=\"text-xs text-chart-4\">+9.2%</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div class Name=\"text-2xl font-bold text-chart-5\">12.4K</div>\n                        <div className=\"text-sm text-muted-foreground\">Connections</div>\n                        <div className=\"text-xs text-chart-4\">+15.7%</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"revenue\" className=\"space-y-8\">\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-5 h-5 text-chart-4\" />\n                      Revenue Breakdown\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {revenueBreakdown.map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between\" data-testid={`revenue-${index}`}>\n                          <span className=\"text-sm\">{item.source}</span>\n                          <div className=\"text-right\">\n                            <div className=\"font-semibold\">${(item.amount / 1000).toFixed(0)}K</div>\n                            <div className=\"text-xs text-muted-foreground\">{item.percentage}%</div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"analytics-card\">\n                  <CardHeader>\n                    <CardTitle>Sustainability Impact</CardTitle>\n                    <CardDescription>Environmental benefits of virtual events</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      <div className=\"text-center\">\n                        <div className=\"text-4xl font-bold text-chart-4 mb-2\">12.4T</div>\n                        <div className=\"text-sm text-muted-foreground\">CO₂ Saved vs in-person</div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-chart-4\">2,847</div>\n                          <div className=\"text-xs text-muted-foreground\">Trees Equivalent</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-chart-4\">4.2M</div>\n                          <div className=\"text-xs text-muted-foreground\">Miles Saved</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"p-3 bg-chart-4/10 border border-chart-4/30 rounded-lg text-center\">\n                        <p className=\"text-xs text-chart-4 font-medium\">🌱 You're in the top 5% for sustainability!</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24804},"client/src/pages/Community.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport Chat from \"@/components/Chat\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  MessageSquare, \n  Code, \n  Palette, \n  Rocket, \n  Brain,\n  UserPlus,\n  Search,\n  Filter,\n  Star,\n  Zap,\n  RefreshCw,\n  FileText,\n  Image,\n  Upload\n} from \"lucide-react\";\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  profileImageUrl?: string;\n  skills?: string[];\n  interests?: string[];\n  bio?: string;\n}\n\ninterface Team {\n  id: string;\n  name: string;\n  description?: string;\n  eventId?: string;\n  leaderId: string;\n  maxMembers: number;\n  skills?: string[];\n  isOpen: boolean;\n}\n\ninterface ChatRoom {\n  id: string;\n  name: string;\n  type: string;\n  memberCount: number;\n  isActive: boolean;\n}\n\nexport default function Community() {\n  const [activeTab, setActiveTab] = useState(\"recommendations\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedChatRoom, setSelectedChatRoom] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data for demonstration\n  const mockRecommendations = [\n    {\n      id: \"1\",\n      firstName: \"Alex\",\n      lastName: \"Chen\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\",\n      skills: [\"React\", \"Node.js\", \"AI/ML\"],\n      matchScore: 95,\n      matchType: \"AI Match\",\n      reason: \"Complementary skills for next hackathon\"\n    },\n    {\n      id: \"2\",\n      firstName: \"Sarah\",\n      lastName: \"Johnson\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\",\n      skills: [\"UI/UX\", \"Figma\", \"Product Design\"],\n      matchScore: 88,\n      matchType: \"Team Match\",\n      reason: \"Perfect design partner for your projects\"\n    },\n    {\n      id: \"3\",\n      firstName: \"Mike\",\n      lastName: \"Rodriguez\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n      skills: [\"Python\", \"Machine Learning\", \"Data Science\"],\n      matchScore: 82,\n      matchType: \"Skill Boost\",\n      reason: \"Can teach you advanced ML techniques\"\n    }\n  ];\n\n  const mockChatRooms = [\n    {\n      id: \"1\",\n      name: \"React Developers\",\n      type: \"Technology\",\n      memberCount: 2847,\n      isActive: true,\n      icon: <Code className=\"h-5 w-5\" />\n    },\n    {\n      id: \"2\",\n      name: \"UI/UX Designers\",\n      type: \"Design\",\n      memberCount: 1923,\n      isActive: true,\n      icon: <Palette className=\"h-5 w-5\" />\n    },\n    {\n      id: \"3\",\n      name: \"Startup Founders\",\n      type: \"Business\",\n      memberCount: 756,\n      isActive: false,\n      icon: <Rocket className=\"h-5 w-5\" />\n    }\n  ];\n\n  const mockStats = {\n    totalMembers: 127000,\n    activeChats: 2800,\n    teamsFormed: 15600,\n    projectsCompleted: 8200\n  };\n\n  const getMatchTypeColor = (type: string) => {\n    switch (type) {\n      case 'AI Match':\n        return 'bg-primary/20 text-primary';\n      case 'Team Match':\n        return 'bg-accent/20 text-accent';\n      case 'Skill Boost':\n        return 'bg-chart-5/20 text-chart-5';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const connectWithUser = useMutation({\n    mutationFn: async (userId: string) => {\n      // This would make an API call to connect with user\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Connection request sent!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send connection request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const joinChatRoom = useMutation({\n    mutationFn: async (roomId: string) => {\n      // This would make an API call to join chat room\n      await new Promise(resolve => setTimeout(resolve, 500));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Joined chat room successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to join chat room\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            Connect & <span className=\"gradient-text\">Collaborate</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            AI-powered networking, real-time collaboration tools, and vibrant community spaces\n          </p>\n        </div>\n\n        {/* Community Stats */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {mockStats.totalMembers.toLocaleString()}+\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Active Members</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-accent mb-2\">\n                {mockStats.activeChats.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Group Chats</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-chart-4 mb-2\">\n                {mockStats.teamsFormed.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Teams Formed</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-chart-5 mb-2\">\n                {mockStats.projectsCompleted.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Projects Completed</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* AI Recommendations Banner */}\n        <Card className=\"mb-12 bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                  <Brain className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">AI Insights Ready</h3>\n                  <p className=\"text-muted-foreground\">\n                    Based on your activity, we found 3 perfect events and 5 potential team members\n                  </p>\n                </div>\n              </div>\n              <Button variant=\"ghost\">\n                <RefreshCw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n            <TabsTrigger value=\"recommendations\" className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4\" />\n              AI Recommendations\n            </TabsTrigger>\n            <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-4 w-4\" />\n              Group Chats\n            </TabsTrigger>\n            <TabsTrigger value=\"collaboration\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Collaboration\n            </TabsTrigger>\n            <TabsTrigger value=\"teams\" className=\"flex items-center gap-2\">\n              <Zap className=\"h-4 w-4\" />\n              Team Formation\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"recommendations\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5 text-primary\" />\n                  AI-Recommended Connections\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  People you should connect with based on shared interests and complementary skills\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {mockRecommendations.map((person) => (\n                    <Card key={person.id} className=\"border border-border hover:border-primary/50 transition-colors\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center gap-4 mb-4\">\n                          <Avatar className=\"h-12 w-12\">\n                            <AvatarImage src={person.profileImageUrl} />\n                            <AvatarFallback>\n                              {person.firstName?.[0]}{person.lastName?.[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold\">{person.firstName} {person.lastName}</h4>\n                            <Badge className={getMatchTypeColor(person.matchType)}>\n                              {person.matchScore}% {person.matchType}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-sm text-muted-foreground mb-4\">{person.reason}</p>\n                        \n                        <div className=\"mb-4\">\n                          <p className=\"text-sm font-medium mb-2\">Skills:</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {person.skills.map((skill) => (\n                              <Badge key={skill} variant=\"outline\" className=\"text-xs\">\n                                {skill}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={() => connectWithUser.mutate(person.id)}\n                            disabled={connectWithUser.isPending}\n                            className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n                          >\n                            <UserPlus className=\"h-4 w-4 mr-2\" />\n                            Connect\n                          </Button>\n                          <Button variant=\"outline\" className=\"px-4\">\n                            View Profile\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"chat\" className=\"space-y-8\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Chat Rooms List */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Popular Group Chats</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Search className=\"h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        placeholder=\"Search groups...\" \n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"flex-1\"\n                      />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {mockChatRooms.map((room) => (\n                        <div\n                          key={room.id}\n                          className={`p-4 rounded-lg border cursor-pointer transition-colors ${\n                            selectedChatRoom === room.id \n                              ? 'border-primary bg-primary/10' \n                              : 'border-border hover:border-primary/50'\n                          }`}\n                          onClick={() => setSelectedChatRoom(room.id)}\n                        >\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                              {room.icon}\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold\">{room.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {room.memberCount.toLocaleString()} members\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <Badge variant=\"outline\">{room.type}</Badge>\n                            {room.isActive && (\n                              <div className=\"flex items-center gap-1 text-chart-4\">\n                                <div className=\"w-2 h-2 bg-chart-4 rounded-full animate-pulse\" />\n                                <span className=\"text-xs\">Active</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <Button \n                      className=\"w-full mt-4 bg-accent text-accent-foreground hover:bg-accent/90\"\n                    >\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Create Group\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Chat Interface */}\n              <div className=\"lg:col-span-2\">\n                {selectedChatRoom ? (\n                  <Chat roomId={selectedChatRoom} />\n                ) : (\n                  <Card className=\"h-96\">\n                    <CardContent className=\"h-full flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <MessageSquare className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-xl font-semibold mb-2\">Select a Chat Room</h3>\n                        <p className=\"text-muted-foreground\">Choose a group chat to start conversations</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"collaboration\" className=\"space-y-8\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Virtual Whiteboard */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5 text-chart-3\" />\n                    Virtual Whiteboard\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-white rounded-lg h-48 mb-4 p-4 relative border\">\n                    <div className=\"text-gray-800 text-sm\">\n                      {/* Simulated whiteboard content */}\n                      <div className=\"absolute top-4 left-4\">\n                        <div className=\"w-16 h-16 border-2 border-blue-500 rounded bg-blue-50\"></div>\n                        <span className=\"text-xs mt-1 block\">Login</span>\n                      </div>\n                      <div className=\"absolute top-4 left-28\">\n                        <div className=\"w-16 h-16 border-2 border-green-500 rounded bg-green-50\"></div>\n                        <span className=\"text-xs mt-1 block\">Dashboard</span>\n                      </div>\n                      <div className=\"absolute top-24 left-16\">\n                        <div className=\"w-16 h-16 border-2 border-purple-500 rounded bg-purple-50\"></div>\n                        <span className=\"text-xs mt-1 block\">Profile</span>\n                      </div>\n                      {/* Arrows */}\n                      <div className=\"absolute top-8 left-20 w-6 h-0.5 bg-gray-400\"></div>\n                      <div className=\"absolute top-16 left-12 w-0.5 h-6 bg-gray-400\"></div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button className=\"flex-1 bg-chart-3 text-white hover:bg-chart-3/90\">\n                      Join Board\n                    </Button>\n                    <Button variant=\"outline\" className=\"px-3\">\n                      <Upload className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Code Editor */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Code className=\"h-5 w-5 text-chart-4\" />\n                    Collaborative Code\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-gray-900 rounded-lg h-48 mb-4 p-4 text-sm font-mono overflow-hidden\">\n                    <div className=\"text-gray-400 mb-2\">// Real-time collaborative editing</div>\n                    <div className=\"text-blue-400\">function <span className=\"text-yellow-400\">createTeam</span>() {`{`}</div>\n                    <div className=\"ml-4 text-gray-300\">const team = {`{`}</div>\n                    <div className=\"ml-8 text-green-400\">name: <span className=\"text-orange-400\">'AI Innovators'</span>,</div>\n                    <div className=\"ml-8 text-green-400\">members: <span className=\"text-purple-400\">[]</span>,</div>\n                    <div className=\"ml-8 text-green-400\">skills: <span className=\"text-orange-400\">['React', 'Python']</span></div>\n                    <div className=\"ml-4 text-gray-300\">{`};`}</div>\n                    <div className=\"text-blue-400\">{`}`}</div>\n                    <div className=\"mt-2 text-gray-500\">// User typing...</div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button className=\"flex-1 bg-chart-4 text-white hover:bg-chart-4/90\">\n                      Open Editor\n                    </Button>\n                    <Button variant=\"outline\" className=\"px-3\">\n                      <Upload className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* File Sharing */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Upload className=\"h-5 w-5 text-chart-5\" />\n                    File Sharing\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 h-48 overflow-y-auto scrollbar-thin mb-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded\">\n                      <div className=\"flex items-center space-x-3\">\n                        <FileText className=\"h-5 w-5 text-red-500\" />\n                        <div>\n                          <div className=\"text-sm font-medium\">project-spec.pdf</div>\n                          <div className=\"text-xs text-muted-foreground\">2.4 MB • Alex Chen</div>\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Upload className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Code className=\"h-5 w-5 text-blue-500\" />\n                        <div>\n                          <div className=\"text-sm font-medium\">app.js</div>\n                          <div className=\"text-xs text-muted-foreground\">156 KB • Sarah Kim</div>\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Upload className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-3 bg-secondary/30 rounded\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Image className=\"h-5 w-5 text-green-500\" />\n                        <div>\n                          <div className=\"text-sm font-medium\">mockup.png</div>\n                          <div className=\"text-xs text-muted-foreground\">8.9 MB • Mike Rodriguez</div>\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Upload className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <Button className=\"w-full bg-chart-5 text-white hover:bg-chart-5/90\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Upload Files\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"teams\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-center\">AI-Powered Team Formation</CardTitle>\n                <p className=\"text-center text-muted-foreground\">\n                  Let AI find the perfect teammates for your next project or hackathon\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-8\">\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Brain className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">Skill Matching</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      AI analyzes your skills and finds complementary team members\n                    </p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-accent/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Users className=\"h-8 w-8 text-accent\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">Team Dynamics</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Creates balanced teams based on personality and work styles\n                    </p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-chart-4/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Star className=\"h-8 w-8 text-chart-4\" />\n                    </div>\n                    <h4 className=\"font-semibold mb-2\">Success Prediction</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Predicts team success rate for better project outcomes\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"text-center mt-8\">\n                  <Button className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90\">\n                    <Zap className=\"h-4 w-4 mr-2\" />\n                    Find My Team\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25220},"client/src/pages/CommunityPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { ChatInterface } from '@/components/ChatInterface';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { TeamMatchingResult } from '@/types';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { Brain, Users, MessageSquare, Search, Zap, Code, Palette, Rocket } from 'lucide-react';\n\nexport default function CommunityPage() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  const { isConnected, messages, sendChatMessage } = useWebSocket(user?.id);\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: teamMatches, isLoading: matchesLoading } = useQuery<TeamMatchingResult>({\n    queryKey: ['/api/ai/team-matches'],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/ai/team-matches', {\n        eventType: 'hackathon',\n        teamSize: 4,\n      });\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const communityStats = {\n    totalMembers: '127K+',\n    activeChats: '2.8K',\n    teamsFormed: '15.6K',\n    projectsCompleted: '8.2K',\n  };\n\n  const groupChats = [\n    {\n      id: '1',\n      name: 'React Developers',\n      members: 2847,\n      description: 'Discuss React best practices, share projects, and get help from the community.',\n      icon: '⚛️',\n      isActive: true,\n      recentActivity: '2 minutes ago',\n    },\n    {\n      id: '2',\n      name: 'UI/UX Designers',\n      members: 1923,\n      description: 'Share your designs, get feedback, and collaborate on creative projects.',\n      icon: '🎨',\n      isActive: true,\n      recentActivity: '5 minutes ago',\n    },\n    {\n      id: '3',\n      name: 'Startup Founders',\n      members: 756,\n      description: 'Connect with fellow entrepreneurs and share startup experiences.',\n      icon: '🚀',\n      isActive: true,\n      recentActivity: '1 hour ago',\n    },\n    {\n      id: '4',\n      name: 'Machine Learning',\n      members: 3421,\n      description: 'Deep dive into ML algorithms, share research, and discuss latest developments.',\n      icon: '🤖',\n      isActive: false,\n      recentActivity: '3 hours ago',\n    },\n  ];\n\n  const recommendedConnections = [\n    {\n      id: '1',\n      name: 'Alex Chen',\n      role: 'Full-stack Developer',\n      skills: ['React', 'Node.js', 'AI/ML'],\n      matchScore: 95,\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',\n      bio: 'Passionate about building scalable web applications',\n    },\n    {\n      id: '2',\n      name: 'Sarah Johnson',\n      role: 'UX Designer',\n      skills: ['Figma', 'Product Design', 'User Research'],\n      matchScore: 88,\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face',\n      bio: 'Creating delightful user experiences through design',\n    },\n    {\n      id: '3',\n      name: 'Mike Rodriguez',\n      role: 'Data Scientist',\n      skills: ['Python', 'Machine Learning', 'Data Analysis'],\n      matchScore: 82,\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n      bio: 'Turning data into actionable insights',\n    },\n  ];\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl font-bold mb-4\">\n              Join The <span className=\"gradient-text\">Nexus Community</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Connect with like-minded individuals, form teams, and collaborate on amazing projects\n            </p>\n          </div>\n\n          {/* Community Stats */}\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n            <Card className=\"glass-card text-center\" data-testid=\"stat-members\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">{communityStats.totalMembers}</div>\n                <div className=\"text-sm text-muted-foreground\">Active Members</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card text-center\" data-testid=\"stat-chats\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-secondary mb-2\">{communityStats.activeChats}</div>\n                <div className=\"text-sm text-muted-foreground\">Group Chats</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card text-center\" data-testid=\"stat-teams\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-chart-4 mb-2\">{communityStats.teamsFormed}</div>\n                <div className=\"text-sm text-muted-foreground\">Teams Formed</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-card text-center\" data-testid=\"stat-projects\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold text-chart-5 mb-2\">{communityStats.projectsCompleted}</div>\n                <div className=\"text-sm text-muted-foreground\">Projects Completed</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-4 glass-card\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"connections\" data-testid=\"tab-connections\">Connections</TabsTrigger>\n              <TabsTrigger value=\"teams\" data-testid=\"tab-teams\">Teams</TabsTrigger>\n              <TabsTrigger value=\"chat\" data-testid=\"tab-chat\">Chat</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-8\">\n              {/* AI Recommendations */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"w-5 h-5 text-primary\" />\n                    AI-Recommended Connections\n                  </CardTitle>\n                  <CardDescription>\n                    People you should connect with based on shared interests and complementary skills\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {recommendedConnections.map((connection) => (\n                      <Card key={connection.id} className=\"border border-border hover:border-primary transition-colors\" data-testid={`connection-${connection.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center gap-4 mb-4\">\n                            <Avatar className=\"w-12 h-12\">\n                              <AvatarImage src={connection.avatar} alt={connection.name} />\n                              <AvatarFallback>{connection.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold\">{connection.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{connection.role}</p>\n                              <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                                {connection.matchScore}% match\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-sm text-muted-foreground mb-4\">{connection.bio}</p>\n                          \n                          <div className=\"mb-4\">\n                            <p className=\"text-sm font-medium mb-2\">Skills:</p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {connection.skills.map((skill) => (\n                                <Badge key={skill} variant=\"outline\" className=\"text-xs\">\n                                  {skill}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" className=\"flex-1\" data-testid={`button-connect-${connection.id}`}>\n                              Connect\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-profile-${connection.id}`}>\n                              Profile\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Popular Group Chats */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>Popular Group Chats</CardTitle>\n                      <CardDescription>Join conversations with like-minded developers</CardDescription>\n                    </div>\n                    <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-group\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Group\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {groupChats.map((chat) => (\n                      <Card key={chat.id} className=\"glass-card hover-lift\" data-testid={`group-chat-${chat.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center gap-4 mb-4\">\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center text-2xl\">\n                              {chat.icon}\n                            </div>\n                            <div>\n                              <h4 className=\"font-semibold\">{chat.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{chat.members.toLocaleString()} members</p>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-sm text-muted-foreground mb-4\">{chat.description}</p>\n                          \n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-1\">\n                              <div className={`w-2 h-2 rounded-full ${chat.isActive ? 'bg-chart-4' : 'bg-muted-foreground'}`}></div>\n                              <span className=\"text-xs text-muted-foreground\">{chat.recentActivity}</span>\n                            </div>\n                            {chat.isActive && (\n                              <Badge variant=\"outline\" className=\"text-chart-4 border-chart-4\">\n                                Active\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          <Button className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\" data-testid={`button-join-chat-${chat.id}`}>\n                            Join Chat\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"connections\" className=\"space-y-8\">\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Your Network</CardTitle>\n                    <div className=\"flex items-center gap-2\">\n                      <Search className=\"w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search connections...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"w-64\"\n                        data-testid=\"input-search-connections\"\n                      />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <Users className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">Build Your Network</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Connect with other members to start collaborating on projects\n                    </p>\n                    <Button data-testid=\"button-find-connections\">\n                      Find Connections\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"teams\" className=\"space-y-8\">\n              {/* Team Formation Tools */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5 text-accent\" />\n                    AI-Powered Team Formation\n                  </CardTitle>\n                  <CardDescription>\n                    Let AI find the perfect teammates for your next project or hackathon\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Brain className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h4 className=\"font-semibold mb-2\">Skill Matching</h4>\n                      <p className=\"text-sm text-muted-foreground\">AI analyzes your skills and finds complementary team members</p>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Users className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h4 className=\"font-semibold mb-2\">Team Dynamics</h4>\n                      <p className=\"text-sm text-muted-foreground\">Creates balanced teams based on personality and work styles</p>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-chart-4 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Trophy className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <h4 className=\"font-semibold mb-2\">Success Prediction</h4>\n                      <p className=\"text-sm text-muted-foreground\">Predicts team success rate for better project outcomes</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <Button className=\"bg-gradient-to-r from-primary to-secondary text-white px-8\" data-testid=\"button-find-team\">\n                      <Zap className=\"w-4 h-4 mr-2\" />\n                      Find My Team\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Your Teams */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle>Your Teams</CardTitle>\n                  <CardDescription>Teams you're part of or leading</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <Users className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">No Teams Yet</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Join or create teams to start collaborating on projects\n                    </p>\n                    <div className=\"flex justify-center gap-4\">\n                      <Button data-testid=\"button-create-team\">Create Team</Button>\n                      <Button variant=\"outline\" data-testid=\"button-browse-teams\">Browse Teams</Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"chat\" className=\"space-y-8\">\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                <ChatInterface\n                  title=\"Community Chat\"\n                  channelType=\"global\"\n                  channelId=\"community\"\n                  messages={messages}\n                  onSendMessage={sendChatMessage}\n                  isConnected={isConnected}\n                />\n                \n                <Card className=\"glass-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MessageSquare className=\"w-5 h-5 text-primary\" />\n                      Chat Channels\n                    </CardTitle>\n                    <CardDescription>Active conversations and channels</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {groupChats.map((chat) => (\n                        <div\n                          key={chat.id}\n                          className=\"flex items-center justify-between p-3 rounded-lg bg-secondary/30 hover:bg-secondary/50 transition-colors cursor-pointer\"\n                          data-testid={`channel-${chat.id}`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"text-2xl\">{chat.icon}</div>\n                            <div>\n                              <div className=\"font-medium\">{chat.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">{chat.members} members</div>\n                            </div>\n                          </div>\n                          {chat.isActive && (\n                            <div className=\"w-2 h-2 bg-chart-4 rounded-full\"></div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20771},"client/src/pages/EventBuilder.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { Event } from '@/types';\nimport { useLocation } from 'wouter';\nimport { \n  Calendar, \n  MapPin, \n  Users, \n  DollarSign, \n  Clock, \n  Wand2, \n  Save, \n  Eye, \n  Plus,\n  Trash2,\n  GripVertical,\n  Settings,\n  Palette\n} from 'lucide-react';\n\nconst eventSchema = z.object({\n  title: z.string().min(1, 'Title is required').max(255, 'Title too long'),\n  description: z.string().optional(),\n  type: z.enum(['hackathon', 'workshop', 'quiz', 'conference'], {\n    required_error: 'Please select an event type',\n  }),\n  startDate: z.string().min(1, 'Start date is required'),\n  endDate: z.string().min(1, 'End date is required'),\n  location: z.string().optional(),\n  maxParticipants: z.coerce.number().int().positive().optional(),\n  registrationFee: z.coerce.number().min(0, 'Fee cannot be negative').optional().default(0),\n  prizePool: z.coerce.number().min(0, 'Prize pool cannot be negative').optional(),\n  tags: z.array(z.string()).optional().default([]),\n  requirements: z.array(z.string()).optional().default([]),\n  isVirtual: z.boolean().default(false),\n  isPublic: z.boolean().default(true),\n  allowTeams: z.boolean().default(true),\n  maxTeamSize: z.coerce.number().int().positive().optional().default(4),\n});\n\ntype EventFormData = z.infer<typeof eventSchema>;\n\ninterface BuilderComponent {\n  id: string;\n  type: 'header' | 'description' | 'registration' | 'schedule' | 'speakers' | 'sponsors';\n  title: string;\n  icon: string;\n  required: boolean;\n}\n\nconst builderComponents: BuilderComponent[] = [\n  { id: 'header', type: 'header', title: 'Event Header', icon: '🏷️', required: true },\n  { id: 'description', type: 'description', title: 'Description', icon: '📝', required: true },\n  { id: 'registration', type: 'registration', title: 'Registration Form', icon: '📋', required: true },\n  { id: 'schedule', type: 'schedule', title: 'Schedule', icon: '📅', required: false },\n  { id: 'speakers', type: 'speakers', title: 'Speakers', icon: '🎤', required: false },\n  { id: 'sponsors', type: 'sponsors', title: 'Sponsors', icon: '🤝', required: false },\n];\n\nconst eventTypes = [\n  { \n    value: 'hackathon', \n    label: 'Hackathon', \n    icon: '💻',\n    description: 'Competitive coding event with teams building projects',\n    suggestedDuration: '2-3 days',\n    commonFeatures: ['Team formation', 'Judging', 'Prizes', 'Mentorship']\n  },\n  { \n    value: 'workshop', \n    label: 'Workshop', \n    icon: '🛠️',\n    description: 'Educational session with hands-on learning',\n    suggestedDuration: '2-4 hours',\n    commonFeatures: ['Materials', 'Certification', 'Q&A', 'Follow-up resources']\n  },\n  { \n    value: 'conference', \n    label: 'Conference', \n    icon: '🎤',\n    description: 'Professional gathering with multiple speakers',\n    suggestedDuration: '1-3 days',\n    commonFeatures: ['Multiple tracks', 'Networking', 'Recordings', 'Exhibition']\n  },\n  { \n    value: 'quiz', \n    label: 'Competition', \n    icon: '🏆',\n    description: 'Competitive challenge or quiz event',\n    suggestedDuration: '1-2 hours',\n    commonFeatures: ['Leaderboard', 'Time limits', 'Rewards', 'Live scoring']\n  },\n];\n\nexport default function EventBuilder() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [activeComponents, setActiveComponents] = useState<string[]>(['header', 'description', 'registration']);\n  const [currentStep, setCurrentStep] = useState<'basic' | 'builder' | 'preview'>('basic');\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      type: undefined,\n      startDate: '',\n      endDate: '',\n      location: '',\n      registrationFee: 0,\n      tags: [],\n      requirements: [],\n      isVirtual: false,\n      isPublic: true,\n      allowTeams: true,\n      maxTeamSize: 4,\n    },\n  });\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: EventFormData) => {\n      return apiRequest('POST', '/api/events', {\n        ...data,\n        startDate: new Date(data.startDate).toISOString(),\n        endDate: new Date(data.endDate).toISOString(),\n      });\n    },\n    onSuccess: (response) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Event Created Successfully\",\n        description: \"Your event has been published and is now live!\",\n      });\n      setLocation('/events');\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Creation Failed\",\n        description: \"Failed to create event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateWithAIMutation = useMutation({\n    mutationFn: async ({ eventType, topic, duration }: { eventType: string; topic: string; duration: string }) => {\n      const response = await apiRequest('POST', '/api/ai/generate-event', {\n        eventType,\n        topic,\n        duration,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      form.setValue('title', data.title);\n      form.setValue('description', data.description);\n      form.setValue('requirements', data.requirements || []);\n      setIsAIGenerating(false);\n      toast({\n        title: \"AI Content Generated\",\n        description: \"Event details have been generated based on your inputs!\",\n      });\n    },\n    onError: (error) => {\n      setIsAIGenerating(false);\n      toast({\n        title: \"AI Generation Failed\",\n        description: \"Failed to generate content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAIGenerate = () => {\n    const eventType = form.getValues('type');\n    if (!eventType) {\n      toast({\n        title: \"Select Event Type\",\n        description: \"Please select an event type before using AI generation.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAIGenerating(true);\n    generateWithAIMutation.mutate({\n      eventType,\n      topic: form.getValues('title') || `${eventType} event`,\n      duration: '1 day',\n    });\n  };\n\n  const onSubmit = (data: EventFormData) => {\n    createEventMutation.mutate(data);\n  };\n\n  const addComponent = (componentId: string) => {\n    if (!activeComponents.includes(componentId)) {\n      setActiveComponents([...activeComponents, componentId]);\n    }\n  };\n\n  const removeComponent = (componentId: string) => {\n    const component = builderComponents.find(c => c.id === componentId);\n    if (component?.required) {\n      toast({\n        title: \"Cannot Remove Component\",\n        description: \"This component is required for the event.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setActiveComponents(activeComponents.filter(id => id !== componentId));\n  };\n\n  const selectedEventType = form.watch('type');\n  const eventTypeInfo = eventTypes.find(t => t.value === selectedEventType);\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6\">\n            <div>\n              <h1 className=\"text-4xl font-bold mb-2\">\n                Create <span className=\"gradient-text\">Amazing Event</span>\n              </h1>\n              <p className=\"text-muted-foreground text-lg\">\n                Build your event with our AI-powered drag-and-drop builder\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              {currentStep !== 'basic' && (\n                <>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setCurrentStep('basic')}\n                    data-testid=\"button-back-to-basic\"\n                  >\n                    ← Back to Basics\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setCurrentStep('preview')}\n                    data-testid=\"button-preview\"\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Preview\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-center mb-12\">\n            <div className=\"flex items-center space-x-4\">\n              <div className={`flex items-center space-x-2 ${currentStep === 'basic' ? 'text-primary' : 'text-muted-foreground'}`}>\n                <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium ${\n                  currentStep === 'basic' ? 'border-primary bg-primary text-primary-foreground' : 'border-muted-foreground'\n                }`}>\n                  1\n                </div>\n                <span className=\"font-medium\">Basic Info</span>\n              </div>\n              <div className=\"w-8 h-0.5 bg-border\"></div>\n              <div className={`flex items-center space-x-2 ${currentStep === 'builder' ? 'text-primary' : 'text-muted-foreground'}`}>\n                <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium ${\n                  currentStep === 'builder' ? 'border-primary bg-primary text-primary-foreground' : 'border-muted-foreground'\n                }`}>\n                  2\n                </div>\n                <span className=\"font-medium\">Page Builder</span>\n              </div>\n              <div className=\"w-8 h-0.5 bg-border\"></div>\n              <div className={`flex items-center space-x-2 ${currentStep === 'preview' ? 'text-primary' : 'text-muted-foreground'}`}>\n                <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium ${\n                  currentStep === 'preview' ? 'border-primary bg-primary text-primary-foreground' : 'border-muted-foreground'\n                }`}>\n                  3\n                </div>\n                <span className=\"font-medium\">Preview & Publish</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Basic Info Step */}\n          {currentStep === 'basic' && (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(() => setCurrentStep('builder'))} className=\"space-y-8\">\n                <div className=\"grid lg:grid-cols-3 gap-8\">\n                  {/* Main Form */}\n                  <div className=\"lg:col-span-2 space-y-8\">\n                    <Card className=\"glass-card\">\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Settings className=\"w-5 h-5 text-primary\" />\n                          Event Details\n                        </CardTitle>\n                        <CardDescription>\n                          Basic information about your event\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Event Title *</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Enter your event title...\" \n                                  {...field} \n                                  data-testid=\"input-event-title\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Event Type *</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-event-type\">\n                                    <SelectValue placeholder=\"Select event type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {eventTypes.map((type) => (\n                                    <SelectItem key={type.value} value={type.value}>\n                                      <div className=\"flex items-center gap-2\">\n                                        <span>{type.icon}</span>\n                                        <span>{type.label}</span>\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Describe your event...\"\n                                  rows={4}\n                                  {...field}\n                                  data-testid=\"textarea-event-description\"\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Tell attendees what to expect from your event\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid md:grid-cols-2 gap-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"startDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Start Date & Time *</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"datetime-local\" \n                                    {...field} \n                                    data-testid=\"input-start-date\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"endDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>End Date & Time *</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"datetime-local\" \n                                    {...field} \n                                    data-testid=\"input-end-date\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"location\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Location</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Virtual, City name, or venue address...\"\n                                  {...field}\n                                  data-testid=\"input-event-location\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid md:grid-cols-3 gap-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"maxParticipants\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Max Participants</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    placeholder=\"Unlimited\"\n                                    {...field}\n                                    data-testid=\"input-max-participants\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"registrationFee\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Registration Fee ($)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    step=\"0.01\"\n                                    placeholder=\"0.00\"\n                                    {...field}\n                                    data-testid=\"input-registration-fee\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"prizePool\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Prize Pool ($)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    step=\"0.01\"\n                                    placeholder=\"0.00\"\n                                    {...field}\n                                    data-testid=\"input-prize-pool\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* AI Generator */}\n                    <Card className=\"glass-card border-primary/50 bg-primary/5\">\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Wand2 className=\"w-5 h-5 text-accent\" />\n                          AI Event Generator\n                        </CardTitle>\n                        <CardDescription>\n                          Let AI help you create compelling event content\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-center space-y-4\">\n                          <div className=\"text-4xl mb-4\">🤖</div>\n                          <h3 className=\"font-semibold text-lg\">Supercharge Your Event Creation</h3>\n                          <p className=\"text-muted-foreground\">\n                            Our AI will generate a compelling title, description, and requirements based on your event type and goals.\n                          </p>\n                          <Button\n                            type=\"button\"\n                            onClick={handleAIGenerate}\n                            disabled={isAIGenerating || !selectedEventType}\n                            className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90\"\n                            data-testid=\"button-ai-generate\"\n                          >\n                            {isAIGenerating ? (\n                              <>\n                                <div className=\"spinner w-4 h-4 mr-2\"></div>\n                                Generating...\n                              </>\n                            ) : (\n                              <>\n                                <Wand2 className=\"w-4 h-4 mr-2\" />\n                                Generate with AI\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Sidebar */}\n                  <div className=\"space-y-6\">\n                    {/* Event Type Info */}\n                    {eventTypeInfo && (\n                      <Card className=\"glass-card\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <span className=\"text-2xl\">{eventTypeInfo.icon}</span>\n                            {eventTypeInfo.label}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <p className=\"text-sm text-muted-foreground\">\n                            {eventTypeInfo.description}\n                          </p>\n                          \n                          <div>\n                            <div className=\"text-sm font-medium mb-2\">Suggested Duration:</div>\n                            <div className=\"text-sm text-muted-foreground\">{eventTypeInfo.suggestedDuration}</div>\n                          </div>\n\n                          <div>\n                            <div className=\"text-sm font-medium mb-2\">Common Features:</div>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {eventTypeInfo.commonFeatures.map((feature) => (\n                                <Badge key={feature} variant=\"outline\" className=\"text-xs\">\n                                  {feature}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Quick Tips */}\n                    <Card className=\"glass-card\">\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\">💡 Quick Tips</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium mb-1\">Clear Title</div>\n                          <div className=\"text-muted-foreground\">Use action words and be specific about what attendees will learn or build.</div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"text-sm\">\n                          <div className=\"font-medium mb-1\">Optimal Duration</div>\n                          <div className=\"text-muted-foreground\">Match your event length to the content depth and audience attention span.</div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"text-sm\">\n                          <div className=\"font-medium mb-1\">Pricing Strategy</div>\n                          <div className=\"text-muted-foreground\">Free events get more signups, but paid events tend to have better attendance.</div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-primary text-primary-foreground px-8\"\n                    data-testid=\"button-continue-to-builder\"\n                  >\n                    Continue to Builder\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n\n          {/* Page Builder Step */}\n          {currentStep === 'builder' && (\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* Component Library */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Plus className=\"w-5 h-5 text-primary\" />\n                    Component Library\n                  </CardTitle>\n                  <CardDescription>\n                    Drag components to build your event page\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {builderComponents.map((component) => (\n                    <div\n                      key={component.id}\n                      className={`p-3 rounded-lg border-2 border-dashed cursor-pointer transition-colors ${\n                        activeComponents.includes(component.id)\n                          ? 'border-primary bg-primary/10 opacity-50'\n                          : 'border-border hover:border-primary hover:bg-primary/5'\n                      }`}\n                      onClick={() => addComponent(component.id)}\n                      data-testid={`component-${component.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-xl\">{component.icon}</span>\n                        <div>\n                          <div className=\"font-medium text-sm\">{component.title}</div>\n                          {component.required && (\n                            <div className=\"text-xs text-primary\">Required</div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-semibold text-sm\">AI Templates</h4>\n                    <div className=\"space-y-2\">\n                      <button\n                        type=\"button\"\n                        className=\"w-full p-3 text-left rounded-lg bg-primary/10 border border-primary/20 hover:bg-primary/20 transition-colors\"\n                        data-testid=\"template-hackathon\"\n                      >\n                        <div className=\"font-medium text-primary text-sm\">Hackathon Template</div>\n                        <div className=\"text-xs text-muted-foreground\">Registration, teams, submissions</div>\n                      </button>\n                      \n                      <button\n                        type=\"button\"\n                        className=\"w-full p-3 text-left rounded-lg bg-accent/10 border border-accent/20 hover:bg-accent/20 transition-colors\"\n                        data-testid=\"template-workshop\"\n                      >\n                        <div className=\"font-medium text-accent text-sm\">Workshop Template</div>\n                        <div className=\"text-xs text-muted-foreground\">Sessions, materials, certificates</div>\n                      </button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Canvas */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"glass-card\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Palette className=\"w-5 h-5 text-accent\" />\n                        Event Page Builder\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-preview-page\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          Preview\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-reset-builder\">\n                          Reset\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"min-h-96 border-2 border-dashed border-border rounded-xl p-6 bg-secondary/5\">\n                      {activeComponents.length === 0 ? (\n                        <div className=\"text-center text-muted-foreground py-16\">\n                          <div className=\"text-6xl mb-4\">🏗️</div>\n                          <h3 className=\"text-xl font-semibold mb-2\">Start Building Your Event Page</h3>\n                          <p className=\"mb-6\">Drag components from the library to create your event page</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {activeComponents.map((componentId, index) => {\n                            const component = builderComponents.find(c => c.id === componentId);\n                            if (!component) return null;\n                            \n                            return (\n                              <div\n                                key={`${componentId}-${index}`}\n                                className=\"group p-4 bg-card rounded-lg border border-border relative\"\n                                data-testid={`active-component-${componentId}`}\n                              >\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <GripVertical className=\"w-4 h-4 text-muted-foreground cursor-move\" />\n                                    <span className=\"text-lg\">{component.icon}</span>\n                                    <h4 className=\"font-semibold\">{component.title}</h4>\n                                  </div>\n                                  <div className=\"flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${componentId}`}>\n                                      <Settings className=\"w-4 h-4\" />\n                                    </Button>\n                                    {!component.required && (\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={() => removeComponent(componentId)}\n                                        data-testid={`button-remove-${componentId}`}\n                                      >\n                                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n                                \n                                {/* Component Preview */}\n                                <div className=\"mt-4 p-4 bg-background rounded border-2 border-dashed border-muted\">\n                                  {componentId === 'header' && (\n                                    <div className=\"text-center\">\n                                      <h1 className=\"text-2xl font-bold mb-2\">{form.getValues('title') || 'Event Title'}</h1>\n                                      <div className=\"flex justify-center items-center gap-4 text-sm text-muted-foreground\">\n                                        <span className=\"flex items-center gap-1\">\n                                          <Calendar className=\"w-4 h-4\" />\n                                          {form.getValues('startDate') ? new Date(form.getValues('startDate')).toLocaleDateString() : 'Date TBD'}\n                                        </span>\n                                        <span className=\"flex items-center gap-1\">\n                                          <MapPin className=\"w-4 h-4\" />\n                                          {form.getValues('location') || 'Location TBD'}\n                                        </span>\n                                      </div>\n                                    </div>\n                                  )}\n                                  \n                                  {componentId === 'description' && (\n                                    <div className=\"space-y-2\">\n                                      <h3 className=\"font-semibold\">About This Event</h3>\n                                      <p className=\"text-muted-foreground\">\n                                        {form.getValues('description') || 'Event description will appear here...'}\n                                      </p>\n                                    </div>\n                                  )}\n                                  \n                                  {componentId === 'registration' && (\n                                    <div className=\"space-y-4\">\n                                      <h3 className=\"font-semibold\">Registration</h3>\n                                      <div className=\"space-y-2\">\n                                        <Input placeholder=\"Full Name\" />\n                                        <Input placeholder=\"Email Address\" />\n                                        <Button className=\"w-full\">\n                                          Register {form.getValues('registrationFee') > 0 && `- $${form.getValues('registrationFee')}`}\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  )}\n                                  \n                                  {componentId === 'schedule' && (\n                                    <div className=\"space-y-4\">\n                                      <h3 className=\"font-semibold\">Event Schedule</h3>\n                                      <div className=\"space-y-2\">\n                                        <div className=\"flex items-center gap-3 p-2 border rounded\">\n                                          <Clock className=\"w-4 h-4\" />\n                                          <div>\n                                            <div className=\"font-medium\">Opening Ceremony</div>\n                                            <div className=\"text-sm text-muted-foreground\">9:00 AM - 9:30 AM</div>\n                                          </div>\n                                        </div>\n                                        <div className=\"flex items-center gap-3 p-2 border rounded\">\n                                          <Clock className=\"w-4 h-4\" />\n                                          <div>\n                                            <div className=\"font-medium\">Main Event</div>\n                                            <div className=\"text-sm text-muted-foreground\">9:30 AM - 5:00 PM</div>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  )}\n                                  \n                                  {(componentId === 'speakers' || componentId === 'sponsors') && (\n                                    <div className=\"text-center py-8 text-muted-foreground\">\n                                      <span className=\"text-4xl mb-2 block\">{component.icon}</span>\n                                      <p>Configure {component.title.toLowerCase()} in the next step</p>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"flex justify-between mt-6\">\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setCurrentStep('basic')}\n                    data-testid=\"button-back-to-basic\"\n                  >\n                    ← Back to Basic Info\n                  </Button>\n                  <Button \n                    onClick={() => setCurrentStep('preview')}\n                    className=\"bg-primary text-primary-foreground\"\n                    data-testid=\"button-continue-to-preview\"\n                  >\n                    Continue to Preview\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Preview Step */}\n          {currentStep === 'preview' && (\n            <div className=\"space-y-8\">\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Eye className=\"w-5 h-5 text-primary\" />\n                      Event Preview\n                    </CardTitle>\n                    <div className=\"flex items-center gap-4\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setCurrentStep('builder')}\n                        data-testid=\"button-back-to-builder\"\n                      >\n                        ← Edit Page\n                      </Button>\n                      <Button\n                        onClick={form.handleSubmit(onSubmit)}\n                        disabled={createEventMutation.isPending}\n                        className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90\"\n                        data-testid=\"button-publish-event\"\n                      >\n                        {createEventMutation.isPending ? (\n                          <>\n                            <div className=\"spinner w-4 h-4 mr-2\"></div>\n                            Publishing...\n                          </>\n                        ) : (\n                          <>\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Publish Event\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-background border rounded-xl p-8 min-h-96\">\n                    <div className=\"max-w-4xl mx-auto space-y-12\">\n                      {/* Header Preview */}\n                      <div className=\"text-center space-y-6\">\n                        <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary\">\n                          <span className=\"text-2xl\">{eventTypes.find(t => t.value === form.getValues('type'))?.icon}</span>\n                          <span className=\"font-medium capitalize\">{form.getValues('type')}</span>\n                        </div>\n                        \n                        <h1 className=\"text-4xl font-bold\">{form.getValues('title')}</h1>\n                        \n                        <div className=\"flex flex-wrap justify-center items-center gap-6 text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Calendar className=\"w-5 h-5\" />\n                            <span>\n                              {form.getValues('startDate') && new Date(form.getValues('startDate')).toLocaleDateString()}\n                              {form.getValues('endDate') && form.getValues('startDate') !== form.getValues('endDate') && \n                                ` - ${new Date(form.getValues('endDate')).toLocaleDateString()}`\n                              }\n                            </span>\n                          </div>\n                          {form.getValues('location') && (\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"w-5 h-5\" />\n                              <span>{form.getValues('location')}</span>\n                            </div>\n                          )}\n                          {form.getValues('maxParticipants') && (\n                            <div className=\"flex items-center gap-2\">\n                              <Users className=\"w-5 h-5\" />\n                              <span>Up to {form.getValues('maxParticipants')} participants</span>\n                            </div>\n                          )}\n                          {form.getValues('prizePool') && parseFloat(form.getValues('prizePool').toString()) > 0 && (\n                            <div className=\"flex items-center gap-2\">\n                              <DollarSign className=\"w-5 h-5\" />\n                              <span>${form.getValues('prizePool')} prize pool</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Description */}\n                      {form.getValues('description') && (\n                        <div className=\"prose prose-invert max-w-none\">\n                          <h2 className=\"text-2xl font-bold mb-4\">About This Event</h2>\n                          <p className=\"text-muted-foreground leading-relaxed\">\n                            {form.getValues('description')}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Registration Section */}\n                      <Card className=\"bg-primary/5 border-primary/20\">\n                        <CardContent className=\"p-8\">\n                          <h2 className=\"text-2xl font-bold mb-6 text-center\">Ready to Join?</h2>\n                          <div className=\"max-w-md mx-auto space-y-4\">\n                            <div className=\"text-center mb-6\">\n                              {form.getValues('registrationFee') > 0 ? (\n                                <div className=\"text-3xl font-bold text-primary\">\n                                  ${form.getValues('registrationFee')}\n                                </div>\n                              ) : (\n                                <div className=\"text-3xl font-bold text-chart-4\">\n                                  FREE\n                                </div>\n                              )}\n                            </div>\n                            <Button className=\"w-full bg-primary text-primary-foreground py-3 text-lg\" data-testid=\"button-register-preview\">\n                              Register Now\n                            </Button>\n                            <p className=\"text-center text-sm text-muted-foreground\">\n                              Join hundreds of other participants\n                            </p>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Requirements */}\n                      {form.getValues('requirements').length > 0 && (\n                        <div>\n                          <h2 className=\"text-2xl font-bold mb-4\">Requirements</h2>\n                          <ul className=\"space-y-2\">\n                            {form.getValues('requirements').map((req, index) => (\n                              <li key={index} className=\"flex items-start gap-2\">\n                                <span className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></span>\n                                <span className=\"text-muted-foreground\">{req}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":47632},"client/src/pages/Events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Calendar, \n  Users, \n  DollarSign, \n  MapPin,\n  Clock,\n  Trophy,\n  Star,\n  Bookmark,\n  Share,\n  Play\n} from \"lucide-react\";\n\ninterface Event {\n  id: string;\n  title: string;\n  description: string;\n  type: 'hackathon' | 'workshop' | 'quiz' | 'conference' | 'networking';\n  status: 'draft' | 'published' | 'live' | 'completed' | 'cancelled';\n  startDate: string;\n  endDate: string;\n  location?: string;\n  isVirtual: boolean;\n  maxParticipants?: number;\n  registrationFee: string;\n  prizePool: string;\n  tags?: string[];\n  imageUrl?: string;\n  organizerId: string;\n}\n\nexport default function Events() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [activeTab, setActiveTab] = useState(\"discover\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: events, isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/events\", { search: searchQuery, type: selectedType === \"all\" ? undefined : selectedType }],\n  });\n\n  const { data: userEvents } = useQuery<Event[]>({\n    queryKey: [\"/api/events\", \"user\"],\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      await apiRequest(\"POST\", `/api/events/${eventId}/register`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Successfully registered for event!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const eventTypes = [\n    { value: \"all\", label: \"All Events\", icon: Calendar },\n    { value: \"hackathon\", label: \"Hackathons\", icon: Trophy },\n    { value: \"workshop\", label: \"Workshops\", icon: Users },\n    { value: \"quiz\", label: \"Quizzes\", icon: Star },\n    { value: \"conference\", label: \"Conferences\", icon: Play },\n  ];\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'hackathon':\n        return 'bg-primary/20 text-primary border-primary/30';\n      case 'workshop':\n        return 'bg-accent/20 text-accent border-accent/30';\n      case 'quiz':\n        return 'bg-chart-3/20 text-chart-3 border-chart-3/30';\n      case 'conference':\n        return 'bg-chart-4/20 text-chart-4 border-chart-4/30';\n      default:\n        return 'bg-muted text-muted-foreground border-border';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live':\n        return 'bg-red-500 text-white';\n      case 'published':\n        return 'bg-green-500 text-white';\n      case 'completed':\n        return 'bg-muted text-muted-foreground';\n      default:\n        return 'bg-yellow-500 text-white';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const EventCard = ({ event }: { event: Event }) => (\n    <Card className=\"glass-card hover-lift group\">\n      <div className=\"relative\">\n        <div className=\"w-full h-48 bg-gradient-to-br from-primary/20 to-accent/20 rounded-t-xl flex items-center justify-center\">\n          {event.imageUrl ? (\n            <img src={event.imageUrl} alt={event.title} className=\"w-full h-full object-cover rounded-t-xl\" />\n          ) : (\n            <div className=\"text-center\">\n              <Calendar className=\"h-12 w-12 text-primary mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">{event.type.charAt(0).toUpperCase() + event.type.slice(1)}</p>\n            </div>\n          )}\n        </div>\n        <div className=\"absolute top-4 left-4 flex gap-2\">\n          <Badge className={getEventTypeColor(event.type)}>\n            {event.type.charAt(0).toUpperCase() + event.type.slice(1)}\n          </Badge>\n          <Badge className={getStatusColor(event.status)}>\n            {event.status === 'live' && <div className=\"w-2 h-2 bg-white rounded-full mr-1 animate-pulse\" />}\n            {event.status.toUpperCase()}\n          </Badge>\n        </div>\n      </div>\n\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-bold mb-2 group-hover:text-primary transition-colors\">\n          {event.title}\n        </h3>\n        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\">\n          {event.description}\n        </p>\n\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            <span>{formatDate(event.startDate)} - {formatDate(event.endDate)}</span>\n          </div>\n          {event.location && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n              <span>{event.location}</span>\n            </div>\n          )}\n          {event.isVirtual && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Play className=\"h-4 w-4 text-chart-3\" />\n              <span className=\"text-chart-3\">Virtual Event</span>\n            </div>\n          )}\n          {event.maxParticipants && (\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n              <span>{event.maxParticipants} participants max</span>\n            </div>\n          )}\n        </div>\n\n        {event.tags && event.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {event.tags.slice(0, 3).map((tag) => (\n              <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {event.tags.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{event.tags.length - 3} more\n              </Badge>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            {parseFloat(event.registrationFee) > 0 ? (\n              <span className=\"text-lg font-bold text-primary\">${event.registrationFee}</span>\n            ) : (\n              <span className=\"text-lg font-bold text-chart-4\">Free</span>\n            )}\n            {parseFloat(event.prizePool) > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <Trophy className=\"h-4 w-4 text-chart-5\" />\n                <span className=\"text-sm font-medium text-chart-5\">${event.prizePool}</span>\n              </div>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Bookmark className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Share className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              onClick={() => registerMutation.mutate(event.id)}\n              disabled={registerMutation.isPending}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            >\n              {event.status === 'live' ? 'Join Now' : 'Register'}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-20\">\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"h-48 bg-muted rounded-t-xl\" />\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded w-3/4 mb-2\" />\n                  <div className=\"h-4 bg-muted rounded w-full mb-4\" />\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded w-1/2\" />\n                    <div className=\"h-3 bg-muted rounded w-2/3\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            Discover <span className=\"gradient-text\">Amazing Events</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            AI-curated events tailored to your interests, skills, and career goals\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n              <div className=\"flex items-center gap-2 flex-1\">\n                <Search className=\"h-5 w-5 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search events, skills, or organizers...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"flex-1\"\n                />\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <Button variant=\"outline\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  More Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Event Type Filters */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {eventTypes.map((type) => {\n            const Icon = type.icon;\n            return (\n              <Button\n                key={type.value}\n                variant={selectedType === type.value ? \"default\" : \"outline\"}\n                onClick={() => setSelectedType(type.value)}\n                className=\"flex items-center gap-2\"\n              >\n                <Icon className=\"h-4 w-4\" />\n                {type.label}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-8\">\n            <TabsTrigger value=\"discover\">Discover</TabsTrigger>\n            <TabsTrigger value=\"my-events\">My Events</TabsTrigger>\n            <TabsTrigger value=\"recommendations\">AI Recommendations</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"discover\">\n            {/* Featured Event */}\n            {events && events.length > 0 && (\n              <Card className=\"mb-12 bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Badge className=\"bg-red-500 text-white\">\n                      <div className=\"w-2 h-2 bg-white rounded-full mr-2 animate-pulse\" />\n                      LIVE NOW\n                    </Badge>\n                    <Badge className=\"bg-gradient-to-r from-primary to-accent text-white\">\n                      FEATURED\n                    </Badge>\n                  </div>\n                  <div className=\"grid lg:grid-cols-2 gap-8 items-center\">\n                    <div>\n                      <h2 className=\"text-3xl font-bold mb-4\">{events[0].title}</h2>\n                      <p className=\"text-muted-foreground mb-6 text-lg\">\n                        {events[0].description}\n                      </p>\n                      <div className=\"flex flex-wrap items-center gap-4 mb-6\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Calendar className=\"h-4 w-4 text-primary\" />\n                          <span>{formatDate(events[0].startDate)}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Users className=\"h-4 w-4 text-accent\" />\n                          <span>{events[0].maxParticipants} registered</span>\n                        </div>\n                        {parseFloat(events[0].prizePool) > 0 && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Trophy className=\"h-4 w-4 text-chart-5\" />\n                            <span>${events[0].prizePool} prizes</span>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <Button\n                          onClick={() => registerMutation.mutate(events[0].id)}\n                          disabled={registerMutation.isPending}\n                          className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90\"\n                        >\n                          Join Live Stream\n                        </Button>\n                        <Button variant=\"outline\">\n                          Learn More\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"relative\">\n                      <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-accent/20 rounded-2xl flex items-center justify-center\">\n                        <Play className=\"h-16 w-16 text-primary\" />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Events Grid */}\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {events?.map((event) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n\n            {events?.length === 0 && (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No events found</h3>\n                <p className=\"text-muted-foreground\">Try adjusting your search or filters</p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"my-events\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {userEvents?.map((event) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n\n            {userEvents?.length === 0 && (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No registered events</h3>\n                <p className=\"text-muted-foreground\">Start by discovering and registering for events</p>\n                <Button onClick={() => setActiveTab(\"discover\")} className=\"mt-4\">\n                  Discover Events\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"recommendations\">\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">AI Recommendations Coming Soon</h3>\n              <p className=\"text-muted-foreground\">We're building personalized event recommendations for you</p>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Floating Action Button */}\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button className=\"fixed bottom-8 right-8 w-14 h-14 rounded-full shadow-lg z-50\">\n              <Plus className=\"h-6 w-6\" />\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Event</DialogTitle>\n            </DialogHeader>\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Event creation wizard coming soon!</p>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17012},"client/src/pages/EventsPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { EventCard } from '@/components/EventCard';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { Event } from '@/types';\nimport { Search, Filter, Plus, Calendar, Users, Trophy, BookOpen } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function EventsPage() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: events = [], isLoading, error } = useQuery<Event[]>({\n    queryKey: ['/api/events', selectedType, selectedStatus],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedType !== 'all') params.append('type', selectedType);\n      if (selectedStatus !== 'all') params.append('status', selectedStatus);\n      \n      const response = await fetch(`/api/events?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch events');\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      return apiRequest('POST', `/api/events/${eventId}/register`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Registration Successful\",\n        description: \"You have been registered for this event!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Registration Failed\",\n        description: \"Failed to register for event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredEvents = events.filter(event => {\n    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         event.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  const eventCategories = [\n    { id: 'all', label: 'All Events', icon: '📅', count: events.length },\n    { id: 'hackathon', label: 'Hackathons', icon: '💻', count: events.filter(e => e.type === 'hackathon').length },\n    { id: 'workshop', label: 'Workshops', icon: '🛠️', count: events.filter(e => e.type === 'workshop').length },\n    { id: 'conference', label: 'Conferences', icon: '🎤', count: events.filter(e => e.type === 'conference').length },\n    { id: 'quiz', label: 'Quizzes', icon: '❓', count: events.filter(e => e.type === 'quiz').length },\n  ];\n\n  const liveEvents = events.filter(e => e.status === 'live');\n  const upcomingEvents = events.filter(e => e.status === 'upcoming');\n  const featuredEvent = upcomingEvents.find(e => e.prizePool && parseFloat(e.prizePool) > 1000);\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-12 gap-6\">\n            <div>\n              <h1 className=\"text-5xl font-bold mb-4\">\n                Discover <span className=\"gradient-text\">Amazing Events</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-3xl\">\n                AI-curated events tailored to your interests, skills, and career goals\n              </p>\n            </div>\n            \n            <Link href=\"/event-builder\">\n              <Button className=\"bg-gradient-to-r from-secondary to-primary text-white hover:opacity-90 transition duration-300\" data-testid=\"button-create-event\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Event\n              </Button>\n            </Link>\n          </div>\n\n          {/* Live Events Alert */}\n          {liveEvents.length > 0 && (\n            <div className=\"mb-8\">\n              <Card className=\"border-red-500/50 bg-red-500/10\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full live-indicator\"></div>\n                    <div>\n                      <h3 className=\"font-semibold text-red-500\">🔴 Live Events Now</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {liveEvents.length} event{liveEvents.length > 1 ? 's are' : ' is'} currently live\n                      </p>\n                    </div>\n                    <div className=\"ml-auto\">\n                      <Button size=\"sm\" className=\"bg-red-500 text-white hover:bg-red-600\" data-testid=\"button-join-live\">\n                        Join Live\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Featured Event */}\n          {featuredEvent && (\n            <div className=\"mb-12\">\n              <Card className=\"glass-card overflow-hidden relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20\"></div>\n                <CardContent className=\"p-8 relative z-10\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Badge className=\"bg-gradient-to-r from-primary to-accent text-white\">\n                      ⭐ FEATURED\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"border-primary text-primary\">\n                      {featuredEvent.type.toUpperCase()}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid lg:grid-cols-2 gap-8 items-center\">\n                    <div>\n                      <h3 className=\"text-3xl font-bold mb-4\">{featuredEvent.title}</h3>\n                      <p className=\"text-muted-foreground mb-6 text-lg\">\n                        {featuredEvent.description}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap items-center gap-4 mb-6\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Calendar className=\"w-4 h-4 text-primary\" />\n                          <span>\n                            {new Date(featuredEvent.startDate).toLocaleDateString('en-US', {\n                              month: 'short',\n                              day: 'numeric',\n                              year: 'numeric'\n                            })}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Trophy className=\"w-4 h-4 text-accent\" />\n                          <span>${featuredEvent.prizePool} prizes</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Users className=\"w-4 h-4 text-chart-3\" />\n                          <span>Open registration</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-4\">\n                        <Button \n                          className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90\"\n                          onClick={() => registerMutation.mutate(featuredEvent.id)}\n                          disabled={registerMutation.isPending}\n                          data-testid={`button-register-${featuredEvent.id}`}\n                        >\n                          {registerMutation.isPending ? 'Registering...' : 'Register Now'}\n                        </Button>\n                        <Button variant=\"outline\" data-testid={`button-learn-more-${featuredEvent.id}`}>\n                          Learn More\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"relative\">\n                      <div className=\"w-full h-80 bg-gradient-to-br from-primary/30 to-accent/30 rounded-2xl flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <div className=\"text-6xl mb-4\">🏆</div>\n                          <div className=\"text-2xl font-bold\">Featured Event</div>\n                          <div className=\"text-muted-foreground\">Premium experience awaits</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Filters */}\n          <div className=\"glass-card p-6 rounded-2xl mb-12\">\n            <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n              <div className=\"flex items-center gap-2 flex-1\">\n                <Search className=\"text-muted-foreground w-5 h-5\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search events, skills, or organizers...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"bg-transparent border-none outline-none text-foreground placeholder-muted-foreground\"\n                  data-testid=\"input-search-events\"\n                />\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <Select value={selectedType} onValueChange={setSelectedType}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-event-type\">\n                    <SelectValue placeholder=\"Event Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"hackathon\">Hackathons</SelectItem>\n                    <SelectItem value=\"workshop\">Workshops</SelectItem>\n                    <SelectItem value=\"conference\">Conferences</SelectItem>\n                    <SelectItem value=\"quiz\">Competitions</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-event-status\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n                    <SelectItem value=\"live\">Live</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Button variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"button-more-filters\">\n                  <Filter className=\"w-4 h-4\" />\n                  More Filters\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Event Categories */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {eventCategories.map((category) => (\n              <button\n                key={category.id}\n                onClick={() => setSelectedType(category.id)}\n                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 flex items-center gap-2 ${\n                  selectedType === category.id\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-transparent border border-border text-foreground hover:border-primary hover:text-primary'\n                }`}\n                data-testid={`filter-${category.id}`}\n              >\n                <span>{category.icon}</span>\n                <span>{category.label}</span>\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                  {category.count}\n                </Badge>\n              </button>\n            ))}\n          </div>\n\n          {/* Events Grid */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedType === 'all' ? 'All Events' : `${selectedType.charAt(0).toUpperCase() + selectedType.slice(1)} Events`}\n              </h2>\n              <div className=\"text-sm text-muted-foreground\">\n                {filteredEvents.length} event{filteredEvents.length !== 1 ? 's' : ''} found\n              </div>\n            </div>\n\n            {filteredEvents.length > 0 ? (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {filteredEvents.map((event) => (\n                  <EventCard\n                    key={event.id}\n                    event={event}\n                    onRegister={() => registerMutation.mutate(event.id)}\n                    isRegistering={registerMutation.isPending}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"text-6xl mb-6\">🔍</div>\n                <h3 className=\"text-2xl font-bold mb-2\">No events found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {searchTerm \n                    ? `No events match \"${searchTerm}\". Try adjusting your search or filters.`\n                    : 'No events match your current filters. Try adjusting your criteria.'\n                  }\n                </p>\n                <div className=\"flex justify-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSearchTerm('');\n                      setSelectedType('all');\n                      setSelectedStatus('all');\n                    }}\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear Filters\n                  </Button>\n                  <Link href=\"/event-builder\">\n                    <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-first-event\">\n                      Create First Event\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Load More */}\n          {filteredEvents.length > 0 && filteredEvents.length >= 12 && (\n            <div className=\"text-center\">\n              <Button variant=\"outline\" className=\"px-8\" data-testid=\"button-load-more\">\n                Load More Events\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16438},"client/src/pages/Home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Dashboard from \"@/components/Dashboard\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center pt-20\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <Dashboard />\n    </div>\n  );\n}\n","size_bytes":987},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport ThreeBackground from \"@/components/ThreeBackground\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center text-center overflow-hidden\">\n        <ThreeBackground />\n        \n        <div className=\"relative z-10 px-6 max-w-7xl mx-auto\">\n          <div className=\"inline-flex items-center px-4 py-2 rounded-full glass-card mb-6\">\n            <span className=\"w-2 h-2 bg-accent rounded-full mr-2 live-indicator\"></span>\n            <span className=\"text-sm font-medium\">🚀 New: AI-Powered Team Matching Now Live</span>\n          </div>\n          \n          <h1 className=\"text-6xl md:text-8xl font-black leading-tight mb-6\">\n            The Future of <br />\n            <span className=\"gradient-text\">Event Experiences</span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground max-w-4xl mx-auto mb-12 leading-relaxed\">\n            Revolutionary platform with AI-driven personalization, immersive virtual experiences, \n            and real-time collaboration tools that redefine how events are created and experienced.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row justify-center gap-4 mb-16\">\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              size=\"lg\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-4\"\n              data-testid=\"get-started-button\"\n            >\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" />\n              </svg>\n              Get Started\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-2 border-primary text-foreground hover:bg-primary/10 text-lg px-8 py-4\"\n              onClick={() => document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' })}\n            >\n              <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n              </svg>\n              Watch Demo\n            </Button>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto glass-card p-8 rounded-2xl\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl md:text-4xl font-bold gradient-text\">50K+</div>\n              <div className=\"text-muted-foreground text-sm\">Active Users</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl md:text-4xl font-bold gradient-text\">1.2K+</div>\n              <div className=\"text-muted-foreground text-sm\">Events Hosted</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl md:text-4xl font-bold gradient-text\">98%</div>\n              <div className=\"text-muted-foreground text-sm\">Satisfaction Rate</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl md:text-4xl font-bold gradient-text\">24/7</div>\n              <div className=\"text-muted-foreground text-sm\">AI Support</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Preview Section */}\n      <section id=\"features\" className=\"py-20 bg-secondary/20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl font-bold mb-4\">Why Choose <span className=\"gradient-text\">Nexus?</span></h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Discover the advanced features that make Nexus the ultimate event management platform\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {/* AI-Powered Features */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">AI-Powered Matching</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Smart algorithms match participants for optimal team formation and recommend personalized events.\n              </p>\n              <div className=\"text-sm text-primary font-medium\">Learn More →</div>\n            </div>\n\n            {/* Real-time Collaboration */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-accent/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Real-time Collaboration</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Live chat, file sharing, virtual whiteboards, and integrated code editors for seamless teamwork.\n              </p>\n              <div className=\"text-sm text-accent font-medium\">Explore Tools →</div>\n            </div>\n\n            {/* VR/AR Integration */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-chart-3/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-chart-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">VR/AR Integration</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Immersive virtual events with VR support, AR overlays, and 3D interactive environments.\n              </p>\n              <div className=\"text-sm text-chart-3 font-medium\">Try VR Demo →</div>\n            </div>\n\n            {/* Analytics Dashboard */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-chart-4/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-chart-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Advanced Analytics</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Comprehensive insights with real-time metrics, predictive analytics, and detailed reporting.\n              </p>\n              <div className=\"text-sm text-chart-4 font-medium\">View Dashboard →</div>\n            </div>\n\n            {/* Drag & Drop Builder */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-chart-5/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-chart-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v14a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v14a4 4 0 004 4h4a2 2 0 002-2V5z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Visual Event Builder</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Intuitive drag-and-drop interface with AI-suggested layouts and customizable themes.\n              </p>\n              <div className=\"text-sm text-chart-5 font-medium\">Start Building →</div>\n            </div>\n\n            {/* Payment Processing */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Secure Payments</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Integrated payment processing with multiple gateways, subscription management, and financial analytics.\n              </p>\n              <div className=\"text-sm text-primary font-medium\">Setup Payments →</div>\n            </div>\n\n            {/* Mobile PWA */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-accent/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-accent\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Progressive Web App</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Mobile-first design with offline capabilities, push notifications, and native-like performance.\n              </p>\n              <div className=\"text-sm text-accent font-medium\">Install App →</div>\n            </div>\n\n            {/* Security & Privacy */}\n            <div className=\"glass-card p-6 rounded-xl feature-card\">\n              <div className=\"w-12 h-12 bg-chart-3/20 rounded-xl flex items-center justify-center mb-4\">\n                <svg className=\"w-6 h-6 text-chart-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Enterprise Security</h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                End-to-end encryption, role-based access control, and GDPR/CCPA compliance for secure events.\n              </p>\n              <div className=\"text-sm text-chart-3 font-medium\">Security Details →</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-4\">Ready to Transform Your Events?</h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of organizers who are already using Nexus to create unforgettable experiences.\n          </p>\n          <Button \n            onClick={() => window.location.href = \"/api/login\"}\n            size=\"lg\"\n            className=\"bg-gradient-to-r from-primary to-accent text-white hover:opacity-90 text-lg px-12 py-4\"\n          >\n            Start Your Journey\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":13123},"client/src/pages/PaymentPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport PaymentForm from '@/components/PaymentForm';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Event } from '@/types';\nimport { Calendar, MapPin, Users, Shield, CreditCard } from 'lucide-react';\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nexport default function PaymentPage() {\n  const { eventId } = useParams();\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: event, isLoading: eventLoading } = useQuery<Event>({\n    queryKey: ['/api/events', eventId],\n    queryFn: async () => {\n      const response = await fetch(`/api/events/${eventId}`);\n      if (!response.ok) throw new Error('Failed to fetch event');\n      return response.json();\n    },\n    enabled: !!eventId && !!user,\n  });\n\n  useEffect(() => {\n    if (event && user && !clientSecret) {\n      // Create PaymentIntent when component mounts\n      fetch(\"/api/create-payment-intent\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          eventId: event.id, \n          amount: parseFloat(event.registrationFee.toString()) \n        }),\n        credentials: \"include\",\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.clientSecret) {\n            setClientSecret(data.clientSecret);\n          } else {\n            toast({\n              title: \"Payment Setup Failed\",\n              description: \"Unable to initialize payment. Please try again.\",\n              variant: \"destructive\",\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error setting up payment:\", error);\n          toast({\n            title: \"Payment Error\",\n            description: \"Failed to setup payment. Please try again.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [event, user, clientSecret, toast]);\n\n  if (authLoading || eventLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!event) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 pb-12\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center py-16\">\n              <div className=\"text-6xl mb-6\">❌</div>\n              <h1 className=\"text-3xl font-bold mb-4\">Event Not Found</h1>\n              <p className=\"text-muted-foreground mb-8\">\n                The event you're looking for doesn't exist or has been removed.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const registrationFee = parseFloat(event.registrationFee.toString());\n\n  if (registrationFee === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 pb-12\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center py-16\">\n              <div className=\"text-6xl mb-6\">🎉</div>\n              <h1 className=\"text-3xl font-bold mb-4\">Free Event</h1>\n              <p className=\"text-muted-foreground mb-8\">\n                This is a free event. No payment is required for registration.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6 max-w-6xl\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              Complete Your <span className=\"gradient-text\">Registration</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Secure payment processing powered by Stripe\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Event Summary */}\n            <div className=\"space-y-6\">\n              {/* Event Details */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-5 h-5 text-primary\" />\n                    Event Summary\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold mb-2\">{event.title}</h3>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {event.type}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {event.status}\n                      </Badge>\n                    </div>\n                    {event.description && (\n                      <p className=\"text-muted-foreground\">{event.description}</p>\n                    )}\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 text-sm\">\n                      <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>\n                        {new Date(event.startDate).toLocaleDateString('en-US', {\n                          weekday: 'long',\n                          year: 'numeric',\n                          month: 'long',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                        })}\n                      </span>\n                    </div>\n                    \n                    {event.location && (\n                      <div className=\"flex items-center gap-3 text-sm\">\n                        <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>{event.location}</span>\n                      </div>\n                    )}\n\n                    {event.maxParticipants && (\n                      <div className=\"flex items-center gap-3 text-sm\">\n                        <Users className=\"w-4 h-4 text-muted-foreground\" />\n                        <span>Limited to {event.maxParticipants} participants</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {event.tags && event.tags.length > 0 && (\n                    <>\n                      <Separator />\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Topics Covered</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {event.tags.map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </>\n                  )}\n\n                  {event.requirements && event.requirements.length > 0 && (\n                    <>\n                      <Separator />\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Requirements</h4>\n                        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                          {event.requirements.map((req, index) => (\n                            <li key={index} className=\"flex items-start gap-2\">\n                              <span className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\"></span>\n                              {req}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Pricing Breakdown */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"w-5 h-5 text-chart-4\" />\n                    Pricing Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Event Registration</span>\n                    <span className=\"font-semibold\">${registrationFee.toFixed(2)}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <span>Processing Fee</span>\n                    <span>Included</span>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between text-lg font-bold\">\n                    <span>Total</span>\n                    <span className=\"text-primary\">${registrationFee.toFixed(2)}</span>\n                  </div>\n\n                  <div className=\"bg-chart-4/10 border border-chart-4/20 rounded-lg p-3 mt-4\">\n                    <div className=\"flex items-center gap-2 text-chart-4 text-sm font-medium mb-1\">\n                      <Shield className=\"w-4 h-4\" />\n                      What's Included\n                    </div>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>✅ Full event access</li>\n                      <li>✅ All materials and resources</li>\n                      <li>✅ Certificate of completion</li>\n                      <li>✅ Networking opportunities</li>\n                      {event.prizePool && parseFloat(event.prizePool.toString()) > 0 && (\n                        <li>✅ Eligibility for ${event.prizePool} prize pool</li>\n                      )}\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Security Notice */}\n              <Card className=\"glass-card border-primary/20 bg-primary/5\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <Shield className=\"w-6 h-6 text-primary\" />\n                    <h4 className=\"font-semibold text-primary\">Secure Payment</h4>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Your payment information is encrypted and processed securely by Stripe. \n                    We never store your credit card details on our servers.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Payment Form */}\n            <div>\n              <Card className=\"glass-card payment-form\">\n                <CardHeader>\n                  <CardTitle>Payment Information</CardTitle>\n                  <CardDescription>\n                    Complete your registration with secure payment\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {clientSecret ? (\n                    <Elements stripe={stripePromise} options={{ clientSecret }}>\n                      <PaymentForm \n                        eventId={event.id}\n                        eventTitle={event.title}\n                        initialAmount={registrationFee}\n                        onSuccess={() => {\n                          toast({\n                            title: \"Payment Successful!\",\n                            description: \"Your registration has been completed.\",\n                          });\n                          window.location.href = `/events/${event.id}`;\n                        }}\n                      />\n                    </Elements>\n                  ) : (\n                    <div className=\"flex items-center justify-center py-16\">\n                      <div className=\"text-center\">\n                        <div className=\"spinner w-8 h-8 mx-auto mb-4\"></div>\n                        <p className=\"text-muted-foreground\">Setting up secure payment...</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13548},"client/src/pages/Payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport PaymentForm from \"@/components/PaymentForm\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  CreditCard, \n  DollarSign, \n  TrendingUp, \n  Users, \n  Download,\n  Plus,\n  Building,\n  Calendar,\n  CheckCircle,\n  Clock,\n  XCircle\n} from \"lucide-react\";\n\ninterface Transaction {\n  id: string;\n  type: 'registration' | 'sponsorship' | 'subscription';\n  description: string;\n  amount: number;\n  status: 'completed' | 'pending' | 'failed';\n  date: string;\n  eventTitle?: string;\n}\n\ninterface RevenueData {\n  totalRevenue: number;\n  monthlyRevenue: number;\n  registrationFees: number;\n  sponsorships: number;\n  premiumFeatures: number;\n}\n\ninterface Sponsor {\n  id: string;\n  name: string;\n  tier: 'platinum' | 'gold' | 'silver';\n  amount: number;\n  status: 'paid' | 'pending' | 'overdue';\n  logo?: string;\n}\n\nexport default function Payments() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<string | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data - in production this would come from API\n  const mockRevenueData: RevenueData = {\n    totalRevenue: 248000,\n    monthlyRevenue: 89000,\n    registrationFees: 168000,\n    sponsorships: 72000,\n    premiumFeatures: 8000,\n  };\n\n  const mockTransactions: Transaction[] = [\n    {\n      id: \"1\",\n      type: \"registration\",\n      description: \"AI Hackathon Registration\",\n      amount: 99,\n      status: \"completed\",\n      date: \"2024-12-10T10:30:00Z\",\n      eventTitle: \"AI Innovation Hackathon 2024\"\n    },\n    {\n      id: \"2\",\n      type: \"sponsorship\",\n      description: \"Google Platinum Sponsorship\",\n      amount: 50000,\n      status: \"completed\",\n      date: \"2024-12-09T14:20:00Z\"\n    },\n    {\n      id: \"3\",\n      type: \"registration\",\n      description: \"React Workshop Registration\",\n      amount: 149,\n      status: \"pending\",\n      date: \"2024-12-08T16:45:00Z\",\n      eventTitle: \"React Masterclass\"\n    }\n  ];\n\n  const mockSponsors: Sponsor[] = [\n    {\n      id: \"1\",\n      name: \"Google\",\n      tier: \"platinum\",\n      amount: 50000,\n      status: \"paid\"\n    },\n    {\n      id: \"2\",\n      name: \"Microsoft\",\n      tier: \"gold\",\n      amount: 30000,\n      status: \"paid\"\n    },\n    {\n      id: \"3\",\n      name: \"Amazon\",\n      tier: \"silver\",\n      amount: 15000,\n      status: \"pending\"\n    }\n  ];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n      case 'paid':\n        return 'bg-chart-4/20 text-chart-4';\n      case 'pending':\n        return 'bg-chart-5/20 text-chart-5';\n      case 'failed':\n      case 'overdue':\n        return 'bg-red-500/20 text-red-500';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n      case 'paid':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'failed':\n      case 'overdue':\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case 'platinum':\n        return 'bg-primary/20 text-primary border-primary/30';\n      case 'gold':\n        return 'bg-chart-5/20 text-chart-5 border-chart-5/30';\n      case 'silver':\n        return 'bg-muted text-muted-foreground border-border';\n      default:\n        return 'bg-muted text-muted-foreground border-border';\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setShowPaymentForm(false);\n    toast({\n      title: \"Payment Successful\",\n      description: \"Your payment has been processed successfully!\",\n    });\n    queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            Secure <span className=\"gradient-text\">Payments</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Integrated payment processing, sponsorship management, and financial analytics\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"transactions\" className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Transactions\n            </TabsTrigger>\n            <TabsTrigger value=\"sponsors\" className=\"flex items-center gap-2\">\n              <Building className=\"h-4 w-4\" />\n              Sponsors\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            {/* Revenue Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <DollarSign className=\"h-8 w-8 text-primary\" />\n                    <Badge variant=\"secondary\" className=\"text-chart-4\">+18.9%</Badge>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    {formatCurrency(mockRevenueData.totalRevenue)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Calendar className=\"h-8 w-8 text-accent\" />\n                    <Badge variant=\"secondary\" className=\"text-chart-4\">+12.3%</Badge>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    {formatCurrency(mockRevenueData.monthlyRevenue)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">This Month</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Users className=\"h-8 w-8 text-chart-3\" />\n                    <Badge variant=\"secondary\" className=\"text-chart-4\">+8.7%</Badge>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    {formatCurrency(mockRevenueData.registrationFees)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Registration Fees</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Building className=\"h-8 w-8 text-chart-4\" />\n                    <Badge variant=\"secondary\" className=\"text-chart-4\">+24.1%</Badge>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-2\">\n                    {formatCurrency(mockRevenueData.sponsorships)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Sponsorships</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Revenue Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Registration Fees</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-muted rounded-full h-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: '68%' }}></div>\n                      </div>\n                      <span className=\"font-medium text-sm\">68%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Sponsorships</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-muted rounded-full h-2\">\n                        <div className=\"bg-accent h-2 rounded-full\" style={{ width: '29%' }}></div>\n                      </div>\n                      <span className=\"font-medium text-sm\">29%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Premium Features</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 bg-muted rounded-full h-2\">\n                        <div className=\"bg-chart-3 h-2 rounded-full\" style={{ width: '3%' }}></div>\n                      </div>\n                      <span className=\"font-medium text-sm\">3%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <Dialog open={showPaymentForm} onOpenChange={setShowPaymentForm}>\n                    <DialogTrigger asChild>\n                      <Button className=\"h-20 flex flex-col gap-2\">\n                        <CreditCard className=\"h-6 w-6\" />\n                        Process Payment\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl\">\n                      <DialogHeader>\n                        <DialogTitle>Process Payment</DialogTitle>\n                      </DialogHeader>\n                      <PaymentForm \n                        onSuccess={handlePaymentSuccess}\n                        onCancel={() => setShowPaymentForm(false)}\n                      />\n                    </DialogContent>\n                  </Dialog>\n\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                    <Building className=\"h-6 w-6\" />\n                    Add Sponsor\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                    <Download className=\"h-6 w-6\" />\n                    Export Report\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"transactions\" className=\"space-y-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Recent Transactions</CardTitle>\n                <Button>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockTransactions.map((transaction) => (\n                    <div\n                      key={transaction.id}\n                      className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                          {transaction.type === 'registration' ? (\n                            <Users className=\"h-5 w-5 text-primary\" />\n                          ) : transaction.type === 'sponsorship' ? (\n                            <Building className=\"h-5 w-5 text-accent\" />\n                          ) : (\n                            <CreditCard className=\"h-5 w-5 text-chart-3\" />\n                          )}\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\">{transaction.description}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {formatDate(transaction.date)}\n                          </p>\n                          {transaction.eventTitle && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              Event: {transaction.eventTitle}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-chart-4\">\n                            +{formatCurrency(transaction.amount)}\n                          </div>\n                          <Badge className={getStatusColor(transaction.status)}>\n                            {getStatusIcon(transaction.status)}\n                            <span className=\"ml-1 capitalize\">{transaction.status}</span>\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"sponsors\" className=\"space-y-8\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-bold\">Sponsor Management</h2>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add New Sponsor\n              </Button>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {mockSponsors.map((sponsor) => (\n                <Card key={sponsor.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                        <span className=\"text-white font-bold text-lg\">\n                          {sponsor.name[0]}\n                        </span>\n                      </div>\n                      <Badge className={getTierColor(sponsor.tier)}>\n                        {sponsor.tier.charAt(0).toUpperCase() + sponsor.tier.slice(1)}\n                      </Badge>\n                    </div>\n                    <h3 className=\"font-semibold text-lg mb-2\">{sponsor.name}</h3>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-bold text-chart-4 text-xl\">\n                          {formatCurrency(sponsor.amount)}\n                        </div>\n                        <Badge className={getStatusColor(sponsor.status)}>\n                          {getStatusIcon(sponsor.status)}\n                          <span className=\"ml-1 capitalize\">{sponsor.status}</span>\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <TrendingUp className=\"h-16 w-16 text-primary mb-4 mx-auto\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">Payment Analytics</h3>\n                    <p className=\"text-muted-foreground\">\n                      Comprehensive payment analytics dashboard coming soon\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17869},"client/src/pages/VirtualSpace.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  Monitor, \n  Users, \n  Settings,\n  Volume2,\n  VolumeX,\n  Headphones,\n  Camera,\n  Globe,\n  Zap,\n  Play,\n  Square,\n  BarChart3,\n  MessageSquare,\n  LogOut\n} from \"lucide-react\";\n\nexport default function VirtualSpace() {\n  const [isStreamLive, setIsStreamLive] = useState(true);\n  const [cameraEnabled, setCameraEnabled] = useState(true);\n  const [micEnabled, setMicEnabled] = useState(true);\n  const [screenSharing, setScreenSharing] = useState(false);\n  const [vrMode, setVrMode] = useState(false);\n  const [viewers, setViewers] = useState(1247);\n  const [audioLevel, setAudioLevel] = useState([75]);\n\n  // Mock poll data\n  const [pollData, setPollData] = useState({\n    question: \"What's your favorite frontend framework?\",\n    options: [\n      { name: \"React\", votes: 45, percentage: 45 },\n      { name: \"Vue.js\", votes: 25, percentage: 25 },\n      { name: \"Angular\", votes: 30, percentage: 30 }\n    ],\n    totalVotes: 347,\n    timeRemaining: \"2:34\"\n  });\n\n  const [participants] = useState({\n    vr: 23,\n    ar: 156,\n    web: 1068\n  });\n\n  useEffect(() => {\n    // Simulate viewer count changes\n    const interval = setInterval(() => {\n      setViewers(prev => prev + Math.floor(Math.random() * 10) - 5);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const toggleStream = () => {\n    setIsStreamLive(!isStreamLive);\n  };\n\n  const toggleCamera = () => {\n    setCameraEnabled(!cameraEnabled);\n  };\n\n  const toggleMic = () => {\n    setMicEnabled(!micEnabled);\n  };\n\n  const toggleScreenShare = () => {\n    setScreenSharing(!screenSharing);\n  };\n\n  const toggleVR = () => {\n    setVrMode(!vrMode);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20 virtual-space\">\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            Immersive <span className=\"gradient-text\">Virtual Experiences</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            VR/AR integration, live streaming, interactive environments, and real-time collaboration\n          </p>\n        </div>\n\n        {/* Virtual Event Controls */}\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n          {/* Live Stream Control */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <div className={`w-3 h-3 rounded-full ${isStreamLive ? 'bg-red-500 animate-pulse' : 'bg-muted'}`} />\n                Live Stream Control\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Stream Preview */}\n              <div className=\"bg-black rounded-lg mb-4 relative overflow-hidden aspect-video\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center\">\n                  {isStreamLive ? (\n                    <div className=\"text-center\">\n                      <Video className=\"h-16 w-16 text-white mb-2 mx-auto\" />\n                      <p className=\"text-white text-sm\">Live Stream Active</p>\n                    </div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <VideoOff className=\"h-16 w-16 text-muted-foreground mb-2 mx-auto\" />\n                      <p className=\"text-muted-foreground text-sm\">Stream Offline</p>\n                    </div>\n                  )}\n                </div>\n                {isStreamLive && (\n                  <>\n                    <div className=\"absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded text-xs font-medium flex items-center gap-1\">\n                      <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\" />\n                      LIVE\n                    </div>\n                    <div className=\"absolute bottom-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-xs\">\n                      {viewers.toLocaleString()} viewers\n                    </div>\n                  </>\n                )}\n              </div>\n\n              <div className=\"space-y-3 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm flex items-center gap-2\">\n                    <Camera className=\"h-4 w-4\" />\n                    Camera\n                  </span>\n                  <Switch\n                    checked={cameraEnabled}\n                    onCheckedChange={toggleCamera}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm flex items-center gap-2\">\n                    <Mic className=\"h-4 w-4\" />\n                    Microphone\n                  </span>\n                  <Switch\n                    checked={micEnabled}\n                    onCheckedChange={toggleMic}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm flex items-center gap-2\">\n                    <Monitor className=\"h-4 w-4\" />\n                    Screen Share\n                  </span>\n                  <Switch\n                    checked={screenSharing}\n                    onCheckedChange={toggleScreenShare}\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={toggleStream}\n                className={`w-full ${isStreamLive \n                  ? 'bg-red-500 hover:bg-red-600 text-white' \n                  : 'bg-chart-4 hover:bg-chart-4/90 text-white'\n                }`}\n              >\n                {isStreamLive ? (\n                  <>\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    End Stream\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Start Stream\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* VR/AR Controls */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"h-5 w-5 text-accent\" />\n                Immersive Experience\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* VR Environment Preview */}\n              <div className=\"bg-gradient-to-br from-purple-900/50 to-blue-900/50 rounded-lg aspect-video mb-4 flex items-center justify-center relative border border-accent/30\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-accent/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Globe className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <div className=\"text-sm text-accent font-medium\">Virtual Auditorium</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Immersive 3D environment\n                  </p>\n                </div>\n                <div className=\"absolute top-2 right-2 bg-accent/20 text-accent px-2 py-1 rounded text-xs border border-accent/30\">\n                  VR Ready\n                </div>\n              </div>\n\n              <div className=\"space-y-3 mb-4\">\n                <Button \n                  onClick={toggleVR}\n                  className={`w-full ${vrMode \n                    ? 'bg-accent text-accent-foreground' \n                    : 'bg-accent/20 text-accent border border-accent/30'\n                  }`}\n                  variant={vrMode ? \"default\" : \"outline\"}\n                >\n                  <Headphones className=\"h-4 w-4 mr-2\" />\n                  {vrMode ? 'Exit VR Mode' : 'Enter VR Mode'}\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Camera className=\"h-4 w-4 mr-2\" />\n                  AR View\n                </Button>\n              </div>\n\n              <div className=\"text-sm space-y-1\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">VR Participants</span>\n                  <span className=\"font-medium\">{participants.vr}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">AR Viewers</span>\n                  <span className=\"font-medium\">{participants.ar}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Web Participants</span>\n                  <span className=\"font-medium\">{participants.web}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Interactive Polls */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-chart-3\" />\n                Live Polls & Q&A\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Active Poll */}\n              <div className=\"mb-6\">\n                <div className=\"mb-3\">\n                  <Badge variant=\"secondary\" className=\"mb-2\">Active Poll</Badge>\n                  <p className=\"text-sm font-medium\">{pollData.question}</p>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {pollData.options.map((option, index) => (\n                    <div key={index} className=\"space-y-1\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>{option.name}</span>\n                        <span>{option.percentage}%</span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full transition-all duration-500 ${\n                            index === 0 ? 'bg-primary' : \n                            index === 1 ? 'bg-accent' : \n                            'bg-chart-3'\n                          }`}\n                          style={{ width: `${option.percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2 mb-4\">\n                <Button className=\"flex-1 bg-chart-3 text-white hover:bg-chart-3/90\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  New Poll\n                </Button>\n                <Button variant=\"outline\" className=\"flex-1\">\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  Q&A\n                </Button>\n              </div>\n\n              <div className=\"text-xs text-muted-foreground text-center\">\n                {pollData.totalVotes} responses • Poll ends in {pollData.timeRemaining}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* 3D Virtual Environment */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Virtual Event Space</CardTitle>\n              <div className=\"flex space-x-2\">\n                <Button variant={!vrMode ? \"default\" : \"outline\"} size=\"sm\">\n                  Auditorium\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  Exhibition\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  Networking\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* 3D Environment Placeholder */}\n            <div className=\"h-96 bg-gradient-to-b from-indigo-900/20 to-purple-900/20 rounded-xl relative overflow-hidden border border-primary/20\">\n              {/* Virtual environment visualization */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse\">\n                    <Globe className=\"h-12 w-12 text-white\" />\n                  </div>\n                  <div className=\"text-2xl font-bold mb-2\">3D Virtual Environment</div>\n                  <div className=\"text-muted-foreground mb-4\">WebGL-powered immersive experience</div>\n                  <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Launch 3D View\n                  </Button>\n                </div>\n              </div>\n\n              {/* Floating UI Elements */}\n              <div className=\"absolute top-4 left-4 glass-card p-3 rounded-lg\">\n                <div className=\"text-sm font-medium mb-1\">Participants</div>\n                <div className=\"text-2xl font-bold text-primary\">{viewers.toLocaleString()}</div>\n              </div>\n\n              <div className=\"absolute top-4 right-4 glass-card p-3 rounded-lg\">\n                <div className=\"text-sm font-medium mb-1\">Audio Quality</div>\n                <div className=\"flex items-center space-x-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <div\n                      key={i}\n                      className={`w-1 rounded ${\n                        i < 4 ? 'bg-chart-4' : 'bg-muted'\n                      }`}\n                      style={{ height: `${12 + i * 4}px` }}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"absolute bottom-4 left-4 right-4\">\n                <div className=\"glass-card p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Button\n                        variant={micEnabled ? \"outline\" : \"destructive\"}\n                        size=\"sm\"\n                        className=\"w-12 h-12 rounded-full p-0\"\n                        onClick={toggleMic}\n                      >\n                        {micEnabled ? <Mic className=\"h-5 w-5\" /> : <MicOff className=\"h-5 w-5\" />}\n                      </Button>\n                      <Button\n                        variant={cameraEnabled ? \"outline\" : \"secondary\"}\n                        size=\"sm\"\n                        className=\"w-12 h-12 rounded-full p-0\"\n                        onClick={toggleCamera}\n                      >\n                        {cameraEnabled ? <Video className=\"h-5 w-5\" /> : <VideoOff className=\"h-5 w-5\" />}\n                      </Button>\n                      <Button\n                        variant={screenSharing ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"w-12 h-12 rounded-full p-0\"\n                        onClick={toggleScreenShare}\n                      >\n                        <Monitor className=\"h-5 w-5\" />\n                      </Button>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Volume2 className=\"h-4 w-4 text-muted-foreground\" />\n                        <Slider\n                          value={audioLevel}\n                          onValueChange={setAudioLevel}\n                          max={100}\n                          step={1}\n                          className=\"w-20\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-sm text-muted-foreground\">\n                      Speaking: <span className=\"text-foreground font-medium\">Sarah Chen</span>\n                    </div>\n                    \n                    <Button variant=\"destructive\" size=\"sm\">\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      Leave\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Environment Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Virtual Environment Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"display\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"display\">Display</TabsTrigger>\n                <TabsTrigger value=\"audio\">Audio</TabsTrigger>\n                <TabsTrigger value=\"interaction\">Interaction</TabsTrigger>\n                <TabsTrigger value=\"accessibility\">Accessibility</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"display\" className=\"space-y-4 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">High Quality Rendering</h4>\n                    <p className=\"text-sm text-muted-foreground\">Enable advanced visual effects</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Motion Blur</h4>\n                    <p className=\"text-sm text-muted-foreground\">Smooth camera movements</p>\n                  </div>\n                  <Switch />\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Field of View</h4>\n                  <Slider defaultValue={[75]} max={120} min={60} step={5} />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"audio\" className=\"space-y-4 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Spatial Audio</h4>\n                    <p className=\"text-sm text-muted-foreground\">3D positional audio</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Noise Cancellation</h4>\n                    <p className=\"text-sm text-muted-foreground\">AI-powered background noise reduction</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Master Volume</h4>\n                  <Slider defaultValue={[75]} max={100} min={0} step={1} />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"interaction\" className=\"space-y-4 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Hand Tracking</h4>\n                    <p className=\"text-sm text-muted-foreground\">Use hand gestures for interaction</p>\n                  </div>\n                  <Switch />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Voice Commands</h4>\n                    <p className=\"text-sm text-muted-foreground\">Control interface with voice</p>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Movement Speed</h4>\n                  <Slider defaultValue={[50]} max={100} min={10} step={10} />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"accessibility\" className=\"space-y-4 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">High Contrast Mode</h4>\n                    <p className=\"text-sm text-muted-foreground\">Increase visual contrast</p>\n                  </div>\n                  <Switch />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Large Text</h4>\n                    <p className=\"text-sm text-muted-foreground\">Increase font size</p>\n                  </div>\n                  <Switch />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Motion Reduction</h4>\n                    <p className=\"text-sm text-muted-foreground\">Reduce motion effects</p>\n                  </div>\n                  <Switch />\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21684},"client/src/pages/VirtualSpacePage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Navigation } from '@/components/ui/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Slider } from '@/components/ui/slider';\nimport { VirtualEnvironment } from '@/components/VirtualEnvironment';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  Monitor, \n  MonitorOff, \n  Users, \n  Settings, \n  Headphones,\n  Wifi,\n  WifiOff\n} from 'lucide-react';\n\nexport default function VirtualSpacePage() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const { isConnected } = useWebSocket(user?.id);\n  \n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [audioLevel, setAudioLevel] = useState([75]);\n  const [selectedEnvironment, setSelectedEnvironment] = useState('auditorium');\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  const virtualEnvironments = [\n    {\n      id: 'auditorium',\n      name: 'Virtual Auditorium',\n      description: 'Large presentation space for conferences',\n      capacity: 1000,\n      features: ['Stage View', 'Audience Chat', 'Q&A'],\n      isActive: true,\n    },\n    {\n      id: 'classroom',\n      name: 'Interactive Classroom',\n      description: 'Collaborative learning environment',\n      capacity: 50,\n      features: ['Breakout Rooms', 'Whiteboard', 'Screen Share'],\n      isActive: true,\n    },\n    {\n      id: 'networking',\n      name: 'Networking Lounge',\n      description: 'Casual space for connections',\n      capacity: 200,\n      features: ['Small Groups', 'Profile Cards', 'Icebreakers'],\n      isActive: true,\n    },\n    {\n      id: 'exhibition',\n      name: 'Exhibition Hall',\n      description: 'Virtual booths and demos',\n      capacity: 500,\n      features: ['3D Booths', 'Product Demos', 'Lead Capture'],\n      isActive: false,\n    },\n  ];\n\n  const liveEvents = [\n    {\n      id: '1',\n      title: 'AI Innovation Summit',\n      participants: 1247,\n      type: 'Conference',\n      environment: 'auditorium',\n      status: 'live',\n    },\n    {\n      id: '2',\n      title: 'React Workshop',\n      participants: 89,\n      type: 'Workshop',\n      environment: 'classroom',\n      status: 'live',\n    },\n    {\n      id: '3',\n      title: 'Tech Networking',\n      participants: 156,\n      type: 'Networking',\n      environment: 'networking',\n      status: 'live',\n    },\n  ];\n\n  const handleToggleVideo = () => {\n    setIsVideoOn(!isVideoOn);\n    toast({\n      title: isVideoOn ? \"Camera Off\" : \"Camera On\",\n      description: `Video ${isVideoOn ? 'disabled' : 'enabled'}`,\n    });\n  };\n\n  const handleToggleAudio = () => {\n    setIsAudioOn(!isAudioOn);\n    toast({\n      title: isAudioOn ? \"Microphone Muted\" : \"Microphone Unmuted\",\n      description: `Audio ${isAudioOn ? 'disabled' : 'enabled'}`,\n    });\n  };\n\n  const handleToggleScreenShare = () => {\n    setIsScreenSharing(!isScreenSharing);\n    toast({\n      title: isScreenSharing ? \"Screen Share Stopped\" : \"Screen Share Started\",\n      description: `Screen sharing ${isScreenSharing ? 'disabled' : 'enabled'}`,\n    });\n  };\n\n  const handleJoinEnvironment = (environmentId: string) => {\n    setSelectedEnvironment(environmentId);\n    toast({\n      title: \"Joining Virtual Space\",\n      description: \"Connecting you to the virtual environment...\",\n    });\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 flex items-center justify-center\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background virtual-space\">\n      <Navigation />\n      \n      <div className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl font-bold mb-4\">\n              Immersive <span className=\"gradient-text\">Virtual Experiences</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              VR/AR integration, live streaming, interactive environments, and real-time collaboration\n            </p>\n          </div>\n\n          {/* Connection Status */}\n          <div className=\"mb-8\">\n            <Card className={`border-2 ${isConnected ? 'border-chart-4 bg-chart-4/10' : 'border-destructive bg-destructive/10'}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {isConnected ? (\n                      <Wifi className=\"w-5 h-5 text-chart-4\" />\n                    ) : (\n                      <WifiOff className=\"w-5 h-5 text-destructive\" />\n                    )}\n                    <div>\n                      <p className=\"font-semibold\">\n                        {isConnected ? '🟢 Connected to Virtual Space' : '🔴 Connection Lost'}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {isConnected \n                          ? 'All systems operational • Low latency' \n                          : 'Attempting to reconnect...'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant={isConnected ? \"outline\" : \"destructive\"} className=\"text-xs\">\n                    {isConnected ? 'ONLINE' : 'OFFLINE'}\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Live Events */}\n          <div className=\"mb-12\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold\">Live Virtual Events</h2>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full live-indicator\"></div>\n                <span className=\"text-sm font-medium text-red-500\">{liveEvents.length} events live now</span>\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {liveEvents.map((event) => (\n                <Card key={event.id} className=\"glass-card hover-lift\" data-testid={`live-event-${event.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Badge className=\"bg-red-500 text-white\">\n                        <div className=\"w-2 h-2 bg-white rounded-full mr-2 live-indicator\"></div>\n                        LIVE\n                      </Badge>\n                      <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                        <Users className=\"w-4 h-4\" />\n                        {event.participants.toLocaleString()}\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"font-bold text-lg mb-2\">{event.title}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {event.type} • {virtualEnvironments.find(e => e.id === event.environment)?.name}\n                    </p>\n                    \n                    <Button \n                      className=\"w-full bg-gradient-to-r from-red-500 to-red-600 text-white hover:opacity-90\"\n                      onClick={() => handleJoinEnvironment(event.environment)}\n                      data-testid={`button-join-${event.id}`}\n                    >\n                      Join Live Event\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n            {/* Media Controls */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Video className=\"w-5 h-5 text-primary\" />\n                  Media Controls\n                </CardTitle>\n                <CardDescription>Manage your audio and video settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Video Preview */}\n                <div className=\"relative\">\n                  <div className=\"w-full h-32 bg-gradient-to-br from-primary/20 to-accent/20 rounded-lg flex items-center justify-center relative overflow-hidden\">\n                    {isVideoOn ? (\n                      <div className=\"text-center\">\n                        <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mb-2\">\n                          <span className=\"text-white text-xl\">\n                            {user?.firstName?.[0]}{user?.lastName?.[0]}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">Camera Active</p>\n                      </div>\n                    ) : (\n                      <div className=\"text-center\">\n                        <VideoOff className=\"w-8 h-8 text-muted-foreground mb-2\" />\n                        <p className=\"text-sm text-muted-foreground\">Camera Off</p>\n                      </div>\n                    )}\n                    <div className=\"absolute top-2 right-2 text-xs bg-black/50 text-white px-2 py-1 rounded\">\n                      {isVideoOn ? 'ON' : 'OFF'}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Controls */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {isVideoOn ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n                      <span className=\"text-sm\">Camera</span>\n                    </div>\n                    <Switch \n                      checked={isVideoOn} \n                      onCheckedChange={handleToggleVideo}\n                      data-testid=\"switch-video\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {isAudioOn ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n                      <span className=\"text-sm\">Microphone</span>\n                    </div>\n                    <Switch \n                      checked={isAudioOn} \n                      onCheckedChange={handleToggleAudio}\n                      data-testid=\"switch-audio\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {isScreenSharing ? <Monitor className=\"w-4 h-4\" /> : <MonitorOff className=\"w-4 h-4\" />}\n                      <span className=\"text-sm\">Screen Share</span>\n                    </div>\n                    <Switch \n                      checked={isScreenSharing} \n                      onCheckedChange={handleToggleScreenShare}\n                      data-testid=\"switch-screen\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Headphones className=\"w-4 h-4\" />\n                      <span className=\"text-sm\">Audio Level</span>\n                    </div>\n                    <Slider\n                      value={audioLevel}\n                      onValueChange={setAudioLevel}\n                      max={100}\n                      step={1}\n                      className=\"w-full\"\n                      data-testid=\"slider-audio-level\"\n                    />\n                    <div className=\"text-xs text-muted-foreground text-right\">\n                      {audioLevel[0]}%\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    data-testid=\"button-settings\"\n                  >\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    data-testid=\"button-test-audio\"\n                  >\n                    Test Audio\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Virtual Environments */}\n            <Card className=\"glass-card lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <span className=\"text-2xl\">🌐</span>\n                  Virtual Environments\n                </CardTitle>\n                <CardDescription>Choose your immersive experience</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4\">\n                  {virtualEnvironments.map((env) => (\n                    <div\n                      key={env.id}\n                      className={`p-4 rounded-lg border-2 transition-all cursor-pointer ${\n                        selectedEnvironment === env.id\n                          ? 'border-primary bg-primary/10'\n                          : 'border-border hover:border-primary/50'\n                      } ${!env.isActive ? 'opacity-50' : ''}`}\n                      onClick={() => env.isActive && handleJoinEnvironment(env.id)}\n                      data-testid={`environment-${env.id}`}\n                    >\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h4 className=\"font-semibold\">{env.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{env.description}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium\">\n                            Up to {env.capacity.toLocaleString()} users\n                          </div>\n                          {env.isActive ? (\n                            <Badge variant=\"outline\" className=\"text-chart-4 border-chart-4\">\n                              Available\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"outline\" className=\"text-muted-foreground\">\n                              Coming Soon\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-wrap gap-2\">\n                        {env.features.map((feature) => (\n                          <Badge key={feature} variant=\"secondary\" className=\"text-xs\">\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Virtual Environment Renderer */}\n          <VirtualEnvironment \n            environmentId={selectedEnvironment}\n            isVideoOn={isVideoOn}\n            isAudioOn={isAudioOn}\n            isScreenSharing={isScreenSharing}\n          />\n\n          {/* Quick Actions */}\n          <div className=\"mt-12\">\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n                <CardDescription>Common virtual space functions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"action-join-breakout\">\n                    <Users className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">Join Breakout</span>\n                  </Button>\n                  \n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"action-share-screen\">\n                    <Monitor className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">Share Screen</span>\n                  </Button>\n                  \n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"action-virtual-background\">\n                    <span className=\"text-2xl\">🖼️</span>\n                    <span className=\"text-sm\">Background</span>\n                  </Button>\n                  \n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"action-record-session\">\n                    <span className=\"text-2xl\">⏺️</span>\n                    <span className=\"text-sm\">Record</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18022},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl?: string;\n  role: 'organizer' | 'participant' | 'sponsor' | 'admin';\n  skills: string[];\n  interests: string[];\n  bio?: string;\n  github?: string;\n  linkedin?: string;\n  website?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Event {\n  id: string;\n  title: string;\n  description?: string;\n  type: 'hackathon' | 'workshop' | 'quiz' | 'conference';\n  status: 'upcoming' | 'live' | 'completed' | 'cancelled';\n  startDate: string;\n  endDate: string;\n  location?: string;\n  maxParticipants?: number;\n  registrationFee: number;\n  prizePool?: number;\n  imageUrl?: string;\n  tags: string[];\n  requirements: string[];\n  agenda?: any;\n  organizerId: string;\n  isVirtual: boolean;\n  isPublic: boolean;\n  allowTeams: boolean;\n  maxTeamSize: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Team {\n  id: string;\n  name: string;\n  description?: string;\n  eventId: string;\n  leaderId: string;\n  maxMembers: number;\n  isOpen: boolean;\n  skillsNeeded: string[];\n  githubRepo?: string;\n  projectUrl?: string;\n  submissionUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Message {\n  id: string;\n  content: string;\n  senderId: string;\n  recipientId?: string;\n  teamId?: string;\n  eventId?: string;\n  channelType: 'direct' | 'team' | 'event' | 'global';\n  messageType: 'text' | 'file' | 'image' | 'code';\n  fileUrl?: string;\n  fileName?: string;\n  createdAt: string;\n}\n\nexport interface AIRecommendation {\n  id: string;\n  userId: string;\n  type: 'event' | 'team_member' | 'skill_development';\n  targetId: string;\n  confidence: number;\n  reasoning: string;\n  isViewed: boolean;\n  isActedUpon: boolean;\n  createdAt: string;\n}\n\nexport interface EventRegistration {\n  id: string;\n  eventId: string;\n  userId: string;\n  teamId?: string;\n  registrationDate: string;\n  paymentStatus: 'pending' | 'paid' | 'failed';\n  paymentIntentId?: string;\n  attendanceStatus: 'registered' | 'attended' | 'no_show';\n  feedback?: string;\n  rating?: number;\n}\n\nexport interface Analytics {\n  id: string;\n  eventId?: string;\n  userId?: string;\n  metricType: 'attendance' | 'engagement' | 'revenue' | 'rating';\n  metricValue: number;\n  metadata?: any;\n  timestamp: string;\n}\n\nexport interface WebSocketMessage {\n  type: 'chat_message' | 'typing_indicator' | 'join_channel' | 'user_status' | 'notification';\n  senderId?: string;\n  recipientId?: string;\n  teamId?: string;\n  eventId?: string;\n  channelType?: string;\n  content?: string;\n  messageType?: string;\n  isTyping?: boolean;\n  channelId?: string;\n  userId?: string;\n  timestamp?: string;\n}\n\nexport interface TeamMatchingResult {\n  recommendedUsers: {\n    userId: string;\n    matchScore: number;\n    reasoning: string;\n    complementarySkills: string[];\n  }[];\n  suggestedTeamComposition: {\n    roles: string[];\n    skillGaps: string[];\n    recommendedSize: number;\n  };\n}\n\nexport interface EventRecommendationResult {\n  recommendedEvents: {\n    eventId: string;\n    matchScore: number;\n    reasoning: string;\n    learningOutcomes: string[];\n    careerBenefits: string[];\n  }[];\n  skillDevelopmentSuggestions: {\n    skill: string;\n    currentLevel: string;\n    targetLevel: string;\n    recommendedPath: string[];\n  }[];\n}\n","size_bytes":3317},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/analytics-chart.tsx":{"content":"import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar, PieChart, Pie, Cell, AreaChart, Area } from 'recharts';\n\ninterface AnalyticsChartProps {\n  data: any[];\n  type: 'line' | 'bar' | 'area' | 'pie';\n  height?: number;\n  color?: string;\n}\n\nconst COLORS = ['hsl(var(--primary))', 'hsl(var(--accent))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];\n\nexport function AnalyticsChart({ data, type, height = 300, color = 'hsl(var(--primary))' }: AnalyticsChartProps) {\n  const commonProps = {\n    data,\n    margin: { top: 5, right: 30, left: 20, bottom: 5 },\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"font-medium text-foreground\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    switch (type) {\n      case 'line':\n        return (\n          <LineChart {...commonProps}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"name\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Line \n              type=\"monotone\" \n              dataKey=\"participants\" \n              stroke={color}\n              strokeWidth={3}\n              dot={{ r: 6, fill: color }}\n              activeDot={{ r: 8, fill: color }}\n            />\n            {data[0]?.engagement !== undefined && (\n              <Line \n                type=\"monotone\" \n                dataKey=\"engagement\" \n                stroke=\"hsl(var(--accent))\"\n                strokeWidth={2}\n                dot={{ r: 4, fill: 'hsl(var(--accent))' }}\n              />\n            )}\n          </LineChart>\n        );\n\n      case 'bar':\n        return (\n          <BarChart {...commonProps}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"name\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Bar \n              dataKey=\"participants\" \n              fill={color}\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        );\n\n      case 'area':\n        return (\n          <AreaChart {...commonProps}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis \n              dataKey=\"name\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fontSize: 12 }}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Area \n              type=\"monotone\" \n              dataKey=\"participants\" \n              stroke={color}\n              fill={color}\n              fillOpacity={0.3}\n              strokeWidth={2}\n            />\n          </AreaChart>\n        );\n\n      case 'pie':\n        return (\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip content={<CustomTooltip />} />\n          </PieChart>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      {renderChart()}\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":4478},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Bell, MessageSquare, Menu, X } from 'lucide-react';\n\nexport function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navigationItems = [\n    { href: '/', label: 'Dashboard', icon: '🏠' },\n    { href: '/events', label: 'Events', icon: '📅' },\n    { href: '/community', label: 'Community', icon: '👥' },\n    { href: '/analytics', label: 'Analytics', icon: '📊' },\n    { href: '/virtual-space', label: 'Virtual Space', icon: '🌐' },\n  ];\n\n  if (!isAuthenticated) {\n    return (\n      <header className=\"fixed w-full top-0 left-0 z-50 glass-card\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                  <span className=\"text-white text-xl\">⚡</span>\n                </div>\n                <h1 className=\"text-2xl font-bold gradient-text\">Nexus</h1>\n              </div>\n            </Link>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => window.location.href = '/api/login'}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-login\"\n              >\n                Sign In\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n\n  return (\n    <header className=\"fixed w-full top-0 left-0 z-50 glass-card\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <span className=\"text-white text-xl\">⚡</span>\n              </div>\n              <h1 className=\"text-2xl font-bold gradient-text\">Nexus</h1>\n            </div>\n          </Link>\n          \n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {navigationItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`text-muted-foreground hover:text-foreground transition-colors ${\n                  location === item.href ? 'text-primary' : ''\n                }`}\n                data-testid={`link-${item.label.toLowerCase()}`}\n              >\n                <span className=\"mr-2\">{item.icon}</span>\n                {item.label}\n              </Link>\n            ))}\n          </nav>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"notification-dot\"></span>\n            </Button>\n            \n            {/* Messages */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative\"\n              data-testid=\"button-messages\"\n            >\n              <MessageSquare className=\"h-5 w-5\" />\n              <span className=\"notification-dot\"></span>\n            </Button>\n\n            {/* User Profile */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center space-x-3 cursor-pointer\" data-testid=\"button-user-profile\">\n                  <Avatar className=\"w-10 h-10 border-2 border-primary\">\n                    <AvatarImage src={user?.profileImageUrl} alt={user?.firstName} />\n                    <AvatarFallback>\n                      {user?.firstName?.[0]}{user?.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden md:block\">\n                    <p className=\"text-sm font-medium\">{user?.firstName} {user?.lastName}</p>\n                    <p className=\"text-xs text-muted-foreground capitalize\">{user?.role}</p>\n                  </div>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuItem data-testid=\"menu-profile\">\n                  Profile Settings\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-preferences\">\n                  Preferences\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-help\">\n                  Help & Support\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => window.location.href = '/api/logout'}\n                  data-testid=\"menu-logout\"\n                >\n                  Sign Out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile Menu Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <nav className=\"lg:hidden mt-4 pb-4 border-t border-border pt-4\">\n            <div className=\"space-y-2\">\n              {navigationItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`block px-4 py-2 rounded-lg text-muted-foreground hover:text-foreground hover:bg-muted transition-colors ${\n                    location === item.href ? 'text-primary bg-primary/10' : ''\n                  }`}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-link-${item.label.toLowerCase()}`}\n                >\n                  <span className=\"mr-2\">{item.icon}</span>\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </nav>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":6967},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}